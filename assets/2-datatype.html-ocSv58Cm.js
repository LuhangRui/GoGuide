import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,d as e}from"./app-8pxmcvZu.js";const t={},o=e(`<h2 id="整数-int" tabindex="-1"><a class="header-anchor" href="#整数-int" aria-hidden="true">#</a> 整数 (int)</h2><p>整数有两种类型：</p><table><thead><tr><th>类型</th><th>范围</th><th>介绍</th></tr></thead><tbody><tr><td>有符号数 (signed integers)</td><td><code>-∞</code> ~ <code>+∞</code></td><td>有符号数包含正数和负数</td></tr><tr><td>无符号数 (unsigned integers)</td><td><code>0</code> ~ <code>+∞</code></td><td>无符号数包含 0 和所有正数</td></tr></tbody></table><blockquote><p>golang 中 <code>int</code> 开头为有符号数， <code>uint</code> 开头为无符号数</p></blockquote><p>Golang 中的整数类型：</p><table><thead><tr><th>位</th><th>类型</th></tr></thead><tbody><tr><td>8</td><td><code>int8</code> <code>uint8</code></td></tr><tr><td>16</td><td><code>int16</code> <code>uint16</code></td></tr><tr><td>32</td><td><code>int32</code> <code>uint32</code></td></tr><tr><td>64</td><td><code>int64</code> <code>uint64</code></td></tr><tr><td>32 或 64 (基于系统架构)</td><td><code>int</code> <code>uint</code></td></tr></tbody></table><p>同时还有两个等价类型</p><ul><li><code>rune</code> : 等价于 <code>int32</code> , 用于存储 <code>Unicode</code> 字符</li><li><code>byte</code> ：等价于 <code>uint8</code> , 用于存储 <code>ASCII</code> 字符</li></ul><h2 id="浮点数-float" tabindex="-1"><a class="header-anchor" href="#浮点数-float" aria-hidden="true">#</a> 浮点数 (float)</h2><p>浮点数就是包含小数点的数字</p><table><thead><tr><th>位</th><th>类型</th></tr></thead><tbody><tr><td>32</td><td><code>float32</code></td></tr><tr><td>64</td><td><code>float64</code></td></tr></tbody></table><h2 id="复数-complex" tabindex="-1"><a class="header-anchor" href="#复数-complex" aria-hidden="true">#</a> 复数 (complex)</h2><p>复数包含虚数和实数，实数为浮点数</p><table><thead><tr><th>位</th><th>类型</th></tr></thead><tbody><tr><td>32 位浮点数 + 虚数</td><td><code>complex64</code></td></tr><tr><td>64 位浮点数 + 虚数</td><td><code>complex128</code></td></tr></tbody></table><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 初始化一个复数</span>
<span class="token keyword">var</span> complexData <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 等于： 5 + 3i</span>

<span class="token comment">// 另一种初始化方式</span>
complexData2 <span class="token operator">:=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3i</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string" aria-hidden="true">#</a> 字符串 (string)</h2><p>字符串由一连串的字符组成，类型名称为 <code>string</code></p><p><strong>字符串一旦创建，无法修改</strong></p><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">:=</span> <span class="token string">&quot;Hi! Jack&quot;</span>
  
  <span class="token comment">// 不能修改，以下注释的代码会报错</span>
  <span class="token comment">// str[2] = &#39;c&#39;</span>

  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="布尔类型-bool" tabindex="-1"><a class="header-anchor" href="#布尔类型-bool" aria-hidden="true">#</a> 布尔类型 (bool)</h2><p>布尔类型的值为 <code>true</code> 或 <code>false</code>, 类型名称为 <code>bool</code></p><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> isNumber <span class="token builtin">bool</span>

isNumber <span class="token operator">=</span> <span class="token boolean">true</span>
isNumber <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="数组-array" tabindex="-1"><a class="header-anchor" href="#数组-array" aria-hidden="true">#</a> 数组 (array)</h2><p>数组由一系列数据组成，可通过下标获取数据</p><p><strong>数组的容量一经创建就无法修改</strong></p><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="切片-slices" tabindex="-1"><a class="header-anchor" href="#切片-slices" aria-hidden="true">#</a> 切片 (slices)</h2><p>切片是动态的数组，可根据数据自动调整容量大小</p><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>
		data <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结果</span>
<span class="token comment">// [0 1 2 3 4 5 6 7 8 9]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="map-map" tabindex="-1"><a class="header-anchor" href="#map-map" aria-hidden="true">#</a> Map (map)</h2><p><code>map</code> 是一种键值映射表，通过 <code>key</code> 获取对应的 <code>value</code></p><p><code>map</code> 的声明方式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>map[KeyType]ValueType
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>KeyType</code> 为 key 的数据类型 , <code>ValueType</code> 为 <code>value</code> 的数据类型</p><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 声明 map</span>
<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>

<span class="token comment">// 使用 make 初始化 map</span>
m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>

<span class="token comment">// 设置值</span>
m<span class="token punctuation">[</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">66</span>

<span class="token comment">// 输出值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="结构体-struct" tabindex="-1"><a class="header-anchor" href="#结构体-struct" aria-hidden="true">#</a> 结构体 (struct)</h2><p>结构体由一系列自定义的字段组成，可通过 <code>.</code> 获取字段内容</p><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

a <span class="token operator">:=</span> Animal<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span> <span class="token string">&quot;Lucky&quot;</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="指针-pointer" tabindex="-1"><a class="header-anchor" href="#指针-pointer" aria-hidden="true">#</a> 指针 (pointer)</h2><p>指针存储的是变量的内存地址，在变量前使用 <code>*</code> 定义为指针，使用 <code>&amp;</code> 获取变量地址，通过指针可以在函数中修改函数外的数据</p><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> num <span class="token operator">*</span><span class="token builtin">int</span>

n <span class="token operator">:=</span> <span class="token number">10</span>

num <span class="token operator">=</span> <span class="token operator">&amp;</span>n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,41),i=[o];function c(p,d){return a(),s("div",null,i)}const u=n(t,[["render",c],["__file","2-datatype.html.vue"]]);export{u as default};
