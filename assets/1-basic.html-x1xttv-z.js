import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,d as s}from"./app--n4y67P-.js";const o={},t=s(`<h2 id="keywords" tabindex="-1"><a class="header-anchor" href="#keywords" aria-hidden="true">#</a> Keywords</h2><p>Golang has 25 reserved keywords that cannot be used as program identifiers.</p><table><thead><tr><th>Type</th><th>Keywords</th><th>Introduction</th></tr></thead><tbody><tr><td>Declaration</td><td><code>const</code> <code>func</code> <code>import</code> <code>package</code> <code>type</code> <code>var</code></td><td>These keywords are used to declare various elements in the code.</td></tr><tr><td>Compound Types</td><td><code>chan</code> <code>interface</code> <code>map</code> <code>struct</code></td><td>These keywords are used to declare some special compound types.</td></tr><tr><td>Flow Control</td><td><code>break</code> <code>case</code> <code>continue</code> <code>default</code> <code>else</code> <code>fallthrough</code> <code>for</code> <code>goto</code> <code>if</code> <code>range</code> <code>return</code> <code>select</code> <code>switch</code></td><td>These keywords are used to control the flow of program execution.</td></tr><tr><td>Function Modifiers</td><td><code>defer</code> <code>go</code></td><td>Used to modify special functions.</td></tr></tbody></table><h2 id="declaration-type-keywords" tabindex="-1"><a class="header-anchor" href="#declaration-type-keywords" aria-hidden="true">#</a> Declaration Type Keywords</h2><h3 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> <strong>const</strong></h3><p><code>const</code> is used to declare constants, which once declared cannot be changed, and must specify an initial value when declaring a constant.</p><details><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> identifier T <span class="token operator">=</span> value  <span class="token comment">// T is the data type, which can be omitted, and the compiler will infer it.</span>
<span class="token keyword">const</span> identifier1<span class="token punctuation">,</span> identifier2 <span class="token operator">=</span> value1<span class="token punctuation">,</span> value2 <span class="token comment">// Declare multiple, such as const a, b, c = &quot;hello&quot;, 100, true</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    FeMale <span class="token operator">=</span> <span class="token number">0</span>
    Male <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">)</span> <span class="token comment">// Enumeration</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    a <span class="token operator">=</span> <span class="token boolean">iota</span>
    b
    c
<span class="token punctuation">)</span> <span class="token comment">// iota</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,7),d=[t];function c(r,i){return n(),a("div",null,d)}const u=e(o,[["render",c],["__file","1-basic.html.vue"]]);export{u as default};
