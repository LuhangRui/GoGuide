import{_ as n}from"./panic-call-C9OxU7iz.js";import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-v35IdkhA.js";const i={},o=t(`<hr><h2 id="panic-recover-exception-handling" tabindex="-1"><a class="header-anchor" href="#panic-recover-exception-handling"><span>Panic &amp; Recover | Exception Handling</span></a></h2><p>In Golang, <code>panic</code> and <code>recover</code> are two keywords used for exception handling. <code>panic</code> is used to raise an exception, while <code>recover</code> is used to catch exceptions.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>panic(interface{})</code></td><td>Raises an exception, stops the execution of the current Goroutine, and recursively executes the <code>defer</code> methods within the current Goroutine.</td></tr><tr><td><code>recover() interface{}</code></td><td>Catches an exception, returns the exception information, and is used to handle exceptions, preventing program crashes due to exceptions. It can only be called within a <code>defer</code> block.</td></tr></tbody></table></div><h3 id="panic-data-structure" tabindex="-1"><a class="header-anchor" href="#panic-data-structure"><span>Panic Data Structure</span></a></h3><p>The data structure for <code>panic</code> is defined in the <code>runtime._panic</code> struct:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// _panic stores information about an active panic.</span>
<span class="token comment">//</span>
<span class="token comment">// _panic values can only exist on the stack.</span>
<span class="token comment">//</span>
<span class="token comment">// argp and link fields are stack pointers, but they do not need special handling during stack growth:</span>
<span class="token comment">// because they are pointer types and _panic values only exist on the stack, regular stack pointer adjustments handle them.</span>
<span class="token keyword">type</span> _panic <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	argp unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// Points to the arguments of deferred calls that ran during the panic; cannot move - known to liblink</span>
	arg  any            <span class="token comment">// The argument to panic</span>
	link <span class="token operator">*</span>_panic        <span class="token comment">// Points to the link of the previous panic</span>

<span class="token comment">// startPC and startSP track where _panic.start was called.</span>
	startPC <span class="token builtin">uintptr</span>
	startSP unsafe<span class="token punctuation">.</span>Pointer

<span class="token comment">// We&#39;re running the current stack frame of a deferred call.</span>
	sp unsafe<span class="token punctuation">.</span>Pointer
	lr <span class="token builtin">uintptr</span>
	fp unsafe<span class="token punctuation">.</span>Pointer

<span class="token comment">// If the function returned by _panic.next() recovers the panic, retpc stores the PC to jump back to.</span>
	retpc <span class="token builtin">uintptr</span>

<span class="token comment">// Additional state for handling inlined defers.</span>
	deferBitsPtr <span class="token operator">*</span><span class="token builtin">uint8</span>
	slotsPtr     unsafe<span class="token punctuation">.</span>Pointer

	recovered   <span class="token builtin">bool</span> <span class="token comment">// Whether this panic has been recovered</span>
	goexit      <span class="token builtin">bool</span>
	deferreturn <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The <code>_panic</code> struct is used to store information about an active panic.</li><li><code>_panic</code> values can only exist on the stack and are not allocated on the heap.</li><li>The <code>argp</code> and <code>link</code> fields are stack pointers, but they do not require special handling during stack growth. Because they are pointer types and <code>_panic</code> values only exist on the stack, regular stack pointer adjustments handle them.</li><li><code>startPC</code> and <code>startSP</code> track where <code>_panic.start</code> was called.</li><li><code>sp</code> points to the current stack frame of a deferred call.</li><li><code>retpc</code> stores the PC to jump back to if the function returned by <code>_panic.next()</code> recovers the panic.</li><li><code>recovered</code> indicates whether this panic has been recovered.</li></ul><div class="hint-container important"><p class="hint-container-title">Scope of \`panic\`</p><ul><li><code>panic</code> only triggers the <code>defer</code> within the current Goroutine.</li></ul><hr><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token number">4</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token function">testPanic</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>


	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">testPanic</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;recover panic: &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;panic %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;test panic: &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Result</span>
<span class="token comment">// test panic:  0</span>
<span class="token comment">// recover panic:  1</span>
<span class="token comment">// test panic:  3</span>
<span class="token comment">// test panic:  2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>recover</code> is used to capture exceptions, return exception information, and handle exceptions to prevent program crashes caused by exceptions. It is only valid when called in <code>defer</code>, and calling elsewhere will only return <code>nil</code>.</li><li><code>panic</code> can also be called in <code>defer</code></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token number">4</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token function">testPanic</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>


	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">testPanic</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;recover panic: &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
			<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;panic in defer&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;panic %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;test panic: &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Result</span>
<span class="token comment">//	test panic:  3</span>
<span class="token comment">//	test panic:  0</span>
<span class="token comment">//	test panic:  2</span>
<span class="token comment">//	recover panic:  1</span>
<span class="token comment">//	panic: panic 1 [recovered]</span>
<span class="token comment">//	panic: panic in defer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="execution-flow-of-panic" tabindex="-1"><a class="header-anchor" href="#execution-flow-of-panic"><span>Execution Flow of Panic</span></a></h3><figure><img src="`+n+`" alt="Panic Execution Flow" tabindex="0" loading="lazy"><figcaption>Panic Execution Flow</figcaption></figure><div class="hint-container info"><p class="hint-container-title">Execution Flow</p><ol><li>The compiler translates <code>panic</code> into a call to the <code>gopanic</code> function in the <code>runtime</code> package.</li><li>The <code>defer</code> chain for the Goroutine is executed in reverse order.</li><li>If there is no <code>recover</code> in the <code>defer</code>, the code within the <code>defer</code> is executed.</li><li>If there is a <code>recover</code> in the <code>defer</code>, the <code>runtime.gorecover</code> function is called. It sets the <code>recovered</code> field in the <code>panic</code> to <code>true</code>, retrieves the program counter (<code>pc</code>) and stack pointer (<code>sp</code>) from <code>runtime._defer</code>, executes <code>runtime.recovery</code> to recover the program, and finally calls <code>runtime.deferproc</code> with a return value of <code>1</code> to indicate successful recovery.</li><li>The <code>deferreturn</code> field of the <code>panic</code> is set to <code>true</code>, indicating that the <code>defer</code> has completed execution.</li><li>If none of the <code>defer</code> blocks contain a <code>recover()</code>, the program terminates by executing <code>runtime.fatalpanic</code>.</li></ol><details class="hint-container details"><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;func 1&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;func 2&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;func 3&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;recover&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;panic&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Output:</span>
<span class="token comment">//	func 3</span>
<span class="token comment">//	recover</span>
<span class="token comment">//	func 2</span>
<span class="token comment">//	func 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></div><h3 id="exception-handling" tabindex="-1"><a class="header-anchor" href="#exception-handling"><span>Exception Handling</span></a></h3><div class="hint-container warning"><p class="hint-container-title">Difficult-to-Catch Exception Types</p><p>The following exceptions cannot be caught using <code>recover</code>:</p><ul><li><strong>Out of Memory</strong>: When pre-allocated memory space is too large and results in an out-of-memory condition, the error message will be <code>runtime: out of memory</code>.</li><li><strong>Concurrent Map Read and Write</strong>: Attempting concurrent read and write operations on a map will result in the error message <code>concurrent map read and map write</code>.</li><li><strong>Stack Exhaustion</strong>: When the stack memory is exhausted, the error message will be <code>runtime: goroutine stack exceeds 1000000000-byte limit</code>.</li><li><strong>Goroutine Running on NULL Machine</strong>: Running a Goroutine on a NULL machine will result in the error message <code>runtime: goroutine running on NULL machine</code>.</li><li><strong>All Goroutines Asleep (Deadlock)</strong>: When all Goroutines are asleep and the program is deadlocked, the error message will be <code>all goroutines are asleep - deadlock!</code>.</li></ul></div><div class="hint-container tip"><p class="hint-container-title">Catchable Exceptions</p><p>The following exceptions can be caught using <code>recover</code>:</p><ul><li><strong>Array Index Out of Range</strong>: When an array index is out of range, the error message will be <code>panic: runtime error: index out of range</code>.</li><li><strong>Nil Pointer Dereference</strong>: Attempting to dereference a nil pointer will result in the error message <code>panic: runtime error: invalid memory address or nil pointer dereference</code>.</li><li><strong>Type Assertion Failure</strong>: When a type assertion fails, the error message will be <code>panic: interface conversion: interface {} is nil, not int</code>.</li><li><strong>Division by Zero</strong>: Attempting to divide by zero will result in the error message <code>panic: runtime error: integer divide by zero</code>.</li><li><strong>Calling an Undefined Method</strong>: Calling a method that does not exist will result in the error message <code>panic: runtime error: invalid memory address or nil pointer dereference</code>.</li></ul></div>`,15),c=[o];function p(l,r){return s(),a("div",null,c)}const m=e(i,[["render",p],["__file","10-panic-recover.html.vue"]]),k=JSON.parse('{"path":"/en/guide/concepts/golang/10-panic-recover.html","title":"Panic & Recover","lang":"en-US","frontmatter":{"order":10,"title":"Panic & Recover","icon":"line-md:star-filled","head":[["meta",{"name":"keywords","content":"golang, panic, recover, 异常处理"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goguide.ryansu.tech/guide/concepts/golang/10-panic-recover.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/en/guide/concepts/golang/10-panic-recover.html"}],["meta",{"property":"og:site_name","content":"Go Guide"}],["meta",{"property":"og:title","content":"Panic & Recover"}],["meta",{"property":"og:description","content":"Panic & Recover | Exception Handling In Golang, panic and recover are two keywords used for exception handling. panic is used to raise an exception, while recover is used to cat..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://goguide.ryansu.tech/assets/image/article/concept/panic-call.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T09:21:57.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-05-04T09:21:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Panic & Recover\\",\\"image\\":[\\"https://goguide.ryansu.tech/assets/image/article/concept/panic-call.png\\"],\\"dateModified\\":\\"2024-05-04T09:21:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"Panic & Recover | Exception Handling In Golang, panic and recover are two keywords used for exception handling. panic is used to raise an exception, while recover is used to cat..."},"headers":[{"level":2,"title":"Panic & Recover | Exception Handling","slug":"panic-recover-exception-handling","link":"#panic-recover-exception-handling","children":[{"level":3,"title":"Panic Data Structure","slug":"panic-data-structure","link":"#panic-data-structure","children":[]},{"level":3,"title":"Execution Flow of Panic","slug":"execution-flow-of-panic","link":"#execution-flow-of-panic","children":[]},{"level":3,"title":"Exception Handling","slug":"exception-handling","link":"#exception-handling","children":[]}]}],"git":{"createdTime":1714814517000,"updatedTime":1714814517000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":1}]},"readingTime":{"minutes":3.55,"words":1066},"filePathRelative":"en/guide/concepts/golang/10-panic-recover.md","localizedDate":"May 4, 2024","autoDesc":true,"excerpt":"<hr>\\n<h2>Panic &amp; Recover | Exception Handling</h2>\\n<p>In Golang, <code>panic</code> and <code>recover</code> are two keywords used for exception handling. <code>panic</code> is used to raise an exception, while <code>recover</code> is used to catch exceptions.</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">Tips</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Function</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>panic(interface{})</code></td>\\n<td>Raises an exception, stops the execution of the current Goroutine, and recursively executes the <code>defer</code> methods within the current Goroutine.</td>\\n</tr>\\n<tr>\\n<td><code>recover() interface{}</code></td>\\n<td>Catches an exception, returns the exception information, and is used to handle exceptions, preventing program crashes due to exceptions. It can only be called within a <code>defer</code> block.</td>\\n</tr>\\n</tbody>\\n</table>\\n</div>"}');export{m as comp,k as data};
