import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as a,d as s}from"./app-xeMo94cu.js";const t={},c=s(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>A <code>channel</code> is a conduit for end-to-end data communication, often used for data sharing between <code>goroutines</code>.</p><h2 id="creating-a-channel" tabindex="-1"><a class="header-anchor" href="#creating-a-channel"><span>Creating a channel</span></a></h2><p>We use <code>make</code> to create a <code>channel</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span> <span class="token comment">// Unbuffered</span>

ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Buffered</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>T</code> is the data type.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><ul><li>An unbuffered channel will be blocked until the data is received</li><li>A buffered channel will be blocked when the sent data reaches the buffer size</li></ul></div><h2 id="sending-and-receiving-data" tabindex="-1"><a class="header-anchor" href="#sending-and-receiving-data"><span>Sending and receiving data</span></a></h2><p>Using <code>&lt;-</code> pointing to the channel means sending data to that channel, such as <code>ch &lt;- 10</code></p><p>Using <code>&lt;-</code> on the left side of the channel means receiving data, such as <code>&lt;-ch</code></p><h2 id="closing-a-channel" tabindex="-1"><a class="header-anchor" href="#closing-a-channel"><span>Closing a channel</span></a></h2><p>Use <code>close()</code> to close a <code>channel</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><ul><li><p>If you send a message to a <code>channel</code> that has already been <code>close()</code>, it will cause a <code>panic</code></p></li><li><p>Reading from a closed <code>channel</code> can get a zero value, if using <code>range</code> to read <code>channel</code>, then <code>close</code> will terminate the loop</p></li></ul><p>We can use <code>val, ok := &lt;- ch</code> to determine whether it is a zero value, if <code>ok</code> is <code>false</code> then the channel is already <code>close</code></p></div><h2 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>Select</span></a></h2><p>We usually use <code>select</code> to receive <code>channel</code> data, you can also use <code>default</code> to set the default action, <code>select</code> can receive multiple <code>channel</code> at the same time, if multiple <code>channel</code> send data at the same time, it will randomly select a <code>channel</code> to complete the operation</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch1<span class="token punctuation">:</span>  <span class="token comment">// Receive ch1 data</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ch1&quot;</span><span class="token punctuation">)</span>  
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch2<span class="token punctuation">:</span> <span class="token comment">// Receive ch2 data</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ch2&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> val <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch3<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ch3<span class="token punctuation">)</span> <span class="token comment">//Receive ch3 data and print</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><p>The timer is implemented through <code>channel</code> to return the timing result</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;finish&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="precautions" tabindex="-1"><a class="header-anchor" href="#precautions"><span>Precautions</span></a></h2><ul><li>When using <code>channel</code>, be aware that there must be a data receiving end to avoid deadlock problems</li></ul>`,22),o=[c];function i(l,p){return a(),e("div",null,o)}const u=n(t,[["render",i],["__file","7-channel.html.vue"]]),h=JSON.parse('{"path":"/en/guide/concepts/golang/7-channel.html","title":"Channel","lang":"en-US","frontmatter":{"order":7,"title":"Channel","icon":"line-md:star-filled","head":[["meta",{"name":"keywords","content":"channel, golang, goroutine, concurrency, create channel, send data, receive data, close channel"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goguide.ryansu.tech/guide/concepts/golang/7-channel.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/en/guide/concepts/golang/7-channel.html"}],["meta",{"property":"og:site_name","content":"Go Guide"}],["meta",{"property":"og:title","content":"Channel"}],["meta",{"property":"og:description","content":"Introduction A channel is a conduit for end-to-end data communication, often used for data sharing between goroutines. Creating a channel We use make to create a channel T is th..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T02:45:37.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-04-28T02:45:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Channel\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-28T02:45:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"Introduction A channel is a conduit for end-to-end data communication, often used for data sharing between goroutines. Creating a channel We use make to create a channel T is th..."},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Creating a channel","slug":"creating-a-channel","link":"#creating-a-channel","children":[]},{"level":2,"title":"Sending and receiving data","slug":"sending-and-receiving-data","link":"#sending-and-receiving-data","children":[]},{"level":2,"title":"Closing a channel","slug":"closing-a-channel","link":"#closing-a-channel","children":[]},{"level":2,"title":"Select","slug":"select","link":"#select","children":[]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Precautions","slug":"precautions","link":"#precautions","children":[]}],"git":{"createdTime":1705721989000,"updatedTime":1714272337000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":3}]},"readingTime":{"minutes":1.12,"words":336},"filePathRelative":"en/guide/concepts/golang/7-channel.md","localizedDate":"January 20, 2024","autoDesc":true,"excerpt":"<h2>Introduction</h2>\\n<p>A <code>channel</code> is a conduit for end-to-end data communication, often used for data sharing between <code>goroutines</code>.</p>\\n<h2>Creating a channel</h2>\\n<p>We use <code>make</code> to create a <code>channel</code></p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code>ch1 <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">chan</span> T<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Unbuffered</span>\\n\\nch2 <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">chan</span> T<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Buffered</span>\\n</code></pre></div>"}');export{u as comp,h as data};
