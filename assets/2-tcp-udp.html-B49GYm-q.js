import{_ as t}from"./tcp-connect-CgdHBsV3.js";import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as d,c as n,b as o}from"./app-CQTJV0kQ.js";const c="/assets/image/article/network/tcp.png",r="/assets/image/article/network/tcp_state.png",a={},i=o('<h3 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp"><span>TCP</span></a></h3><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p><h4 id="tcp-头部结构" tabindex="-1"><a class="header-anchor" href="#tcp-头部结构"><span>TCP 头部结构</span></a></h4><figure><img src="'+c+'" alt="tcp 头部" tabindex="0" loading="lazy"><figcaption>tcp 头部</figcaption></figure><table><thead><tr><th>TCP头部字段</th><th>描述</th></tr></thead><tbody><tr><td>源端口</td><td>发送方的端口号，范围(0~65535)</td></tr><tr><td>目标端口</td><td>接收方的端口号，范围(0~65535)</td></tr><tr><td>序列号</td><td>如果TCP数据过大（大于IP数据包的允许程度），则需要进行分段。这个序列号记录每个数据包的序列号，使接收端可以重新组合TCP数据。序列号字段的值是本报文段发送的数据的第一个字节的序列号。简称为<code>seq</code></td></tr><tr><td>确认号</td><td>为了确认接收端确实收到了发送端发送的数据包数据，当发送端收到这个确认码时，就可以确定之前传递的数据包已经被正确接收。这个确认号是期望收到对方下一个报文段的数据的第一个字节的序列号。简称<code>ack</code></td></tr><tr><td>头部长度</td><td>表示TCP头部的长度，范围(0~15)，单位32位，例如值为5时，表示头部长度是20字节（160位），如果选项字段为空，则TCP头部长度为20字节，即值为5</td></tr><tr><td>URG</td><td><code>URG=1</code>表示存在紧急数据，紧急数据的最后一个字节由紧急数据指针指出，一般使用较少</td></tr><tr><td>ACK</td><td><code>ACK=1</code>表示确认号字段中的值是有效的，为0表示无效</td></tr><tr><td>PSH</td><td><code>URG=1</code>表示紧急指针字段有效，代表该数据包为紧急数据包。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据）</td></tr><tr><td>RST</td><td><code>RSP=1</code>表示重建连接，如果接收到RST位时，通常发生了某些错误</td></tr><tr><td>SYN</td><td><code>SYN=1</code>表示这是一个连接请求或连接接受报文，一般用于握手阶段</td></tr><tr><td>FIN</td><td><code>FIN=1</code>表示此报文段的发送端的数据已发送完毕，并要求释放运输连接</td></tr><tr><td>接收窗口</td><td>用于流量控制，指示接收方愿意接收的字节数量，范围<code>0~65535</code>字节</td></tr><tr><td>校验和</td><td>校验和覆盖了整个TCP报文段，即TCP头部和TCP数据，这是一个强制性的字段，一定是由发送端计算和存储，并由接收端进行验证</td></tr><tr><td>紧急数据指针</td><td>当<code>URG=1</code>时有效，是一个正的偏移量，和序列号中的值相加表示紧急数据最后一个字节的序列号</td></tr><tr><td>选项</td><td>用于发送方和接收方协商最大报文长度（MSS）时（只存在于SYN报文）或在高速网络环境下用作窗口调节因子时使用，还可以存放时间戳数据</td></tr></tbody></table><h4 id="tcp-状态机" tabindex="-1"><a class="header-anchor" href="#tcp-状态机"><span>TCP 状态机</span></a></h4><figure><img src="'+r+'" alt="TCP Stateful" tabindex="0" loading="lazy"><figcaption>TCP Stateful</figcaption></figure><h4 id="tcp-三次握手" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手"><span>TCP 三次握手</span></a></h4><figure><img src="'+t+'" alt="TCP Connection" tabindex="0" loading="lazy"><figcaption>TCP Connection</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">三次握手过程</p><ol><li>客户端发送<code>SYN=1</code>，并指明客户端的初始序列号<code>ISN</code>，即<code>x</code>.</li><li>服务端发送自己的<code>SYN</code>段作为应答，同样指明自己的<code>ISN</code> 即 <code>y</code>。为了确认客户端的<code>SYN</code>，将<code>x+1</code>作为<code>ACK</code>数值。这样，每发送一个<code>SYN</code>，序列号就会加1. 如果有丢失的情况，则会重传。</li><li>为了确认服务器端的<code>SYN</code>，客户端将<code>y+1</code>作为返回的<code>ACK</code>数值。</li></ol></div><div class="hint-container tip"><p class="hint-container-title">TCP 四次挥手</p><ol><li>客户端发送<code>FIN=1</code>，并包含一个自己当前的序列号<code>x+2</code>。 同时还包含一个<code>ACK=y+1</code>表示确认对方最近一次发过来的数据。</li><li>服务端将<code>x+2</code>值加1作为<code>ACK</code>序号值，表明收到了上一个包。这时上层的应用程序会被告知另一端发起了关闭操作，通常这将引起应用程序发起自己的关闭操作。</li><li>服务端发起自己的<code>FIN=1</code>，<code>seq=y+1</code> 。</li><li>客户端确认, 向服务器发送 <code>ACK=y+2</code> 。</li></ol></div><div class="hint-container warning"><p class="hint-container-title">为什么要三次握手？作用是什么？</p><details class="hint-container details"><summary>详情</summary><p>TCP 建立连接的过程就是同步序列号的过程，SYN (Synchronize Sequence Numbers)就是同步序列号。因此，三次握手的目的就是使客户端(Client)和服务端(Service)获取到对方的序列号。</p></details></div><div class="hint-container warning"><p class="hint-container-title">为什么要四次挥手？作用是什么？</p><details class="hint-container details"><summary>详情</summary><p>之所以需要四次挥手，是因为 tcp 是<strong>全双工</strong>协议，即客户端和服务端都可以主动发送消息，因此需要两端分别在传输完成后发送断开连接的指令，需要分别发送 <code>FIN=1</code> 指令断开，通过 <code>ACK</code> 判断是否发送成功。</p></details></div><div class="hint-container caution"><p class="hint-container-title">如果连接时 SYN 超时会发生什么？</p><details class="hint-container details"><summary>详情</summary><p>假如客户端发送 <code>SYN</code> 指令，在服务器返回 <code>SYN</code> 指令之前掉线了，服务器会尝试重发 <code>SYN-ACK</code> 指令，linux 下默认重试 5 次，间隔时间从 1s 开始翻倍增长，即 <code>1s, 2s, 4s, 8s, 16s</code>, 因此超时时间为 <code>1s + 2s + 4s+ 8s+ 16s + 32s = 63s</code>。在超时之后 TCP 才会断开连接。</p></details></div>',14),s=[i];function l(p,h){return d(),n("div",null,s)}const P=e(a,[["render",l],["__file","2-tcp-udp.html.vue"]]),u=JSON.parse('{"path":"/guide/concepts/network/2-tcp-udp.html","title":"TCP/UDP","lang":"zh-CN","frontmatter":{"order":2,"title":"TCP/UDP","description":"TCP 传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。 TCP 头部结构 tcp 头部tcp 头部 TCP 状态机 TCP StatefulTCP Stateful TCP 三次握手 TCP ConnectionTCP Connection 三次握手过程 客户端发...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goguide.ryansu.tech/en/guide/concepts/network/2-tcp-udp.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/guide/concepts/network/2-tcp-udp.html"}],["meta",{"property":"og:site_name","content":"Go 面试宝典"}],["meta",{"property":"og:title","content":"TCP/UDP"}],["meta",{"property":"og:description","content":"TCP 传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。 TCP 头部结构 tcp 头部tcp 头部 TCP 状态机 TCP StatefulTCP Stateful TCP 三次握手 TCP ConnectionTCP Connection 三次握手过程 客户端发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://goguide.ryansu.tech/assets/image/article/network/tcp.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-14T15:36:34.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"TCP/UDP"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-02-14T15:36:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TCP/UDP\\",\\"image\\":[\\"https://goguide.ryansu.tech/assets/image/article/network/tcp.png\\",\\"https://goguide.ryansu.tech/assets/image/article/network/tcp_state.png\\",\\"https://goguide.ryansu.tech/assets/image/article/network/tcp-connect.png\\"],\\"dateModified\\":\\"2024-02-14T15:36:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]]},"headers":[{"level":3,"title":"TCP","slug":"tcp","link":"#tcp","children":[{"level":4,"title":"TCP 头部结构","slug":"tcp-头部结构","link":"#tcp-头部结构","children":[]},{"level":4,"title":"TCP 状态机","slug":"tcp-状态机","link":"#tcp-状态机","children":[]},{"level":4,"title":"TCP 三次握手","slug":"tcp-三次握手","link":"#tcp-三次握手","children":[]}]}],"git":{"createdTime":1707924994000,"updatedTime":1707924994000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":1}]},"readingTime":{"minutes":4.25,"words":1276},"filePathRelative":"guide/concepts/network/2-tcp-udp.md","localizedDate":"2024年2月14日","autoDesc":true,"excerpt":"<h3>TCP</h3>\\n<p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p>\\n<h4>TCP 头部结构</h4>\\n<figure><img src=\\"/assets/image/article/network/tcp.png\\" alt=\\"tcp 头部\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>tcp 头部</figcaption></figure>\\n<table>\\n<thead>\\n<tr>\\n<th>TCP头部字段</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>源端口</td>\\n<td>发送方的端口号，范围(0~65535)</td>\\n</tr>\\n<tr>\\n<td>目标端口</td>\\n<td>接收方的端口号，范围(0~65535)</td>\\n</tr>\\n<tr>\\n<td>序列号</td>\\n<td>如果TCP数据过大（大于IP数据包的允许程度），则需要进行分段。这个序列号记录每个数据包的序列号，使接收端可以重新组合TCP数据。序列号字段的值是本报文段发送的数据的第一个字节的序列号。简称为<code>seq</code></td>\\n</tr>\\n<tr>\\n<td>确认号</td>\\n<td>为了确认接收端确实收到了发送端发送的数据包数据，当发送端收到这个确认码时，就可以确定之前传递的数据包已经被正确接收。这个确认号是期望收到对方下一个报文段的数据的第一个字节的序列号。简称<code>ack</code></td>\\n</tr>\\n<tr>\\n<td>头部长度</td>\\n<td>表示TCP头部的长度，范围(0~15)，单位32位，例如值为5时，表示头部长度是20字节（160位），如果选项字段为空，则TCP头部长度为20字节，即值为5</td>\\n</tr>\\n<tr>\\n<td>URG</td>\\n<td><code>URG=1</code>表示存在紧急数据，紧急数据的最后一个字节由紧急数据指针指出，一般使用较少</td>\\n</tr>\\n<tr>\\n<td>ACK</td>\\n<td><code>ACK=1</code>表示确认号字段中的值是有效的，为0表示无效</td>\\n</tr>\\n<tr>\\n<td>PSH</td>\\n<td><code>URG=1</code>表示紧急指针字段有效，代表该数据包为紧急数据包。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据）</td>\\n</tr>\\n<tr>\\n<td>RST</td>\\n<td><code>RSP=1</code>表示重建连接，如果接收到RST位时，通常发生了某些错误</td>\\n</tr>\\n<tr>\\n<td>SYN</td>\\n<td><code>SYN=1</code>表示这是一个连接请求或连接接受报文，一般用于握手阶段</td>\\n</tr>\\n<tr>\\n<td>FIN</td>\\n<td><code>FIN=1</code>表示此报文段的发送端的数据已发送完毕，并要求释放运输连接</td>\\n</tr>\\n<tr>\\n<td>接收窗口</td>\\n<td>用于流量控制，指示接收方愿意接收的字节数量，范围<code>0~65535</code>字节</td>\\n</tr>\\n<tr>\\n<td>校验和</td>\\n<td>校验和覆盖了整个TCP报文段，即TCP头部和TCP数据，这是一个强制性的字段，一定是由发送端计算和存储，并由接收端进行验证</td>\\n</tr>\\n<tr>\\n<td>紧急数据指针</td>\\n<td>当<code>URG=1</code>时有效，是一个正的偏移量，和序列号中的值相加表示紧急数据最后一个字节的序列号</td>\\n</tr>\\n<tr>\\n<td>选项</td>\\n<td>用于发送方和接收方协商最大报文长度（MSS）时（只存在于SYN报文）或在高速网络环境下用作窗口调节因子时使用，还可以存放时间戳数据</td>\\n</tr>\\n</tbody>\\n</table>"}');export{P as comp,u as data};
