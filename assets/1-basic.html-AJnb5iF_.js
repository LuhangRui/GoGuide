import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,d as e}from"./app-3W6QAj0F.js";const t={},o=e(`<h2 id="_1-保留关键字" tabindex="-1"><a class="header-anchor" href="#_1-保留关键字" aria-hidden="true">#</a> 1. 保留关键字</h2><p>golang 有 25 个保留的关键字，这些关键字不能用作程序标识符。</p><table><thead><tr><th>类型</th><th>关键字</th><th>介绍</th></tr></thead><tbody><tr><td>声明</td><td><code>const</code> <code>func</code> <code>import</code> <code>package</code> <code>type</code> <code>var</code></td><td>这些关键字用于声明代码中的各种元素</td></tr><tr><td>复合类型</td><td><code>chan</code> <code>interface</code> <code>map</code> <code>struct</code></td><td>这些关键字用于声明一些特殊的复合类型</td></tr><tr><td>流程控制</td><td><code>break</code> <code>case</code> <code>continue</code> <code>default</code> <code>else</code> <code>fallthrough</code> <code>for</code> <code>goto</code> <code>if</code> <code>range</code> <code>return</code> <code>select</code> <code>switch</code></td><td>这些关键字用于控制程序运行流程</td></tr><tr><td>功能修饰</td><td><code>defer</code> <code>go</code></td><td>用于修饰特殊的 function</td></tr></tbody></table><h2 id="_2-声明类型关键字" tabindex="-1"><a class="header-anchor" href="#_2-声明类型关键字" aria-hidden="true">#</a> 2. 声明类型关键字</h2><h3 id="_2-1-const" tabindex="-1"><a class="header-anchor" href="#_2-1-const" aria-hidden="true">#</a> 2.1. <strong>const</strong></h3><p><code>const</code> 用于声明常量，常量一经声明就不能被更改，声明常量必须指定初始值。</p><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> identifier T <span class="token operator">=</span> value  <span class="token comment">// T 为数据类型，可以省略，编译器会自己推断。</span>
<span class="token keyword">const</span> identifier1<span class="token punctuation">,</span> identifier2 <span class="token operator">=</span> value1<span class="token punctuation">,</span> value2 <span class="token comment">// 声明多个，如 const a, b, c = &quot;hello&quot;, 100, true</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    FeMale <span class="token operator">=</span> <span class="token number">0</span>
    Male <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">)</span> <span class="token comment">// 枚举</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    a <span class="token operator">=</span> <span class="token boolean">iota</span>
    b
    c
<span class="token punctuation">)</span> <span class="token comment">// iota</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="_2-1-1-func" tabindex="-1"><a class="header-anchor" href="#_2-1-1-func" aria-hidden="true">#</a> 2.1.1. <strong>func</strong></h4><p><code>func</code> 用于声明函数，支持多个返回值，不支持默认参数。</p><details><summary>例子</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// p 为参数， T 为类型</span>
<span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>p T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token keyword">func</span> <span class="token function">Test</span><span class="token punctuation">(</span>p T<span class="token punctuation">)</span> <span class="token punctuation">(</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> Test <span class="token punctuation">(</span>p T<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> T1<span class="token punctuation">,</span> list <span class="token operator">...</span>T3<span class="token punctuation">)</span> <span class="token punctuation">(</span>T4<span class="token punctuation">,</span> T5<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 不定参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="_2-1-2-import" tabindex="-1"><a class="header-anchor" href="#_2-1-2-import" aria-hidden="true">#</a> 2.1.2. <strong>import</strong></h4><p><code>import</code> 用于导入包，使用其公开的标识符。</p><p><code>import</code> 支持单行和多行导入。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;flag&quot;</span> <span class="token comment">// 单个导入</span>

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;flag&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span> <span class="token comment">// 多个导入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以使用 <code>.</code>, <code>_</code> 和别名修饰导入的包。</p><table><thead><tr><th>导入命令</th><th>使用方法</th><th>解析</th></tr></thead><tbody><tr><td><code>import &quot;lib/math&quot;</code></td><td>math.Sin</td><td>普通导入需要使用包名</td></tr><tr><td><code>import m &quot;lib/math&quot;</code></td><td>m.Sin</td><td>可以在导入时设置别名</td></tr><tr><td><code>import . &quot;lib/math&quot; </code></td><td>Sin</td><td>使用 <code>.</code> 导入本地可以直接使用函数，不需要包名</td></tr></tbody></table><p>我们还可以使用 <code>_</code> 来修饰导入的包，这样只会执行导入包的初始化函数 <code>init()</code></p>`,17),c=[o];function d(p,i){return s(),a("div",null,c)}const u=n(t,[["render",d],["__file","1-basic.html.vue"]]);export{u as default};
