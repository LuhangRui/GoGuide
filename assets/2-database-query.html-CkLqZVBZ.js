import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as a,e as n}from"./app-CkDemfCU.js";const t={},l=n(`<h2 id="select-statement" tabindex="-1"><a class="header-anchor" href="#select-statement"><span>SELECT Statement</span></a></h2><p>The SELECT command is mainly used to limit the returned results.</p><h3 id="return-all-fields" tabindex="-1"><a class="header-anchor" href="#return-all-fields"><span>Return All Fields</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="return-specific-fields" tabindex="-1"><a class="header-anchor" href="#return-specific-fields"><span>Return Specific Fields</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> field1<span class="token punctuation">,</span> field2 <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="remove-duplicates" tabindex="-1"><a class="header-anchor" href="#remove-duplicates"><span>Remove Duplicates</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> field <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="order-by-statement" tabindex="-1"><a class="header-anchor" href="#order-by-statement"><span>ORDER BY Statement</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> field_name <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="limit-statement" tabindex="-1"><a class="header-anchor" href="#limit-statement"><span>LIMIT Statement</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">LIMIT</span> <span class="token keyword">start</span><span class="token punctuation">,</span> quantity<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If only quantity is specified, it defaults to start from row 0.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">LIMIT</span> <span class="token number">7</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This represents rows 0-6.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">// mysql</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">;</span>

<span class="token comment">// postgresql</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">LIMIT</span> <span class="token number">6</span> <span class="token keyword">OFFSET</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This represents rows 10-15.</p><h2 id="where-clause" tabindex="-1"><a class="header-anchor" href="#where-clause"><span>WHERE Clause</span></a></h2><p>We use WHERE for data filtering.</p><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td>=</td><td>Equal to</td></tr><tr><td>&lt;&gt;</td><td>Not equal to</td></tr><tr><td>&gt;</td><td>Greater than</td></tr><tr><td>&lt;</td><td>Less than</td></tr><tr><td>&gt;=</td><td>Greater than or equal to</td></tr><tr><td>&lt;=</td><td>Less than or equal to</td></tr><tr><td>BETWEEN</td><td>Within a certain range</td></tr><tr><td>LIKE</td><td>Matches pattern-defined data</td></tr><tr><td>IN</td><td>Specifies multiple possible values</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">// Name is Jack</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Age is greater than 12</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">&gt;</span> <span class="token number">12</span><span class="token punctuation">;</span>

<span class="token comment">// Age is between 12 and 18</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">12</span> <span class="token operator">AND</span> <span class="token number">18</span><span class="token punctuation">;</span>

<span class="token comment">// Name starts with J</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&quot;J%&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Age is 12, 15, or 18</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>LIKE supports two wildcards, <code>%</code> represents any number of characters, <code>_</code> represents any single character.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">// Name starts with J, such as Jack, Jacky, Jim</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&quot;J%&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Single character, such as JA, Jc</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&quot;J_&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="and-or-not" tabindex="-1"><a class="header-anchor" href="#and-or-not"><span>AND, OR, NOT</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">// Age is 12 or 18</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>

<span class="token comment">// Name is Jack and age is 12</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&quot;Jack&quot;</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

<span class="token comment">// Age is not 12</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> <span class="token operator">not</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="group-by-statement" tabindex="-1"><a class="header-anchor" href="#group-by-statement"><span>GROUP BY Statement</span></a></h2><p>GROUP BY is often used with aggregate functions (COUNT, AVG ...) and uses HAVING for additional queries.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">// Query the number of users of the corresponding age, and the number must be greater than 10</span>
<span class="token keyword">SELECT</span> age<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> users <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> age <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exists-statement" tabindex="-1"><a class="header-anchor" href="#exists-statement"><span>EXISTS Statement</span></a></h2><p>EXISTS is mainly used to query whether it meets the data returned by the subquery.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> age <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> age <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="common-aggregate-functions" tabindex="-1"><a class="header-anchor" href="#common-aggregate-functions"><span>Common Aggregate Functions</span></a></h2><table><thead><tr><th>Function</th><th>Description</th><th>Remarks</th></tr></thead><tbody><tr><td><strong>count()</strong></td><td>Count</td><td>Only counts non-empty rows, use <code>count(*)</code> or <code>count(1)</code> to count all rows including empty rows</td></tr><tr><td><strong>sum()</strong></td><td>Sum</td><td>Only counts non-empty rows, True is treated as 1, False is treated as 0</td></tr><tr><td><strong>max()</strong></td><td>Maximum Value</td><td>For time fields, it represents the most recent date</td></tr><tr><td><strong>min()</strong></td><td>Minimum Value</td><td>For time fields, it represents the earliest date</td></tr><tr><td><strong>avg()</strong></td><td>Average</td><td>Only counts non-empty rows</td></tr></tbody></table>`,32),o=[l];function r(p,i){return e(),a("div",null,o)}const u=s(t,[["render",r],["__file","2-database-query.html.vue"]]),m=JSON.parse('{"path":"/en/guide/concepts/database/SQL/2-database-query.html","title":"Query","lang":"en-US","frontmatter":{"order":2,"title":"Query","icon":"line-md:star-filled","head":[["meta",{"name":"keywords","content":"SQL, SELECT, ORDER BY, LIMIT, WHERE"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goguide.ryansu.tech/guide/concepts/database/SQL/2-database-query.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/en/guide/concepts/database/SQL/2-database-query.html"}],["meta",{"property":"og:site_name","content":"Go Guide"}],["meta",{"property":"og:title","content":"Query"}],["meta",{"property":"og:description","content":"SELECT Statement The SELECT command is mainly used to limit the returned results. Return All Fields Return Specific Fields Remove Duplicates ORDER BY Statement LIMIT Statement I..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T13:24:21.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-05-05T13:24:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Query\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T13:24:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"SELECT Statement The SELECT command is mainly used to limit the returned results. Return All Fields Return Specific Fields Remove Duplicates ORDER BY Statement LIMIT Statement I..."},"headers":[{"level":2,"title":"SELECT Statement","slug":"select-statement","link":"#select-statement","children":[{"level":3,"title":"Return All Fields","slug":"return-all-fields","link":"#return-all-fields","children":[]},{"level":3,"title":"Return Specific Fields","slug":"return-specific-fields","link":"#return-specific-fields","children":[]},{"level":3,"title":"Remove Duplicates","slug":"remove-duplicates","link":"#remove-duplicates","children":[]}]},{"level":2,"title":"ORDER BY Statement","slug":"order-by-statement","link":"#order-by-statement","children":[]},{"level":2,"title":"LIMIT Statement","slug":"limit-statement","link":"#limit-statement","children":[]},{"level":2,"title":"WHERE Clause","slug":"where-clause","link":"#where-clause","children":[{"level":3,"title":"AND, OR, NOT","slug":"and-or-not","link":"#and-or-not","children":[]}]},{"level":2,"title":"GROUP BY Statement","slug":"group-by-statement","link":"#group-by-statement","children":[]},{"level":2,"title":"EXISTS Statement","slug":"exists-statement","link":"#exists-statement","children":[]},{"level":2,"title":"Common Aggregate Functions","slug":"common-aggregate-functions","link":"#common-aggregate-functions","children":[]}],"git":{"createdTime":1714045048000,"updatedTime":1714915461000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":5}]},"readingTime":{"minutes":1.62,"words":485},"filePathRelative":"en/guide/concepts/database/SQL/2-database-query.md","localizedDate":"April 25, 2024","autoDesc":true,"excerpt":"<h2>SELECT Statement</h2>\\n<p>The SELECT command is mainly used to limit the returned results.</p>\\n<h3>Return All Fields</h3>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">SELECT</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">FROM</span> table_name<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}');export{u as comp,m as data};
