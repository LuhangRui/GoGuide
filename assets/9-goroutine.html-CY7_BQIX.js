import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-C8dy3SpT.js";const e={},o=t(`<h2 id="goroutine-协程" tabindex="-1"><a class="header-anchor" href="#goroutine-协程"><span>Goroutine | 协程</span></a></h2><p>Goroutine 是 Go 语言的并发编程模型，它是一种轻量级的线程，由 Go 运行时管理，我们也可以称之为协程。</p><div class="hint-container tip"><p class="hint-container-title">优点</p><ul><li><strong>轻量级</strong>：Goroutine 的栈空间初始大小只有 2KB，可以动态扩容，最大可达 1GB</li><li><strong>快速启动</strong>：Goroutine 的启动时间只有 1~2us</li><li><strong>高效调度</strong>：Goroutine 的调度器采用 M:N 模型，可以将 M 个 Goroutine 映射到 N 个 OS 线程上，实现高效调度</li><li><strong>通信简单</strong>：Goroutine 之间通过 Channel 进行通信，实现数据共享</li><li><strong>无锁</strong>：Goroutine 之间通过 Channel 进行通信，无需加锁</li><li><strong>高并发</strong>：Goroutine 可以轻松创建数十万个，实现高并发</li><li><strong>高性能</strong>：Goroutine 的调度器采用抢占式调度，实现高性能</li></ul></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Goroutine 是 Golang 十分重要的特性，也是 Golang 的并发编程的核心，掌握 Goroutine 的使用和原理对于 Golang 的学习至关重要。对于编写高性能的并发程序，Goroutine 是一个非常好的选择。</p></div><h3 id="创建-goroutine" tabindex="-1"><a class="header-anchor" href="#创建-goroutine"><span>创建 Goroutine</span></a></h3><p>由于 Goroutine 是 Golang 非常重视的基本功能，因此在 Golang 中创建异步 Goroutine 非常简单，只需要在函数调用前加上 <code>go</code> 关键字即可，比绝大部分的编程语言都要简单。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;running...&quot;</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>go</code> 加上任意 <code>func</code> 即可创建一个 Goroutine，Goroutine 会在后台执行，不会阻塞主线程。</p><div class="hint-container tip"><p class="hint-container-title">如何停止 Goroutine</p><ul><li><strong>运行结束</strong>：Goroutine 会在函数运行结束后自动结束</li><li><strong>超时结束</strong>：通过 <code>context.WithTimeout()</code> 或 <code>context.WithDeadline()</code> 可以设置 Goroutine 的超时时间</li><li><strong>手动结束</strong>：通过 <code>context.WithCancel()</code> 可以手动结束 Goroutine</li><li><strong>通道结束</strong>：通过 Channel 通信，可以结束 Goroutine</li></ul></div><h3 id="goroutine-和-channel" tabindex="-1"><a class="header-anchor" href="#goroutine-和-channel"><span>Goroutine 和 Channel</span></a></h3><p>我们知道，无论是在线程还是协程，在运行的时候都会遇到贡献数据或传递数据的情况，在 Golang 中，我们可以通过 Channel 来实现 Goroutine 之间的通信。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>

    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">{</span>
            <span class="token keyword">select</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;running...&quot;</span><span class="token punctuation">)</span>
                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    ch <span class="token operator">&lt;-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们创建了一个 Channel <code>ch</code>，在主线程中向 <code>ch</code> 中发送了一个数据，Goroutine 中通过 <code>select</code> 语句监听 <code>ch</code>，当 <code>ch</code> 中有数据时，Goroutine 会退出。</p><p>协程之间通过 Channel 通信的例子：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>

    <span class="token keyword">go</span> <span class="token function">sendData</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">getData</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>  

    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">sendData</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ch <span class="token operator">&lt;-</span> <span class="token string">&quot;BiliBili&quot;</span>
    ch <span class="token operator">&lt;-</span> <span class="token string">&quot;Youtube&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getData</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> input <span class="token builtin">string</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        input <span class="token operator">=</span> <span class="token operator">&lt;-</span>ch
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s &quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结果: BiliBili Youtube</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),i=[o];function p(c,l){return s(),a("div",null,i)}const d=n(e,[["render",p],["__file","9-goroutine.html.vue"]]),k=JSON.parse('{"path":"/guide/concepts/golang/9-goroutine.html","title":"Goroutine","lang":"zh-CN","frontmatter":{"order":9,"title":"Goroutine","icon":"line-md:star-filled","head":[["meta",{"name":"keywords","content":"golang, goroutine, 协程, 并发编程, 并发模型"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://goguide.ryansu.tech/en/guide/concepts/golang/9-goroutine.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/guide/concepts/golang/9-goroutine.html"}],["meta",{"property":"og:site_name","content":"Go 面试宝典"}],["meta",{"property":"og:title","content":"Goroutine"}],["meta",{"property":"og:description","content":"Goroutine | 协程 Goroutine 是 Go 语言的并发编程模型，它是一种轻量级的线程，由 Go 运行时管理，我们也可以称之为协程。 优点 轻量级：Goroutine 的栈空间初始大小只有 2KB，可以动态扩容，最大可达 1GB 快速启动：Goroutine 的启动时间只有 1~2us 高效调度：Goroutine 的调度器采用 M:N ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-28T04:51:47.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-04-28T04:51:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Goroutine\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-28T04:51:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"Goroutine | 协程 Goroutine 是 Go 语言的并发编程模型，它是一种轻量级的线程，由 Go 运行时管理，我们也可以称之为协程。 优点 轻量级：Goroutine 的栈空间初始大小只有 2KB，可以动态扩容，最大可达 1GB 快速启动：Goroutine 的启动时间只有 1~2us 高效调度：Goroutine 的调度器采用 M:N ..."},"headers":[{"level":2,"title":"Goroutine | 协程","slug":"goroutine-协程","link":"#goroutine-协程","children":[{"level":3,"title":"创建 Goroutine","slug":"创建-goroutine","link":"#创建-goroutine","children":[]},{"level":3,"title":"Goroutine 和 Channel","slug":"goroutine-和-channel","link":"#goroutine-和-channel","children":[]}]}],"git":{"createdTime":1714279907000,"updatedTime":1714279907000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":1}]},"readingTime":{"minutes":2.22,"words":666},"filePathRelative":"guide/concepts/golang/9-goroutine.md","localizedDate":"2024年4月28日","autoDesc":true,"excerpt":"<h2>Goroutine | 协程</h2>\\n<p>Goroutine 是 Go 语言的并发编程模型，它是一种轻量级的线程，由 Go 运行时管理，我们也可以称之为协程。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">优点</p>\\n<ul>\\n<li><strong>轻量级</strong>：Goroutine 的栈空间初始大小只有 2KB，可以动态扩容，最大可达 1GB</li>\\n<li><strong>快速启动</strong>：Goroutine 的启动时间只有 1~2us</li>\\n<li><strong>高效调度</strong>：Goroutine 的调度器采用 M:N 模型，可以将 M 个 Goroutine 映射到 N 个 OS 线程上，实现高效调度</li>\\n<li><strong>通信简单</strong>：Goroutine 之间通过 Channel 进行通信，实现数据共享</li>\\n<li><strong>无锁</strong>：Goroutine 之间通过 Channel 进行通信，无需加锁</li>\\n<li><strong>高并发</strong>：Goroutine 可以轻松创建数十万个，实现高并发</li>\\n<li><strong>高性能</strong>：Goroutine 的调度器采用抢占式调度，实现高性能</li>\\n</ul>\\n</div>"}');export{d as comp,k as data};
