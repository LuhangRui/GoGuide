import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-5vvbqJKh.js";const t={},o=e(`<h2 id="mutex" tabindex="-1"><a class="header-anchor" href="#mutex"><span>Mutex</span></a></h2><p>A mutex (short for &quot;mutual exclusion&quot;) is a fundamental type of lock that ensures that only one goroutine can access a shared resource at any given time. In Go, mutexes are provided by the <code>sync</code> package, and they are represented using the <code>sync.Mutex</code> structure.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Initialize a mutex</span>
mu <span class="token operator">:=</span> sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Lock the mutex</span>
mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Unlock the mutex</span>
mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Example</summary><p>Since maps do not inherently support concurrent read and write operations, we can use a mutex to achieve concurrent access.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// SafeMap can be used safely in concurrent scenarios.</span>
<span class="token keyword">type</span> SafeMap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	mu sync<span class="token punctuation">.</span>Mutex
	v  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">// Increase increments the counter for the given key.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SafeMap<span class="token punctuation">)</span> <span class="token function">Increase</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// Lock to ensure that only one Goroutine can access the map s.v at a time.</span>
	s<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Value returns the current value of the counter for the given key.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SafeMap<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// Lock to ensure that only one Goroutine can access the map s.v at a time.</span>
	<span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> SafeMap<span class="token punctuation">{</span>v<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> s<span class="token punctuation">.</span><span class="token function">Increase</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Output</span>
<span class="token comment">// 1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container warning"><p class="hint-container-title">Warning</p><ul><li>If you call <code>Lock()</code> twice consecutively, the second call will block, resulting in a deadlock and causing an exception.</li><li>If you call <code>Unlock()</code> without a preceding <code>Lock()</code>, it will trigger a panic and lead to an abnormal exit.</li><li><strong>Mutexes have significant performance overhead because each lock and unlock operation involves a system kernel call. For scenarios with high performance requirements, consider using read-write locks.</strong></li></ul></div><h2 id="read-write-lock-rwmutex" tabindex="-1"><a class="header-anchor" href="#read-write-lock-rwmutex"><span>Read-Write Lock (RWMutex)</span></a></h2><p>A read-write lock is a special type of lock that is divided into read locks and write locks. Multiple goroutines can hold read locks simultaneously, but only one goroutine can hold a write lock at a time. In Go, read-write locks are provided by the <code>sync</code> package, and they are represented using the <code>sync.RWMutex</code> structure.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Initialize a read-write lock</span>
rw <span class="token operator">:=</span> sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Read lock</span>
rw<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Read unlock</span>
rw<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Write lock</span>
rw<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Write unlock</span>
rw<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Reader-Writer Problem</p><ul><li><strong>Readers-Preference</strong><ul><li>Readers-preference means that read operations take precedence over write operations. When there are read operations, write operations are blocked, but read operations are not. Only when all readers release their read locks can write operations proceed.</li></ul></li><li><strong>Writers-Preference</strong><ul><li>Writers-preference means that write operations take precedence over read operations. When there is a write operation, existing readers can continue reading, but new readers are not allowed to start reading. After the current readers complete their read operations, the writer performs the write operation. Only after the writer completes the write operation can new readers start reading.</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">Warning</p><ul><li>Readers-preference can lead to <strong>write starvation</strong> in systems with frequent reads.</li><li>Writers-preference can lead to <strong>read starvation</strong> in systems with frequent writes.</li><li><strong>In Golang, <code>sync.RWMutex</code> follows writers-preference, prioritizing write operations.</strong></li></ul></div></div><details class="hint-container details"><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	lock <span class="token operator">:=</span> sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">go</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Read</span><span class="token punctuation">(</span>lock <span class="token operator">*</span>sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	lock<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Read lock at&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Read at &quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Read unlock at&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Write</span><span class="token punctuation">(</span>lock <span class="token operator">*</span>sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Write lock at&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Write at &quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Write unlock at&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token comment">// Result</span>
<span class="token comment">// Read lock at 2024-05-05 09:27:15.045784 +0800 CST m=+0.001017301</span>
<span class="token comment">// Read at  2024-05-05 09:27:16.0654976 +0800 CST m=+1.020730901</span>
<span class="token comment">// Read unlock at 2024-05-05 09:27:16.0654976 +0800 CST m=+1.020730901</span>
<span class="token comment">// Write lock at 2024-05-05 09:27:16.0654976 +0800 CST m=+1.020730901</span>
<span class="token comment">// Write at  2024-05-05 09:27:17.0774968 +0800 CST m=+2.032730101</span>
<span class="token comment">// Write unlock at 2024-05-05 09:27:17.0774968 +0800 CST m=+2.032730101</span>
<span class="token comment">// Read lock at 2024-05-05 09:27:17.0774968 +0800 CST m=+2.032730101</span>
<span class="token comment">// Read lock at 2024-05-05 09:27:17.0777343 +0800 CST m=+2.032967601</span>
<span class="token comment">// Read lock at 2024-05-05 09:27:17.0777343 +0800 CST m=+2.032967601</span>
<span class="token comment">// Read lock at 2024-05-05 09:27:17.0777343 +0800 CST m=+2.032967601</span>
<span class="token comment">// Read at  2024-05-05 09:27:18.0778894 +0800 CST m=+3.033122701</span>
<span class="token comment">// Read unlock at 2024-05-05 09:27:18.0778894 +0800 CST m=+3.033122701</span>
<span class="token comment">// Read at  2024-05-05 09:27:18.0778894 +0800 CST m=+3.033122701</span>
<span class="token comment">// Read unlock at 2024-05-05 09:27:18.0778894 +0800 CST m=+3.033122701</span>
<span class="token comment">// Read at  2024-05-05 09:27:18.0778894 +0800 CST m=+3.033122701</span>
<span class="token comment">// Read unlock at 2024-05-05 09:27:18.0778894 +0800 CST m=+3.033122701</span>
<span class="token comment">// Read at  2024-05-05 09:27:18.0778894 +0800 CST m=+3.033122701</span>
<span class="token comment">// Read unlock at 2024-05-05 09:27:18.0778894 +0800 CST m=+3.033122701</span>
<span class="token comment">// Write lock at 2024-05-05 09:27:18.0778894 +0800 CST m=+3.033122701</span>
<span class="token comment">// Write at  2024-05-05 09:27:19.087953 +0800 CST m=+4.043186301</span>
<span class="token comment">// Write unlock at 2024-05-05 09:27:19.087953 +0800 CST m=+4.043186301</span>
<span class="token comment">// Write lock at 2024-05-05 09:27:19.087953 +0800 CST m=+4.043186301</span>
<span class="token comment">// Write at  2024-05-05 09:27:20.0995559 +0800 CST m=+5.054789201</span>
<span class="token comment">// Write unlock at 2024-05-05 09:27:20.0995559 +0800 CST m=+5.054789201</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The example demonstrates the writers-preference behavior. The first <code>Read</code> operation is followed by the third <code>Write</code> operation, even though the second <code>Read</code> operation occurs before the second <code>Write</code>. This is because the second <code>Read</code> acquires a read lock with an ongoing write lock, which prioritizes the write lock. Additionally, note that multiple <code>Read</code> operations can execute concurrently, but only one <code>Write</code> operation can execute at a time.</p></details><div class="hint-container warning"><p class="hint-container-title">Considerations for Using RWLock</p><ul><li><code>Lock</code> and <code>Unlock</code>, <code>RLock()</code> and <code>RUnlock()</code> must be paired to avoid deadlocks.</li><li>Calling <code>Lock</code> twice consecutively will result in a deadlock.</li><li>When passing parameters to an <code>RWLock</code>, use pointers rather than value copies.</li><li><code>RWLock</code> is not reentrant.</li></ul></div>`,11),c=[o];function p(i,l){return s(),a("div",null,c)}const d=n(t,[["render",p],["__file","22-lock.html.vue"]]),k=JSON.parse('{"path":"/en/guide/concepts/golang/22-lock.html","title":"Lock","lang":"en-US","frontmatter":{"order":22,"title":"Lock","icon":"line-md:sunny-filled-loop-to-moon-filled-loop-transition","head":[["meta",{"name":"keywords","content":"Go, Golang, Lock, sync, mutex, read-write lock"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goguide.ryansu.tech/guide/concepts/golang/22-lock.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/en/guide/concepts/golang/22-lock.html"}],["meta",{"property":"og:site_name","content":"Go Guide"}],["meta",{"property":"og:title","content":"Lock"}],["meta",{"property":"og:description","content":"Mutex A mutex (short for \\"mutual exclusion\\") is a fundamental type of lock that ensures that only one goroutine can access a shared resource at any given time. In Go, mutexes ar..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T12:51:23.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-05-05T12:51:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lock\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T12:51:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"Mutex A mutex (short for \\"mutual exclusion\\") is a fundamental type of lock that ensures that only one goroutine can access a shared resource at any given time. In Go, mutexes ar..."},"headers":[{"level":2,"title":"Mutex","slug":"mutex","link":"#mutex","children":[]},{"level":2,"title":"Read-Write Lock (RWMutex)","slug":"read-write-lock-rwmutex","link":"#read-write-lock-rwmutex","children":[]}],"git":{"createdTime":1714876573000,"updatedTime":1714913483000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":3}]},"readingTime":{"minutes":3.51,"words":1054},"filePathRelative":"en/guide/concepts/golang/22-lock.md","localizedDate":"May 5, 2024","autoDesc":true,"excerpt":"<h2>Mutex</h2>\\n<p>A mutex (short for \\"mutual exclusion\\") is a fundamental type of lock that ensures that only one goroutine can access a shared resource at any given time. In Go, mutexes are provided by the <code>sync</code> package, and they are represented using the <code>sync.Mutex</code> structure.</p>"}');export{d as comp,k as data};
