import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-CTRYlQwU.js";const t={},p=e(`<h2 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h2><h3 id="什么是指针和指针变量" tabindex="-1"><a class="header-anchor" href="#什么是指针和指针变量"><span>什么是指针和指针变量?</span></a></h3><details class="hint-container details"><summary>答案</summary><p>普通变量存储数据，而指针变量存储的是数据的地址。</p><ul><li>学习指针，主要有两个运算符号<code>&amp;</code>和<code>*</code>。 <ol><li><code>&amp;</code>：地址运算符，从变量中取地址</li><li><code>*</code>：引用运算符，取地址中数据</li></ol></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>num <span class="token operator">:=</span> <span class="token number">99</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">//输出: 99</span>

ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>num
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token comment">//输出: 例如：0xc000086020</span>

tamp <span class="token operator">:=</span> <span class="token operator">*</span>ptr
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>tamp<span class="token punctuation">)</span> <span class="token comment">//输出: 99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="为什么使用指针" tabindex="-1"><a class="header-anchor" href="#为什么使用指针"><span>为什么使用指针？</span></a></h3><details class="hint-container details"><summary>答案</summary><p><strong>意义一：容易编码</strong></p><p>指针在数据结构中起着重要的作用。通过指针，我们可以创建复杂的数据结构，如链表、树和图。指针可在数据结构中轻松地访问和操作节点之间的关系，从而实现高效的数据存储和检索。</p><p>指针可在函数之间传递数据的引用，而不是复制整个数据。这样可以节省内存空间，并提高程序的执行效率。通过传递指针，函数可以直接修改原始数据，而不需要返回值。</p><p><strong>意义二：节省内存</strong></p><p>指针可直接访问和修改内存中的数据，通过指针，我们可以在运行时动态地分配内存，以满足程序的需求，并在不需要时释放内存，避免内存泄漏。</p><p>指针可在程序运行时动态地分配内存。通过动态内存分配，我们可以根据需要分配和释放内存，从而提高程序的灵活性和效率。</p></details><h3 id="哪些对象可以获取地址-哪些不行" tabindex="-1"><a class="header-anchor" href="#哪些对象可以获取地址-哪些不行"><span>哪些对象可以获取地址，哪些不行？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>可以使用 <code>&amp;</code> 获取内存地址的对象：</p><ul><li>变量</li><li>指针</li><li>数组，切片及其内部数据</li><li>结构体指针</li><li>Map</li></ul><p>不能寻址的对象:</p><ul><li>结构体</li><li>常量</li><li>字面量</li><li>函数</li><li>map 非指针元素</li><li>数组字面量</li></ul></details><h2 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量"><span>字面量</span></a></h2><h3 id="字面量是什么意思" tabindex="-1"><a class="header-anchor" href="#字面量是什么意思"><span>字面量是什么意思？</span></a></h3><details class="hint-container details"><summary>答案</summary><ul><li>下面这些基本类型赋值的文本，就是基本类型字面量。</li></ul><table><thead><tr><th>基本类型</th><th>集合</th></tr></thead><tbody><tr><td>布尔类型</td><td><code>bool</code></td></tr><tr><td>字符串类</td><td><code>string</code></td></tr><tr><td>复数类型</td><td><code>complex64</code> <code>complex128</code></td></tr><tr><td>浮点类型</td><td><code>float32</code> <code>float64</code></td></tr><tr><td>整数类型</td><td><code>int8</code> <code>uint8</code> <code>int16</code> <code>uint16</code> <code>int32</code> <code>uint32</code> <code>int64</code> <code>uint64</code> <code>int</code> <code>uint</code> <code>uintptr</code></td></tr></tbody></table><p>如</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token string">&quot;hello world&quot;</span> <span class="token comment">// &quot;hello world&quot; 就是字面量</span>
n <span class="token operator">:=</span> <span class="token number">10</span> <span class="token comment">// 10 就是字面量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>未命名常量是一种特殊的常量，它没有具体的名称。这种常量只有值，没有与之关联的变量名。 如下字符串都是字符串字面量，就是 <strong>未命名常量</strong>。</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&quot;hello，world&quot;   &quot;123&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="什么是有类型常量和无类型常量" tabindex="-1"><a class="header-anchor" href="#什么是有类型常量和无类型常量"><span>什么是有类型常量和无类型常量？</span></a></h3><details class="hint-container details"><summary>答案</summary><ul><li>Golang 中，常量分为有类型常量和无类型常量。</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 无类型常量</span>
<span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token number">8</span>

<span class="token comment">// 有类型常量</span>
<span class="token keyword">const</span> colour <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当无类型的常量被赋值给一个变量的时，无类型的常量会转化成对应的类型</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token number">8</span>

	<span class="token keyword">var</span> t <span class="token builtin">int16</span> <span class="token operator">=</span> A
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T &quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token comment">//输出： int16 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>或者进行显式的转换</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> A <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">8</span>

	<span class="token keyword">var</span> t <span class="token builtin">int16</span> <span class="token operator">=</span> <span class="token function">int16</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> 
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T &quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>  <span class="token comment">//输出： int16</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>而有类型常量在赋值的时，类型不同会报错</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> A <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">8</span>

	<span class="token keyword">var</span> t <span class="token builtin">int16</span> <span class="token operator">=</span> A 
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;type: %T \\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> 
<span class="token comment">//出错： cannot use A (type int8) as type int16 in assignment</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="不同字面量可能同值吗" tabindex="-1"><a class="header-anchor" href="#不同字面量可能同值吗"><span>不同字面量可能同值吗？</span></a></h3><details class="hint-container details"><summary>答案</summary><ul><li>一个值可存在多种字面量表示，如下十进制的数值 21，可由三种字面量表示</li></ul><table><thead><tr><th>10进制</th><th>8进制</th><th>2进制</th><th>16进制</th></tr></thead><tbody><tr><td>21</td><td>0o25</td><td>0b0001 0101</td><td>0x15</td></tr></tbody></table><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0o25</span><span class="token punctuation">)</span>     
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0x15</span> <span class="token punctuation">)</span>    
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0b0001</span> <span class="token number">0101</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token comment">// 由运行结果得出他们相等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="字面量和变量的区别是什么" tabindex="-1"><a class="header-anchor" href="#字面量和变量的区别是什么"><span>字面量和变量的区别是什么？</span></a></h3><details class="hint-container details"><summary>答案</summary><ul><li><p>字面量，就是未命名的常量，跟常量一样，是不可寻址的。</p></li><li><p>举例如下</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;fast&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> cannot take the address of <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>若不用变量名承接，函数返回的一个字符串的文本值，也就是字符串字面量， 而这种字面量是不可寻址的，会出现错误。要用 <code>&amp;</code> 寻址，须用变量名承接。</p></li><li><p>而下面这样就没错</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;fast&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="什么是组合字面量" tabindex="-1"><a class="header-anchor" href="#什么是组合字面量"><span>什么是组合字面量？</span></a></h3><details class="hint-container details"><summary>答案</summary><ul><li><p>组合字面量就是把对象的定义和初始化放在了一起，进一步说，组合字面量是为结构体、数组、切片和map构造值，并且每次都会创建新值。它们由字面量的类型后紧跟大括号及元素列表。每个元素前面可以选择性的带一个相关key。</p></li><li><p>使用组合字面量会简单一些，而结构体、数组、切片和map的组合字面量方式如下。</p></li><li><p>结构体用组合字面量方式来定义和初始化</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> man <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	nationality <span class="token builtin">string</span>
	height <span class="token builtin">int</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 声明和属性赋值</span>
	su <span class="token operator">:=</span> man<span class="token punctuation">{</span>
		nationality<span class="token punctuation">:</span>   <span class="token string">&quot;China&quot;</span><span class="token punctuation">,</span>
		height<span class="token punctuation">:</span>    <span class="token number">180</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结构体用繁琐的常规方式如下</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> man <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	nationality <span class="token builtin">string</span>
	height <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 声明对象</span>
	<span class="token keyword">var</span> su man
	<span class="token comment">// 属性赋值</span>
	su<span class="token punctuation">.</span>nationality <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span>
	su<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">180</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>map用组合字面量方式的定义和初始化如下</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token string">&quot;math&quot;</span><span class="token punctuation">:</span> <span class="token number">96</span><span class="token punctuation">,</span>
	<span class="token string">&quot;Chinese&quot;</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同样的，数组用组合字面量方式的定义和初始化可以如下</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>colours <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;black&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;white&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>切片的组合字面量方式如下</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">}</span> 
<span class="token comment">//会自动补上切片的容量和长度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="go-中的-rune-和-byte-有什么区别" tabindex="-1"><a class="header-anchor" href="#go-中的-rune-和-byte-有什么区别"><span>Go 中的 <code>rune</code> 和 <code>byte</code> 有什么区别？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>在 Go 语言中，<code>byte</code> 和 <code>rune</code> 都是用于表示字符的类型，但它们之间有一些区别：</p><h4 id="类型不同" tabindex="-1"><a class="header-anchor" href="#类型不同"><span>类型不同：</span></a></h4><ul><li><code>byte</code> ：字节，是 <code>uint8</code> 的别名类型</li><li><code>rune</code> ：字符，是 <code>int32</code> 的别名类型</li></ul><h4 id="存储的字符不同" tabindex="-1"><a class="header-anchor" href="#存储的字符不同"><span>存储的字符不同：</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//byte 用于表示 ASCII 码字符，只能存储 0-255 范围内的字符。</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;Y&#39;</span>  <span class="token comment">// ASCII 码字符</span>

<span class="token comment">//rune 用于表示 Unicode 字符，可以存储任意 Unicode 字符。</span>
<span class="token keyword">var</span> b <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;酥&#39;</span>  <span class="token comment">// Unicode 字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="占用的字节大小不同-byte-占用1个字节-rune-占用4个字节。" tabindex="-1"><a class="header-anchor" href="#占用的字节大小不同-byte-占用1个字节-rune-占用4个字节。"><span>占用的字节大小不同：byte 占用1个字节，rune 占用4个字节。</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;unsafe&quot;</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;Y&#39;</span>
<span class="token keyword">var</span> b <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;酥&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;a 占用 %d 个字节数\\nb 占用 %d 个字节数&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出: a 占用 1 个字节数 b 占用 4 个字节数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="表示的字符范围不同" tabindex="-1"><a class="header-anchor" href="#表示的字符范围不同"><span>表示的字符范围不同：</span></a></h4><p>由于 byte 类型能表示的值是有限的，只有 2^8=256 个。所以想表示中文只能使用 rune 类型。</p></details><h3 id="golang中的深拷贝和浅拷贝是什么" tabindex="-1"><a class="header-anchor" href="#golang中的深拷贝和浅拷贝是什么"><span>Golang中的深拷贝和浅拷贝是什么？</span></a></h3><details class="hint-container details"><summary>答案</summary><ul><li>什么是拷贝？</li></ul><p>拷贝最简单的一种形式如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token number">648</span>
b <span class="token operator">:=</span> a    <span class="token comment">//把a 拷贝给 b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>那什么是深拷贝和浅拷贝？</li></ul><p>深浅拷贝也和类型有关</p><table><thead><tr><th>类型</th><th>详情</th></tr></thead><tbody><tr><td>引用类型</td><td><code>Slice</code> <code>Map</code> <code>Channels</code> <code>Interfaces</code> <code>Functions</code></td></tr><tr><td>值类型</td><td><code>String</code> <code>Array</code> <code>Int</code> <code>Struct</code> <code>Float</code> <code>Bool</code></td></tr></tbody></table><p>两种类型拷贝效果不同，先说我们比较熟悉的值类型。如什么是拷贝提问里易知， 若是值类型的话，在每一次拷贝后都会新申请一块空间存储值，拷贝后的两个值类型独立不影响。</p><ul><li>以引用类型的切片(Slice)为例来讲讲深拷贝和浅拷贝</li></ul><table><thead><tr><th>类型</th><th>例子</th></tr></thead><tbody><tr><td>深度拷贝</td><td>copy(slice1, slice2)</td></tr><tr><td>浅拷贝</td><td>slice1 = slice2</td></tr></tbody></table><p><code>浅拷贝</code>仅改变指针的指向，如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> slice1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>     
	<span class="token keyword">var</span> slice2 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">//切片初始化</span>
	slice2 <span class="token operator">=</span> slice1    <span class="token comment">//浅拷贝改变了slice2的指向</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span> 
	slice2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">648</span>  <span class="token comment">// 改变slice2[0]，slice1[0]也改变</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span> 
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">648</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">648</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>所以对于切片来说，<code>浅拷贝</code>改变了它的地址。</p></li><li><p>而<code>深拷贝</code>会改变地址的内存内的数组值，如下</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> slice1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>     
	<span class="token keyword">var</span> slice2 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//切片初始化</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>slice2<span class="token punctuation">,</span> slice1<span class="token punctuation">)</span>  <span class="token comment">//深拷贝会改变地址的内存内的数组值</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span> 
	slice2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">648</span>  <span class="token comment">// 改变slice2[0]，slice1[0]不变</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span> 
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">648</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="make-和-new-有什么区别" tabindex="-1"><a class="header-anchor" href="#make-和-new-有什么区别"><span><code>make</code> 和 <code>new</code> 有什么区别？</span></a></h3><details class="hint-container details"><summary>答案</summary><p><code>new</code> 用于给任意的类型分配内存地址，并返回该类型的指针，且初始化值为零值。</p><blockquote><p><code>new</code> 并不是很常用</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
	n <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 0xc00008a030</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token comment">// &quot;&quot;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 0xc00000a0d8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>make</code> 主要用于 <code>slices</code> <code>map</code> <code>channel</code> 初始化</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// map[]</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="数组和切片有什么区别" tabindex="-1"><a class="header-anchor" href="#数组和切片有什么区别"><span>数组和切片有什么区别？</span></a></h3><details class="hint-container details"><summary>答案</summary><ul><li>数组的长度是固定的，在创建的时候就已经确定，且不可改变。切片的长度是动态的，会根据添加的数据自动扩容。</li><li>在函数参数传递时数据是值传递，切片是引用传递</li><li>切片有容量 （capacity） 参数，数组没有</li></ul></details><h3 id="如果-for-range-同时添加数据-for-range-会无限执行吗" tabindex="-1"><a class="header-anchor" href="#如果-for-range-同时添加数据-for-range-会无限执行吗"><span>如果 <code>for range</code> 同时添加数据， <code>for range</code> 会无限执行吗？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>不会，在执行 <code>for range</code> 的时候实际遍历的是变量的副本，所以改变遍历的变量是不会有影响的</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>

	<span class="token keyword">for</span>  <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> n <span class="token punctuation">{</span>
		n <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 结果： [1 2 3 1 2 3]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="多个-defer-的执行顺序是什么" tabindex="-1"><a class="header-anchor" href="#多个-defer-的执行顺序是什么"><span>多个 defer 的执行顺序是什么？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>执行的顺序类似堆栈，先进后出</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结果：</span>
<span class="token comment">// 3</span>
<span class="token comment">// 2</span>
<span class="token comment">// 1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="什么是数据溢出" tabindex="-1"><a class="header-anchor" href="#什么是数据溢出"><span>什么是数据溢出？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>在使用数字类型时如果数据达到最大值，则接下来的数据将会溢出，如 <code>uint</code> 溢出后会从 0 开始， <code>int</code> 溢出后会变为负数。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;math&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> n <span class="token builtin">int8</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>MaxInt8
	<span class="token keyword">var</span> m <span class="token builtin">uint8</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>MaxUint8

	n <span class="token operator">+=</span> <span class="token number">2</span>
	m <span class="token operator">+=</span> <span class="token number">1</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// -127</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何避免？</p><ul><li>正数优先使用 uint, 范围更大</li><li>添加判断代码判断是否溢出</li></ul></details><h3 id="函数参数使用值还是指针" tabindex="-1"><a class="header-anchor" href="#函数参数使用值还是指针"><span>函数参数使用值还是指针？</span></a></h3><details class="hint-container details"><summary>答案</summary><ul><li>值传递</li></ul><p>一般来说，对于常见的类型都可以使用值传递，值传递的优点是函数内对值的修改不会影响原始的变量，也不会出现并发问题。缺点是值传递会复制一份对应变量的副本，对内存占用会多一些，如果传入的结构体非常大，使用值传递就不太合适。</p><ul><li>指针和引用传递</li></ul><p>使用指针传递的好处是直接传递变量的地址，不需要额外的空间，缺点是并发操作时数据修改会影响到原始的数据。传入切片实际上就是传递切片的指针，避免重复拷贝，若传入数组则是值传递，会拷贝一份。</p></details><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><h3 id="未初始化的-map-可以读取-key-吗" tabindex="-1"><a class="header-anchor" href="#未初始化的-map-可以读取-key-吗"><span>未初始化的 Map 可以读取 key 吗？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>可以的，未执行 <code>make</code> 初始化的 <code>map</code> 读取任何 <code>key</code> 都会返回当前类型的空值</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结果：</span>
<span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="如果对未初始化的-map-赋值会怎么样" tabindex="-1"><a class="header-anchor" href="#如果对未初始化的-map-赋值会怎么样"><span>如果对未初始化的 Map 赋值会怎么样？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>会触发 <code>panic</code> 异常错误</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结果：</span>
<span class="token comment">// panic: assignment to entry in nil map</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="如果对未初始化的-map-进行删除-key-的操作会发生什么" tabindex="-1"><a class="header-anchor" href="#如果对未初始化的-map-进行删除-key-的操作会发生什么"><span>如果对未初始化的 Map 进行删除 key 的操作会发生什么？</span></a></h3><details class="hint-container details"><summary>答案</summary><p>早期如果对未初始化的 <code>map</code> 进行 <code>delete</code> 操作会报 <code>panic</code> 错误， 现在的版本对于未初始化的 <code>map</code> 进行 <code>delete</code> 是不会报错的。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结果：</span>
<span class="token comment">// </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,42),i=[p];function l(o,c){return s(),a("div",null,i)}const r=n(t,[["render",l],["__file","1-basic.html.vue"]]),k=JSON.parse('{"path":"/guide/interview/golang/basic/1-basic.html","title":"基础","lang":"zh-CN","frontmatter":{"order":1,"title":"基础","description":"指针 什么是指针和指针变量? 答案 普通变量存储数据，而指针变量存储的是数据的地址。 学习指针，主要有两个运算符号&和*。 &：地址运算符，从变量中取地址 *：引用运算符，取地址中数据 为什么使用指针？ 答案 意义一：容易编码 指针在数据结构中起着重要的作用。通过指针，我们可以创建复杂的数据结构，如链表、树和图。指针可在数据结构中轻松地访问和操作节点之...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goguide.ryansu.tech/en/guide/interview/golang/basic/1-basic.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/guide/interview/golang/basic/1-basic.html"}],["meta",{"property":"og:site_name","content":"Go 面试宝典"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"指针 什么是指针和指针变量? 答案 普通变量存储数据，而指针变量存储的是数据的地址。 学习指针，主要有两个运算符号&和*。 &：地址运算符，从变量中取地址 *：引用运算符，取地址中数据 为什么使用指针？ 答案 意义一：容易编码 指针在数据结构中起着重要的作用。通过指针，我们可以创建复杂的数据结构，如链表、树和图。指针可在数据结构中轻松地访问和操作节点之..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-29T02:53:54.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-01-29T02:53:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-29T02:53:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]]},"headers":[{"level":2,"title":"指针","slug":"指针","link":"#指针","children":[{"level":3,"title":"什么是指针和指针变量?","slug":"什么是指针和指针变量","link":"#什么是指针和指针变量","children":[]},{"level":3,"title":"为什么使用指针？","slug":"为什么使用指针","link":"#为什么使用指针","children":[]},{"level":3,"title":"哪些对象可以获取地址，哪些不行？","slug":"哪些对象可以获取地址-哪些不行","link":"#哪些对象可以获取地址-哪些不行","children":[]}]},{"level":2,"title":"字面量","slug":"字面量","link":"#字面量","children":[{"level":3,"title":"字面量是什么意思？","slug":"字面量是什么意思","link":"#字面量是什么意思","children":[]},{"level":3,"title":"什么是有类型常量和无类型常量？","slug":"什么是有类型常量和无类型常量","link":"#什么是有类型常量和无类型常量","children":[]},{"level":3,"title":"不同字面量可能同值吗？","slug":"不同字面量可能同值吗","link":"#不同字面量可能同值吗","children":[]},{"level":3,"title":"字面量和变量的区别是什么？","slug":"字面量和变量的区别是什么","link":"#字面量和变量的区别是什么","children":[]},{"level":3,"title":"什么是组合字面量？","slug":"什么是组合字面量","link":"#什么是组合字面量","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"Go 中的 rune 和 byte 有什么区别？","slug":"go-中的-rune-和-byte-有什么区别","link":"#go-中的-rune-和-byte-有什么区别","children":[]},{"level":3,"title":"Golang中的深拷贝和浅拷贝是什么？","slug":"golang中的深拷贝和浅拷贝是什么","link":"#golang中的深拷贝和浅拷贝是什么","children":[]},{"level":3,"title":"make 和 new 有什么区别？","slug":"make-和-new-有什么区别","link":"#make-和-new-有什么区别","children":[]},{"level":3,"title":"数组和切片有什么区别？","slug":"数组和切片有什么区别","link":"#数组和切片有什么区别","children":[]},{"level":3,"title":"如果 for range 同时添加数据， for range 会无限执行吗？","slug":"如果-for-range-同时添加数据-for-range-会无限执行吗","link":"#如果-for-range-同时添加数据-for-range-会无限执行吗","children":[]},{"level":3,"title":"多个 defer 的执行顺序是什么？","slug":"多个-defer-的执行顺序是什么","link":"#多个-defer-的执行顺序是什么","children":[]},{"level":3,"title":"什么是数据溢出？","slug":"什么是数据溢出","link":"#什么是数据溢出","children":[]},{"level":3,"title":"函数参数使用值还是指针？","slug":"函数参数使用值还是指针","link":"#函数参数使用值还是指针","children":[]}]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[{"level":3,"title":"未初始化的 Map 可以读取 key 吗？","slug":"未初始化的-map-可以读取-key-吗","link":"#未初始化的-map-可以读取-key-吗","children":[]},{"level":3,"title":"如果对未初始化的 Map 赋值会怎么样？","slug":"如果对未初始化的-map-赋值会怎么样","link":"#如果对未初始化的-map-赋值会怎么样","children":[]},{"level":3,"title":"如果对未初始化的 Map 进行删除 key 的操作会发生什么？","slug":"如果对未初始化的-map-进行删除-key-的操作会发生什么","link":"#如果对未初始化的-map-进行删除-key-的操作会发生什么","children":[]}]}],"git":{"createdTime":1705223227000,"updatedTime":1706496834000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":6},{"name":"qingyansu","email":"qingyansu@qq.com","commits":5}]},"readingTime":{"minutes":9.52,"words":2857},"filePathRelative":"guide/interview/golang/basic/1-basic.md","localizedDate":"2024年1月14日","autoDesc":true,"excerpt":"<h2>指针</h2>\\n<h3>什么是指针和指针变量?</h3>\\n<details class=\\"hint-container details\\"><summary>答案</summary>\\n<p>普通变量存储数据，而指针变量存储的是数据的地址。</p>\\n<ul>\\n<li>学习指针，主要有两个运算符号<code>&amp;</code>和<code>*</code>。\\n<ol>\\n<li><code>&amp;</code>：地址运算符，从变量中取地址</li>\\n<li><code>*</code>：引用运算符，取地址中数据</li>\\n</ol>\\n</li>\\n</ul>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code>num <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">99</span>\\nfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>num<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//输出: 99</span>\\n\\nptr <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&amp;</span>num\\nfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>ptr<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//输出: 例如：0xc000086020</span>\\n\\ntamp <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">*</span>ptr\\nfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>tamp<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//输出: 99</span>\\n</code></pre></div></details>"}');export{r as comp,k as data};
