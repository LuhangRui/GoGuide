import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,d as e}from"./app-6cjanhfS.js";const t={},i=e(`<h2 id="integers-int" tabindex="-1"><a class="header-anchor" href="#integers-int" aria-hidden="true">#</a> Integers (int)</h2><p>Integers come in two types:</p><table><thead><tr><th>Type</th><th>Range</th><th>Description</th></tr></thead><tbody><tr><td>Signed integers</td><td><code>-∞</code> ~ <code>+∞</code></td><td>Signed integers include positive and negative numbers</td></tr><tr><td>Unsigned integers</td><td><code>0</code> ~ <code>+∞</code></td><td>Unsigned integers include 0 and all positive numbers</td></tr></tbody></table><blockquote><p>In Golang, types starting with <code>int</code> are signed integers, and those starting with <code>uint</code> are unsigned integers.</p></blockquote><p>Integer types in Golang:</p><table><thead><tr><th>Bits</th><th>Type</th></tr></thead><tbody><tr><td>8</td><td><code>int8</code> <code>uint8</code></td></tr><tr><td>16</td><td><code>int16</code> <code>uint16</code></td></tr><tr><td>32</td><td><code>int32</code> <code>uint32</code></td></tr><tr><td>64</td><td><code>int64</code> <code>uint64</code></td></tr><tr><td>32 or 64 (based on system architecture)</td><td><code>int</code> <code>uint</code></td></tr></tbody></table><p>There are also two equivalent types:</p><ul><li><code>rune</code>: equivalent to <code>int32</code> , used to store <code>Unicode</code> characters</li><li><code>byte</code>: equivalent to <code>uint8</code> , used to store <code>ASCII</code> characters</li></ul><h2 id="floating-point-numbers-float" tabindex="-1"><a class="header-anchor" href="#floating-point-numbers-float" aria-hidden="true">#</a> Floating-point Numbers (float)</h2><p>Floating-point numbers are numbers that contain a decimal point.</p><table><thead><tr><th>Bits</th><th>Type</th></tr></thead><tbody><tr><td>32</td><td><code>float32</code></td></tr><tr><td>64</td><td><code>float64</code></td></tr></tbody></table><h2 id="complex-numbers-complex" tabindex="-1"><a class="header-anchor" href="#complex-numbers-complex" aria-hidden="true">#</a> Complex Numbers (complex)</h2><p>Complex numbers contain imaginary and real numbers, with the real part being a floating-point number.</p><table><thead><tr><th>Bits</th><th>Type</th></tr></thead><tbody><tr><td>32-bit float + imaginary</td><td><code>complex64</code></td></tr><tr><td>64-bit float + imaginary</td><td><code>complex128</code></td></tr></tbody></table><details><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Initialize a complex number</span>
<span class="token keyword">var</span> complexData <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Equals: 5 + 3i</span>

<span class="token comment">// Another way to initialize</span>
complexData2 <span class="token operator">:=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3i</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="strings-string" tabindex="-1"><a class="header-anchor" href="#strings-string" aria-hidden="true">#</a> Strings (string)</h2><p>Strings are composed of a sequence of characters, and the type name is <code>string</code>.</p><p><strong>Once a string is created, it cannot be modified.</strong></p><details><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">:=</span> <span class="token string">&quot;Hi! Jack&quot;</span>
  
  <span class="token comment">// Cannot modify, the following commented code will cause an error</span>
  <span class="token comment">// str[2] = &#39;c&#39;</span>

  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="booleans-bool" tabindex="-1"><a class="header-anchor" href="#booleans-bool" aria-hidden="true">#</a> Booleans (bool)</h2><p>The boolean type values are <code>true</code> or <code>false</code>, and the type name is <code>bool</code>.</p><details><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> isNumber <span class="token builtin">bool</span>

isNumber <span class="token operator">=</span> <span class="token boolean">true</span>
isNumber <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="arrays-array" tabindex="-1"><a class="header-anchor" href="#arrays-array" aria-hidden="true">#</a> Arrays (array)</h2><p>Arrays are composed of a series of data, which can be accessed by index.</p><p><strong>The capacity of an array cannot be modified once created.</strong></p><details><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="slices-slices" tabindex="-1"><a class="header-anchor" href="#slices-slices" aria-hidden="true">#</a> Slices (slices)</h2><p>Slices are dynamic arrays that can automatically adjust their capacity size based on the data.</p><details><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>
		data <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Result</span>
<span class="token comment">// [0 1 2 3 4 5 6 7 8 9]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="map-map" tabindex="-1"><a class="header-anchor" href="#map-map" aria-hidden="true">#</a> Map (map)</h2><p>A <code>map</code> is a key-value mapping table, where you can get the corresponding <code>value</code> through the <code>key</code>.</p><p>The declaration of a <code>map</code> is as follows:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>map[KeyType]ValueType
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>KeyType</code> is the data type of the key, and <code>ValueType</code> is the data type of the value.</p><details><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Declare a map</span>
<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>

<span class="token comment">// Initialize the map using make</span>
m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>

<span class="token comment">// Set the value</span>
m<span class="token punctuation">[</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">66</span>

<span class="token comment">// Output the value</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="structures-struct" tabindex="-1"><a class="header-anchor" href="#structures-struct" aria-hidden="true">#</a> Structures (struct)</h2><p>Structures are composed of a series of custom fields, which can be accessed using <code>.</code>.</p><details><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

a <span class="token operator">:=</span> Animal<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span> <span class="token string">&quot;Lucky&quot;</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="pointers-pointer" tabindex="-1"><a class="header-anchor" href="#pointers-pointer" aria-hidden="true">#</a> Pointers (pointer)</h2><p>Pointers store the memory address of a variable. Use <code>*</code> in front of a variable to define it as a pointer, and <code>&amp;</code> to get the variable&#39;s address. Pointers allow you to modify data outside of a function within the function.</p><details><summary>Example</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> num <span class="token operator">*</span><span class="token builtin">int</span>

n <span class="token operator">:=</span> <span class="token number">10</span>

num <span class="token operator">=</span> <span class="token operator">&amp;</span>n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="zero-value-table" tabindex="-1"><a class="header-anchor" href="#zero-value-table" aria-hidden="true">#</a> Zero Value Table</h2><table><thead><tr><th><strong>Type</strong></th><th><strong>Zero Value</strong></th></tr></thead><tbody><tr><td>uint/uint8/uint16/uint32/uint64</td><td>0</td></tr><tr><td>int/int8/int16/int32/int64</td><td>0</td></tr><tr><td>float32/float64</td><td>0</td></tr><tr><td>complex64/complex128</td><td>0+0i</td></tr><tr><td>bool</td><td>false</td></tr><tr><td>uintptr</td><td>0</td></tr><tr><td>byte</td><td>0</td></tr><tr><td>rune</td><td>0</td></tr><tr><td>string</td><td>&quot;&quot;</td></tr><tr><td>struct</td><td>All internal attributes are their corresponding zero values</td></tr><tr><td>interface</td><td>nil</td></tr><tr><td>slice</td><td>nil</td></tr><tr><td>map</td><td>nil</td></tr><tr><td>chan</td><td>nil</td></tr><tr><td>func</td><td>nil</td></tr><tr><td>pointer</td><td>nil</td></tr></tbody></table>`,43),o=[i];function d(c,l){return a(),s("div",null,o)}const u=n(t,[["render",d],["__file","2-datatype.html.vue"]]);export{u as default};
