import{_ as t}from"./sql-join-ZrJKUDjs.js";import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as n,d as a}from"./app-20U34SQp.js";const r={},s=a('<h2 id="relationship-keys" tabindex="-1"><a class="header-anchor" href="#relationship-keys" aria-hidden="true">#</a> Relationship Keys</h2><p><strong>Relationship keys are used to identify each row in a data table or to identify relationships with other tables</strong></p><table><thead><tr><th>Relationship Key</th><th>Description</th></tr></thead><tbody><tr><td>Primary Key (Unique Key)</td><td>The primary key is the field used to uniquely identify in the data column, cannot be null, and a table can only have one primary key</td></tr><tr><td>Super Key</td><td>The super key is all attribute sets that can uniquely identify the data column, i.e., if any single or multiple fields can also uniquely identify the data column, they all belong to the super key</td></tr><tr><td>Candidate Key</td><td>The candidate key is a subset of the super key, the candidate key is the super key without redundant fields, and any field removed from the candidate key does not belong to the super key</td></tr><tr><td>Foreign Key</td><td>The foreign key is used to establish relationships between tables, such as if the primary key of table A is a field of table B, then the primary key field of table A in table B is a foreign key</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>The difference between the primary key and the unique key:</p><ul><li>A table can only have one primary key, but can have multiple unique keys</li><li>The primary key cannot be null, the unique key can be null</li></ul></div><details><summary>Example</summary><p>Assume there are two tables</p><table><thead><tr><th>student</th><th>teacher</th></tr></thead><tbody><tr><td>id</td><td>id</td></tr><tr><td>name</td><td>name</td></tr><tr><td>age</td><td>age</td></tr><tr><td>identify_card (ID number)</td><td></td></tr><tr><td>teacher_id</td><td></td></tr></tbody></table><ul><li>Primary Key: <code>student.id</code> <code>teacher.id</code></li><li>Super Key: For example, in the student table: (<code>student.id</code>, <code>student.name</code>),(<code>student.id</code>, <code>student.name</code>, <code>student.age</code>) ... Any combination with the primary key and ID number is a super key</li><li>Candidate Key: For example, in the <code>student</code> table: <code>student.id</code> <code>student.identify_card</code></li><li>Foreign Key: <code>student.teacher_id</code></li></ul></details><h2 id="table-join" tabindex="-1"><a class="header-anchor" href="#table-join" aria-hidden="true">#</a> Table Join</h2><p>To learn about table join, you first need to understand <strong>Cartesian Product</strong></p><div class="hint-container info"><p class="hint-container-title">Cartesian Product</p><p>The Cartesian product refers to the set of all elements in X, Y where all elements in X are multiplied by all elements in Y, also known as <strong>direct product</strong></p><p>For example, <code>X={a,b}</code> <code>Y={1,2}</code> then the Cartesian product of X and Y is</p><p><code>Z={(a,1),(a,2),(b,1),(b,2)}</code></p></div><p><strong>Table join is the result of filtering the Cartesian product between two tables through conditions</strong></p><h3 id="table-join-diagram" tabindex="-1"><a class="header-anchor" href="#table-join-diagram" aria-hidden="true">#</a> Table Join Diagram</h3><figure><img src="'+t+`" alt="sql-join" tabindex="0" loading="lazy"><figcaption>sql-join</figcaption></figure><div class="hint-container info"><p class="hint-container-title">Sample Table</p><details><summary>Sample Table</summary><h3 id="sample-table" tabindex="-1"><a class="header-anchor" href="#sample-table" aria-hidden="true">#</a> Sample Table</h3><p>The following queries are all around this sample table:</p><h4 id="course" tabindex="-1"><a class="header-anchor" href="#course" aria-hidden="true">#</a> course</h4><table><thead><tr><th>id</th><th>title</th></tr></thead><tbody><tr><td>1</td><td>Math</td></tr><tr><td>2</td><td>Art</td></tr><tr><td>3</td><td>Music</td></tr><tr><td>4</td><td>Geography</td></tr><tr><td>15</td><td>Sport</td></tr></tbody></table><h4 id="student" tabindex="-1"><a class="header-anchor" href="#student" aria-hidden="true">#</a> student</h4><table><thead><tr><th>id</th><th>name</th><th>age</th><th>course_id</th></tr></thead><tbody><tr><td>1</td><td>Elaine Morris</td><td>12</td><td>3</td></tr><tr><td>2</td><td>Beverly Turner</td><td>11</td><td>4</td></tr><tr><td>3</td><td>Connie Murphy</td><td>11</td><td>2</td></tr><tr><td>4</td><td>Jamie Romero</td><td>12</td><td>5</td></tr><tr><td>5</td><td>Clifford Reyes</td><td>10</td><td>1</td></tr><tr><td>6</td><td>Francisco Cook</td><td>12</td><td>2</td></tr><tr><td>7</td><td>Alan Sanchez</td><td>11</td><td>9</td></tr><tr><td>8</td><td>Tony Garcia</td><td>12</td><td>3</td></tr><tr><td>9</td><td>Bobby Burns</td><td>12</td><td>8</td></tr><tr><td>10</td><td>Glenn Adams</td><td>11</td><td>5</td></tr><tr><td>11</td><td>Glenn Griffin</td><td>12</td><td>4</td></tr><tr><td>12</td><td>Justin Rogers</td><td>13</td><td>8</td></tr></tbody></table></details></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Generally, we call the first table the driving table and the second table the driven table. In the example, <code>student</code> is the <strong>driving table</strong> and <code>course</code> is the <strong>driven table</strong>.</p></div><h3 id="inner-join" tabindex="-1"><a class="header-anchor" href="#inner-join" aria-hidden="true">#</a> Inner Join</h3><p>The inner join <code>inner join</code> is equivalent to <code>join</code>, used to return only matching rows.</p><p>The following three methods are the same</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> a <span class="token keyword">join</span> b<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> a <span class="token keyword">inner</span> <span class="token keyword">join</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details><summary>Example</summary><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">inner</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> s<span class="token punctuation">.</span>course_id<span class="token operator">=</span>c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Result</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>course_id</th><th>id(1)</th><th>title</th></tr></thead><tbody><tr><td>5</td><td>Clifford Reyes</td><td>10</td><td>1</td><td>1</td><td>Math</td></tr><tr><td>6</td><td>Francisco Cook</td><td>12</td><td>2</td><td>2</td><td>Art</td></tr><tr><td>3</td><td>Connie Murphy</td><td>11</td><td>2</td><td>2</td><td>Art</td></tr><tr><td>8</td><td>Tony Garcia</td><td>12</td><td>3</td><td>3</td><td>Music</td></tr><tr><td>1</td><td>Elaine Morris</td><td>12</td><td>3</td><td>3</td><td>Music</td></tr><tr><td>11</td><td>Glenn Griffin</td><td>12</td><td>4</td><td>4</td><td>Geography</td></tr><tr><td>2</td><td>Beverly Turner</td><td>11</td><td>4</td><td>4</td><td>Geography</td></tr></tbody></table><p><strong>You can see that only the data columns that satisfy <code>s.course_id=c.id</code> are returned</strong></p></details><h3 id="outer-join" tabindex="-1"><a class="header-anchor" href="#outer-join" aria-hidden="true">#</a> Outer Join</h3><h4 id="left-join" tabindex="-1"><a class="header-anchor" href="#left-join" aria-hidden="true">#</a> Left Join</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> s<span class="token punctuation">.</span>course_id<span class="token operator">=</span>c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Result</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>course_id</th><th>id(1)</th><th>title</th></tr></thead><tbody><tr><td>5</td><td>Clifford Reyes</td><td>10</td><td>1</td><td>1</td><td>Math</td></tr><tr><td>6</td><td>Francisco Cook</td><td>12</td><td>2</td><td>2</td><td>Art</td></tr><tr><td>3</td><td>Connie Murphy</td><td>11</td><td>2</td><td>2</td><td>Art</td></tr><tr><td>8</td><td>Tony Garcia</td><td>12</td><td>3</td><td>3</td><td>Music</td></tr><tr><td>1</td><td>Elaine Morris</td><td>12</td><td>3</td><td>3</td><td>Music</td></tr><tr><td>11</td><td>Glenn Griffin</td><td>12</td><td>4</td><td>4</td><td>Geography</td></tr><tr><td>2</td><td>Beverly Turner</td><td>11</td><td>4</td><td>4</td><td>Geography</td></tr><tr><td>10</td><td>Glenn Adams</td><td>11</td><td>5</td><td></td><td></td></tr><tr><td>4</td><td>Jamie Romero</td><td>12</td><td>5</td><td></td><td></td></tr><tr><td>12</td><td>Justin Rogers</td><td>13</td><td>8</td><td></td><td></td></tr><tr><td>9</td><td>Bobby Burns</td><td>12</td><td>8</td><td></td><td></td></tr><tr><td>7</td><td>Alan Sanchez</td><td>11</td><td>9</td><td></td><td></td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">Info</p><p><strong>You can see that not only the data columns that satisfy <code>s.course_id=c.id</code> are returned, but also other unmatched data from the driving table are returned</strong></p></div><h4 id="right-join" tabindex="-1"><a class="header-anchor" href="#right-join" aria-hidden="true">#</a> Right Join</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">right</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> s<span class="token punctuation">.</span>course_id<span class="token operator">=</span>c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Result</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>course_id</th><th>id(1)</th><th>title</th></tr></thead><tbody><tr><td>5</td><td>Clifford Reyes</td><td>10</td><td>1</td><td>1</td><td>Math</td></tr><tr><td>6</td><td>Francisco Cook</td><td>12</td><td>2</td><td>2</td><td>Art</td></tr><tr><td>3</td><td>Connie Murphy</td><td>11</td><td>2</td><td>2</td><td>Art</td></tr><tr><td>8</td><td>Tony Garcia</td><td>12</td><td>3</td><td>3</td><td>Music</td></tr><tr><td>1</td><td>Elaine Morris</td><td>12</td><td>3</td><td>3</td><td>Music</td></tr><tr><td>11</td><td>Glenn Griffin</td><td>12</td><td>4</td><td>4</td><td>Geography</td></tr><tr><td>2</td><td>Beverly Turner</td><td>11</td><td>4</td><td>4</td><td>Geography</td></tr><tr><td></td><td></td><td></td><td></td><td>15</td><td>Sport</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">Info</p><p><strong>You can see that not only the data columns that satisfy <code>s.course_id=c.id</code> are returned, but also other unmatched data from the driven table are returned</strong></p></div><h4 id="full-outer-join" tabindex="-1"><a class="header-anchor" href="#full-outer-join" aria-hidden="true">#</a> Full Outer Join</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">full</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> s<span class="token punctuation">.</span>course_id<span class="token operator">=</span>c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Result</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>course_id</th><th>id(1)</th><th>title</th></tr></thead><tbody><tr><td>5</td><td>Clifford Reyes</td><td>10</td><td>1</td><td>1</td><td>Math</td></tr><tr><td>6</td><td>Francisco Cook</td><td>12</td><td>2</td><td>2</td><td>Art</td></tr><tr><td>3</td><td>Connie Murphy</td><td>11</td><td>2</td><td>2</td><td>Art</td></tr><tr><td>8</td><td>Tony Garcia</td><td>12</td><td>3</td><td>3</td><td>Music</td></tr><tr><td>1</td><td>Elaine Morris</td><td>12</td><td>3</td><td>3</td><td>Music</td></tr><tr><td>11</td><td>Glenn Griffin</td><td>12</td><td>4</td><td>4</td><td>Geography</td></tr><tr><td>2</td><td>Beverly Turner</td><td>11</td><td>4</td><td>4</td><td>Geography</td></tr><tr><td></td><td></td><td></td><td></td><td>15</td><td>Sport</td></tr><tr><td>10</td><td>Glenn Adams</td><td>11</td><td>5</td><td></td><td></td></tr><tr><td>4</td><td>Jamie Romero</td><td>12</td><td>5</td><td></td><td></td></tr><tr><td>12</td><td>Justin Rogers</td><td>13</td><td>8</td><td></td><td></td></tr><tr><td>9</td><td>Bobby Burns</td><td>12</td><td>8</td><td></td><td></td></tr><tr><td>7</td><td>Alan Sanchez</td><td>11</td><td>9</td><td></td><td></td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">Info</p><p><strong>You can see that not only the data columns that satisfy <code>s.course_id=c.id</code> are returned, but also other unmatched data are returned</strong></p></div><div class="hint-container tip"><p class="hint-container-title">Query Condition</p><p>After using the join, two filtering conditions are supported:</p><blockquote><p>where</p></blockquote><p>Using the where clause will only return columns that meet the where condition</p><blockquote><p>on</p></blockquote><p>When using on, in the inner join query, the effect of on and where is consistent. In the outer join, such as <strong>left join</strong>, the unmatched data of the driving table will be returned</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>If there are multiple table joins such as <code>a inner join b inner join c</code>, <code>a inner join b</code> will be executed first, and then the result will be <code>inner join c</code></p></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Using indexes when <code>join</code> can reduce the number of table returns</p></div>`,37),i=[s];function o(l,c){return e(),n("div",null,i)}const y=d(r,[["render",o],["__file","1-database-basic.html.vue"]]);export{y as default};
