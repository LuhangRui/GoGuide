import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,d as e}from"./app-T6T33XWg.js";const t={},i=e(`<h2 id="golang-基础问题" tabindex="-1"><a class="header-anchor" href="#golang-基础问题" aria-hidden="true">#</a> Golang 基础问题</h2><h3 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h3><h4 id="什么是指针和指针变量" tabindex="-1"><a class="header-anchor" href="#什么是指针和指针变量" aria-hidden="true">#</a> 什么是指针和指针变量?</h4><details><summary>展开查看</summary> 普通变量存储数据，而指针变量存储的是数据的地址。 <ul><li><p>学习指针，主要有两个运算符号<code>&amp;</code>和<code>*</code>。</p></li><li><p><code>&amp;</code>：地址运算符，从变量中取地址</p></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 定义普通变量并打印</span>
num <span class="token operator">:=</span> <span class="token number">99</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">//output: 99</span>

ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>num
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token comment">//output: 例如：0xc000086020</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>*</code>：引用运算符，取地址中数据</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>tamp <span class="token operator">:=</span> <span class="token operator">*</span>ptr
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>tamp<span class="token punctuation">)</span> <span class="token comment">//output: 99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="为什么使用指针" tabindex="-1"><a class="header-anchor" href="#为什么使用指针" aria-hidden="true">#</a> 为什么使用指针？</h4><details><summary>展开查看</summary><p><strong>意义一：容易编码</strong></p><p>指针在数据结构中起着重要的作用。通过指针，我们可以创建复杂的数据结构，如链表、树和图。指针可在数据结构中轻松地访问和操作节点之间的关系，从而实现高效的数据存储和检索。</p><p>指针可在函数之间传递数据的引用，而不是复制整个数据。这样可以节省内存空间，并提高程序的执行效率。通过传递指针，函数可以直接修改原始数据，而不需要返回值。</p><p><strong>意义二：节省内存</strong></p><p>指针可直接访问和修改内存中的数据，通过指针，我们可以在运行时动态地分配内存，以满足程序的需求，并在不需要时释放内存，避免内存泄漏。</p><p>指针可在程序运行时动态地分配内存。通过动态内存分配，我们可以根据需要分配和释放内存，从而提高程序的灵活性和效率。</p></details><h4 id="对象选择器自动解引用怎么用" tabindex="-1"><a class="header-anchor" href="#对象选择器自动解引用怎么用" aria-hidden="true">#</a> 对象选择器自动解引用怎么用？</h4><details><summary>展开查看</summary><p>从结构体实例对象中获取值，可用 <code>.</code> ，此符号为 <strong>选择器</strong>。</p><ul><li>此做法可省去 <code>*</code> 操作，选择器 <code>.</code> 会直接解引用，示例如下</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>animal<span class="token punctuation">{</span><span class="token string">&quot;yikesu&quot;</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>过去通常如下</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>animal<span class="token punctuation">{</span><span class="token string">&quot;yikesu&quot;</span><span class="token punctuation">}</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>还有可省去 <code>*</code> 操作，选择器 <code>.</code> 会直接解引用，示例如下</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>animal<span class="token punctuation">{</span><span class="token string">&quot;yikesu&quot;</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>而可像下面这样</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>animal<span class="token punctuation">)</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不必像下面这样</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>animal<span class="token punctuation">)</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3><h4 id="字面量是什么意思" tabindex="-1"><a class="header-anchor" href="#字面量是什么意思" aria-hidden="true">#</a> 字面量是什么意思？</h4><details><summary>展开查看</summary> - 而下面这些基本类型值的文本，就是基本类型字面量。 | 基本类型 | 集合 | | -------- | ---------------------------------------------------------------------------------------- | | 布尔类型 | \`bool\` | | 字符串类 | \`string\` | | 复数类型 | \`complex64\` \`complex128\` | | 浮点类型 | \`float32\` \`float64\` | | 整数类型 | \`int8\` \`uint8\` \`int16\` \`uint16\` \`int32\` \`uint32\` \`int64\` \`uint64\` \`int\` \`uint\` \`uintptr\` | <ul><li>未命名常量是一种特殊的常量，它没有具体的名称。这种常量只有值，没有与之关联的变量名。 如下字符串都是字符串字面量，就是 <strong>未命名常量</strong>。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;hello，world&quot;   &quot;123&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h4 id="不同字面量可能同值吗" tabindex="-1"><a class="header-anchor" href="#不同字面量可能同值吗" aria-hidden="true">#</a> 不同字面量可能同值吗？</h4><details><summary>展开查看</summary><ul><li>一个值可存在多种字面量表示，如下十进制的数值 21，可由三种字面量表示 | 10进制 | 8进制 | 2进制 | 16进制 | | ------ | ----- | ----------- | ------ | | 21 | 0o25 | 0b0001 0101 | 0x15 |</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0o25</span><span class="token punctuation">)</span>     
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0x15</span> <span class="token punctuation">)</span>    
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0b0001</span> <span class="token number">0101</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token comment">// 由运行结果得出他们相等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="字面量和变量的区别是什么" tabindex="-1"><a class="header-anchor" href="#字面量和变量的区别是什么" aria-hidden="true">#</a> 字面量和变量的区别是什么？</h4><details><summary>展开查看</summary><ul><li><p>字面量，就是未命名的常量，跟常量一样，是不可寻址的。</p></li><li><p>举例如下</p></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;fast&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> cannot take the address of <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>若不用变量名承接，函数返回的一个字符串的文本值，也就是字符串字面量， 而这种字面量是不可寻址的，会出现错误。要用 <code>&amp;</code> 寻址，须用变量名承接。</p></li><li><p>而下面这样就没错</p></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;fast&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="什么是组合字面量" tabindex="-1"><a class="header-anchor" href="#什么是组合字面量" aria-hidden="true">#</a> 什么是组合字面量？</h4><details><summary>展开查看</summary><ul><li><p>组合字面量就是把对象的定义和初始化放在了一起，进一步说，组合字面量是为结构体、数组、切片和map构造值，并且每次都会创建新值。它们由字面量的类型后紧跟大括号及元素列表。每个元素前面可以选择性的带一个相关key。</p></li><li><p>使用组合字面量会简单一些，而结构体、数组、切片和map的组合字面量方式如下。</p></li><li><p>结构体用组合字面量方式来定义和初始化</p></li></ul><div class="language-golang line-numbers-mode" data-ext="golang"><pre class="language-golang"><code>type man struct {
	nationality string
	height int
}
func main() {
	// 声明和属性赋值
	su := man{
		nationality:   &quot;China&quot;,
		height:    180,
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结构体用繁琐的常规方式如下</li></ul><div class="language-golang line-numbers-mode" data-ext="golang"><pre class="language-golang"><code>type man struct {
	nationality string
	height int
}

func main() {
	// 声明对象
	var su man
	// 属性赋值
	su.nationality = &quot;China&quot;
	su.height = 180
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>map用组合字面量方式的定义和初始化如下</li></ul><div class="language-golang line-numbers-mode" data-ext="golang"><pre class="language-golang"><code>m := map[string]int {
	&quot;math&quot;: 96,
	&quot;Chinese&quot;: 90,
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同样的，数组用组合字面量方式的定义和初始化可以如下</li></ul><div class="language-golang line-numbers-mode" data-ext="golang"><pre class="language-golang"><code>colours := [3]string{&quot;black&quot;, &quot;red&quot;, &quot;white&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>切片的组合字面量方式如下</li></ul><div class="language-golang line-numbers-mode" data-ext="golang"><pre class="language-golang"><code>s := []string{&quot;red&quot;, &quot;black&quot;} 
//会自动补上切片的容量和长度
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><h4 id="go-中的-rune-和-byte-有什么区别" tabindex="-1"><a class="header-anchor" href="#go-中的-rune-和-byte-有什么区别" aria-hidden="true">#</a> Go 中的 <code>rune</code> 和 <code>byte</code> 有什么区别？</h4><details><summary>展开查看</summary><p>在 Go 语言中，<code>byte</code> 和 <code>rune</code> 都是用于表示字符的类型，但它们之间有一些区别：</p><h5 id="类型不同" tabindex="-1"><a class="header-anchor" href="#类型不同" aria-hidden="true">#</a> 类型不同：</h5><ul><li>byte ：字节，是 uint8 的别名类型</li><li>rune ：字符，是 int32 的别名类型</li></ul><h5 id="存储的字符不同" tabindex="-1"><a class="header-anchor" href="#存储的字符不同" aria-hidden="true">#</a> 存储的字符不同：</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//byte 用于表示 ASCII 码字符，只能存储 0-255 范围内的字符。</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;Y&#39;</span>  <span class="token comment">// ASCII 码字符</span>

<span class="token comment">//rune 用于表示 Unicode 字符，可以存储任意 Unicode 字符。</span>
<span class="token keyword">var</span> b <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;酥&#39;</span>  <span class="token comment">// Unicode 字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="占用的字节大小不同-byte-占用1个字节-rune-占用4个字节。" tabindex="-1"><a class="header-anchor" href="#占用的字节大小不同-byte-占用1个字节-rune-占用4个字节。" aria-hidden="true">#</a> 占用的字节大小不同：byte 占用1个字节，rune 占用4个字节。</h5><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;unsafe&quot;</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;Y&#39;</span>
<span class="token keyword">var</span> b <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;酥&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;a 占用 %d 个字节数\\nb 占用 %d 个字节数&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出: a 占用 1 个字节数 b 占用 4 个字节数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="表示的字符范围不同" tabindex="-1"><a class="header-anchor" href="#表示的字符范围不同" aria-hidden="true">#</a> 表示的字符范围不同：</h5><p>由于 byte 类型能表示的值是有限的，只有 2^8=256 个。所以想表示中文只能使用 rune 类型。</p><p>字符串表示：在 Go 中，字符串是用 UTF-8 进行编码的，英文字母占用一个字节，而中文字母占用 3个字节1。例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> world <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;world,世界&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>world<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 输出 12</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;G&#39;</span>
<span class="token keyword">var</span> b <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;O&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;a 占用 %d 个字节数\\n&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;b 占用 %d 个字节数\\n&quot;</span><span class="token punctuation">,</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// output</span>
a 占用 <span class="token number">1</span> 个字节数
b 占用 <span class="token number">4</span> 个字节数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,20),p=[i];function l(o,c){return s(),a("div",null,p)}const r=n(t,[["render",l],["__file","1-basic.html.vue"]]);export{r as default};
