import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as d,c as e,d as r}from"./app-6cjanhfS.js";const a={},h=r('<h2 id="arithmetic-operators" tabindex="-1"><a class="header-anchor" href="#arithmetic-operators" aria-hidden="true">#</a> Arithmetic Operators</h2><table><thead><tr><th>A</th><th>B</th></tr></thead><tbody><tr><td>50</td><td>20</td></tr></tbody></table><table><thead><tr><th>Operator</th><th>Operation</th><th>Result</th><th>Description</th></tr></thead><tbody><tr><td>+</td><td>A + B</td><td>70</td><td>Addition</td></tr><tr><td>-</td><td>A - B</td><td>30</td><td>Subtraction</td></tr><tr><td>*</td><td>A * B</td><td>1000</td><td>Multiplication</td></tr><tr><td>/</td><td>A / B</td><td>2</td><td>Division</td></tr><tr><td>%</td><td>A % B</td><td>10</td><td>Modulus</td></tr><tr><td>++</td><td>A++</td><td>51</td><td>Increment</td></tr><tr><td>--</td><td>A--</td><td>49</td><td>Decrement</td></tr></tbody></table><h2 id="relational-operators" tabindex="-1"><a class="header-anchor" href="#relational-operators" aria-hidden="true">#</a> Relational Operators</h2><table><thead><tr><th>A</th><th>B</th></tr></thead><tbody><tr><td>50</td><td>20</td></tr></tbody></table><table><thead><tr><th>Operator</th><th>Operation</th><th>Result</th><th>Description</th></tr></thead><tbody><tr><td>==</td><td>A == B</td><td>false</td><td>Check if two numbers are equal, if yes then true, otherwise false</td></tr><tr><td>!=</td><td>A != B</td><td>true</td><td>Check if two numbers are not equal, if yes then true, otherwise false</td></tr><tr><td>&gt;</td><td>A &gt; B</td><td>true</td><td>Check if left side is greater than right side, if yes then true, otherwise false</td></tr><tr><td>&lt;</td><td>A &lt; B</td><td>false</td><td>Check if left side is less than right side, if yes then true, otherwise false</td></tr><tr><td>&gt;=</td><td>A &gt;= B</td><td>true</td><td>Check if left side is greater than or equal to right side, if yes then true, otherwise false</td></tr><tr><td>&lt;=</td><td>A &lt;= B</td><td>false</td><td>Check if left side is less than or equal to right side, if yes then true, otherwise false</td></tr></tbody></table><h2 id="logical-operators" tabindex="-1"><a class="header-anchor" href="#logical-operators" aria-hidden="true">#</a> Logical Operators</h2><table><thead><tr><th>A</th><th>B</th></tr></thead><tbody><tr><td>true</td><td>false</td></tr></tbody></table><table><thead><tr><th>Operator</th><th>Operation</th><th>Result</th><th>Description</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>A &amp;&amp; B</td><td>false</td><td>If both sides are true, then true, otherwise false</td></tr><tr><td>!=</td><td>A != B</td><td>true</td><td>If either side is true, then true, if both sides are false, then false</td></tr><tr><td>!</td><td>!A</td><td>false</td><td>If the condition is true, then false, otherwise true</td></tr></tbody></table><h2 id="bitwise-operators" tabindex="-1"><a class="header-anchor" href="#bitwise-operators" aria-hidden="true">#</a> Bitwise Operators</h2><p>Truth Table</p><table><thead><tr><th><strong>p</strong></th><th><strong>q</strong></th><th><strong>p &amp; q</strong></th><th><strong>p | q</strong></th><th><strong>p ^ q</strong></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><p>Assuming</p><table><thead><tr><th>Variable</th><th>Value</th></tr></thead><tbody><tr><td>A</td><td>0110 1000</td></tr><tr><td>B</td><td>0111 0011</td></tr></tbody></table><table><thead><tr><th>Operator</th><th>Operation</th><th>Result</th><th>Description</th></tr></thead><tbody><tr><td>&amp;</td><td>A &amp; B</td><td>0110 0000</td><td>Bitwise AND</td></tr><tr><td>|</td><td>A | B</td><td>0111 1011</td><td>Bitwise OR</td></tr><tr><td>^</td><td>A ^ B</td><td>0001 1011</td><td>Bitwise XOR</td></tr><tr><td>&lt;&lt;</td><td>A &lt;&lt; 2</td><td>1010 0000</td><td>Left shift by 2 bits, padded with 0</td></tr><tr><td>&gt;&gt;</td><td>A &gt;&gt; 2</td><td>0001 1010</td><td>Right shift by 2 bits, padded with 0</td></tr></tbody></table><h2 id="assignment-operators" tabindex="-1"><a class="header-anchor" href="#assignment-operators" aria-hidden="true">#</a> Assignment Operators</h2><p>We can use <code>=</code> to assign the result on the right to the left, such as <code>C = A + B</code></p><table><thead><tr><th>Operator</th><th>Operation</th><th>Equivalent to</th></tr></thead><tbody><tr><td>+=</td><td>A += B</td><td>A = A + B</td></tr><tr><td>-=</td><td>A -= B</td><td>A = A - B</td></tr><tr><td>*=</td><td>A *= B</td><td>A = A * B</td></tr><tr><td>/=</td><td>A /= B</td><td>A = A / B</td></tr><tr><td>%=</td><td>A %= B</td><td>A = A % B</td></tr><tr><td>&lt;&lt;=</td><td>A &lt;&lt;= 2</td><td>A = A &lt;&lt; 2</td></tr><tr><td>&gt;&gt;=</td><td>A &gt;&gt;= 2</td><td>A = A &gt;&gt; 2</td></tr><tr><td>&amp;=</td><td>A &amp;= 2</td><td>A = A &amp; 2</td></tr><tr><td>|=</td><td>A |= 2</td><td>A = A | 2</td></tr><tr><td>^=</td><td>A ^= 2</td><td>A = A ^ 2</td></tr></tbody></table><h2 id="other-symbols" tabindex="-1"><a class="header-anchor" href="#other-symbols" aria-hidden="true">#</a> Other Symbols</h2><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td>&amp;</td><td>Address of</td></tr><tr><td>*</td><td>Pointer</td></tr></tbody></table><h2 id="symbol-precedence" tabindex="-1"><a class="header-anchor" href="#symbol-precedence" aria-hidden="true">#</a> Symbol Precedence</h2><p>From high to low:</p><table><thead><tr><th>Precedence</th><th>Operator</th></tr></thead><tbody><tr><td>5</td><td>* / % &lt;&lt; &gt;&gt; &amp; &amp;^</td></tr><tr><td>4</td><td>+ - | ^</td></tr><tr><td>3</td><td>== != &lt; &lt;= &gt; &gt;=</td></tr><tr><td>2</td><td>&amp;&amp;</td></tr><tr><td>1</td><td>||</td></tr></tbody></table><p><strong>Parentheses can be used to increase precedence</strong></p>',24),o=[h];function s(i,l){return d(),e("div",null,o)}const p=t(a,[["render",s],["__file","3-operator.html.vue"]]);export{p as default};
