import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as i,a as n,d as s,b as p,e as c}from"./app-BMTMqzPv.js";const l={},r={class:"hint-container info"},d=n("p",{class:"hint-container-title"},"Source",-1),u={href:"https://github.com/xxjwxc/uber_go_guide_cn",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="basic-guidelines" tabindex="-1"><a class="header-anchor" href="#basic-guidelines"><span>Basic Guidelines</span></a></h2><h3 id="limit-line-length" tabindex="-1"><a class="header-anchor" href="#limit-line-length"><span>Limit Line Length</span></a></h3><p>Go code lines should be limited to 80 characters. This helps improve readability in both smaller and larger windows.</p><h3 id="group-related-declarations-avoid-unrelated-ones" tabindex="-1"><a class="header-anchor" href="#group-related-declarations-avoid-unrelated-ones"><span>Group Related Declarations, Avoid Unrelated Ones</span></a></h3><p>Group related declarations together, such as imports, constants, variables, types, and functions. Separate unrelated declarations with an empty line.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;a&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;b&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;a&quot;</span>
  <span class="token string">&quot;b&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>

<span class="token keyword">type</span> Area <span class="token builtin">float64</span>
<span class="token keyword">type</span> Volume <span class="token builtin">float64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
  a <span class="token operator">=</span> <span class="token number">1</span>
  b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
  a <span class="token operator">=</span> <span class="token number">1</span>
  b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> <span class="token punctuation">(</span>
  Area <span class="token builtin">float64</span>
  Volume <span class="token builtin">float64</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><p><code>EnvVar</code> is not related to <code>iota</code>.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Operation <span class="token builtin">int</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  Add Operation <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
  Subtract
  Multiply
  EnvVar <span class="token operator">=</span> <span class="token string">&quot;MY_ENV&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Operation <span class="token builtin">int</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  Add Operation <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
  Subtract
  Multiply
<span class="token punctuation">)</span>

<span class="token keyword">const</span> EnvVar <span class="token operator">=</span> <span class="token string">&quot;MY_ENV&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  red <span class="token operator">:=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span>
  green <span class="token operator">:=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0x00ff00</span><span class="token punctuation">)</span>
  blue <span class="token operator">:=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0x0000ff</span><span class="token punctuation">)</span>

  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><p>Grouping within a function is also acceptable:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> <span class="token punctuation">(</span>
    red   <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span>
    green <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0x00ff00</span><span class="token punctuation">)</span>
    blue  <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0x0000ff</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>

  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>client<span class="token punctuation">)</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  caller <span class="token operator">:=</span> c<span class="token punctuation">.</span>name
  format <span class="token operator">:=</span> <span class="token string">&quot;json&quot;</span>
  timeout <span class="token operator">:=</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second
  <span class="token keyword">var</span> err <span class="token builtin">error</span> <span class="token comment">// Separate var declaration is not recommended</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>client<span class="token punctuation">)</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> <span class="token punctuation">(</span>
    caller  <span class="token operator">=</span> c<span class="token punctuation">.</span>name
    format  <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span>
    timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second
    err <span class="token builtin">error</span>
  <span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="single-variable-declarations" tabindex="-1"><a class="header-anchor" href="#single-variable-declarations"><span>Single Variable Declarations</span></a></h3><p>For single variable assignments, prefer using <code>:=</code>. However, for slices, it&#39;s recommended to use <code>var</code> declarations.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token string">&quot;foo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td></tr><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>list <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  filtered <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token punctuation">{</span>
    <span class="token keyword">if</span> v <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token punctuation">{</span>
      filtered <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>filtered<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>list <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> filtered <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token punctuation">{</span>
    <span class="token keyword">if</span> v <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token punctuation">{</span>
      filtered <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>filtered<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="import-grouping" tabindex="-1"><a class="header-anchor" href="#import-grouping"><span>Import Grouping</span></a></h3><p>Group imported packages, separating each group with an empty line, and sort them alphabetically within each group.</p><div class="hint-container tip"><p class="hint-container-title">Common Grouping Patterns</p><p>Two common grouping patterns:</p><ol><li>Standard library vs. third-party libraries.</li><li>Standard library vs. third-party libraries vs. local/private libraries.</li></ol></div><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;fmt&quot;</span>
  <span class="token string">&quot;os&quot;</span>
  <span class="token string">&quot;go.uber.org/atomic&quot;</span>
  <span class="token string">&quot;golang.org/x/sync/errgroup&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;fmt&quot;</span>
  <span class="token string">&quot;os&quot;</span>

  <span class="token string">&quot;go.uber.org/atomic&quot;</span>
  <span class="token string">&quot;golang.org/x/sync/errgroup&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="import-aliases" tabindex="-1"><a class="header-anchor" href="#import-aliases"><span>Import Aliases</span></a></h3><p>When the package name you&#39;re importing doesn&#39;t match the last word in the import path, it&#39;s recommended to use an alias. You can also use an alias if the package name is too long. However, in most cases, it&#39;s best to avoid aliases unless there&#39;s a package name conflict.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;net/http&quot;</span>

  client <span class="token string">&quot;example.com/client-go&quot;</span>
  trace <span class="token string">&quot;example.com/trace/v2&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="package-names" tabindex="-1"><a class="header-anchor" href="#package-names"><span>Package Names</span></a></h3><p>When defining package names, follow these guidelines:</p><ul><li>Use all lowercase letters; avoid uppercase or special characters.</li><li>In most cases, you don&#39;t need to rename packages when using named imports.</li><li>Choose simple yet meaningful package names for easy recall and reference.</li><li>Avoid using plurals; for example, use <code>net/url</code> instead of <code>net/urls</code>.</li><li>Refrain from using generic names like &quot;common,&quot; &quot;util,&quot; &quot;shared,&quot; or &quot;lib.&quot;</li></ul><h3 id="function-names" tabindex="-1"><a class="header-anchor" href="#function-names"><span>Function Names</span></a></h3><ul><li>Use camel case for function names; avoid underscores to separate words (except for some test functions).</li><li>Function names should describe their purpose as clearly as possible; avoid using meaningless names.</li></ul><h3 id="function-ordering" tabindex="-1"><a class="header-anchor" href="#function-ordering"><span>Function Ordering</span></a></h3><p>Follow these rules for function ordering:</p><ul><li>Arrange function definitions in the order of their expected invocation.</li><li>Within the same file, place functions after <code>struct</code>, <code>const</code>, and <code>var</code> declarations.</li><li>For receiver functions, those starting with <code>new</code> or <code>New</code> should come before others.</li></ul><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>something<span class="token punctuation">)</span> <span class="token function">Cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">calcCost</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>weights<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> something <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">calcCost</span><span class="token punctuation">(</span>n <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>something<span class="token punctuation">)</span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>something <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>something<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> something <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>something <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>something<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>something<span class="token punctuation">)</span> <span class="token function">Cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">calcCost</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>weights<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>something<span class="token punctuation">)</span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">calcCost</span><span class="token punctuation">(</span>n <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="reduce-nesting" tabindex="-1"><a class="header-anchor" href="#reduce-nesting"><span>Reduce Nesting</span></a></h3><p>Code should handle errors or special cases and return early rather than nesting code blocks. This approach leads to more straightforward and concise code.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">{</span>
  <span class="token keyword">if</span> v<span class="token punctuation">.</span>F1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    v <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      v<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid v: %v&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">{</span>
  <span class="token keyword">if</span> v<span class="token punctuation">.</span>F1 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid v: %v&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
    <span class="token keyword">continue</span>
  <span class="token punctuation">}</span>

  v <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err
  <span class="token punctuation">}</span>
  v<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="minimize-unnecessary-else-blocks" tabindex="-1"><a class="header-anchor" href="#minimize-unnecessary-else-blocks"><span>Minimize Unnecessary <code>else</code> Blocks</span></a></h3><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> a <span class="token builtin">int</span>
<span class="token keyword">if</span> b <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">100</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token number">10</span>
<span class="token keyword">if</span> b <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="top-level-variable-declarations" tabindex="-1"><a class="header-anchor" href="#top-level-variable-declarations"><span>Top-Level Variable Declarations</span></a></h3><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> _s <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> _s <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Since F already explicitly returns a string type,</span>
<span class="token comment">// we don&#39;t need to specify the type of _s explicitly.</span>

<span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><p>If we want <code>_e</code> to be of type <code>error</code>, the following definition is incorrect; <code>_e</code> would be defined as the <code>myError</code> type.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> myError <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>myError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> myError <span class="token punctuation">{</span> <span class="token keyword">return</span> myError<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token keyword">var</span> _e <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> myError <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>myError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> myError <span class="token punctuation">{</span> <span class="token keyword">return</span> myError<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token keyword">var</span> _e <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="use-as-a-prefix-for-unexported-top-level-constants-and-variables" tabindex="-1"><a class="header-anchor" href="#use-as-a-prefix-for-unexported-top-level-constants-and-variables"><span>Use <code>_</code> as a Prefix for Unexported Top-Level Constants and Variables</span></a></h3><table><thead><tr><th>Bad</th><th>Good</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// foo.go</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  defaultPort <span class="token operator">=</span> <span class="token number">8080</span>
  defaultUser <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// foo.go</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
  _defaultPort <span class="token operator">=</span> <span class="token number">8080</span>
  _defaultUser <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="separate-embedded-types-in-structs-with-an-empty-line" tabindex="-1"><a class="header-anchor" href="#separate-embedded-types-in-structs-with-an-empty-line"><span>Separate Embedded Types in Structs with an Empty Line</span></a></h3><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  version <span class="token builtin">int</span>
  http<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  http<span class="token punctuation">.</span>Client

  version <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">Pros and Cons of Embedded Types</p><p>Pros:</p><ul><li>Concise code</li><li>Direct access to methods and fields of embedded types</li><li>Ability to implement interfaces</li></ul><p>Cons:</p><ul><li>May expose unexported fields and methods to external packages</li><li>Imports the special zero value of embedded methods</li><li>Exposes all fields and methods of the embedded type, which may not be desired</li><li>Can lead to method call ambiguity if the embedded type has the same method names</li><li>Assigning values to fields of embedded types can be cumbersome, as they mix with other embedded types</li></ul></div><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// Bad: A.Lock() and A.Unlock() are now available,</span>
    <span class="token comment">// providing no functional benefit and allowing </span>
    <span class="token comment">// users to control internal details of A.</span>
    sync<span class="token punctuation">.</span>Mutex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> countingWriteCloser <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// Good: Write() is provided at the outer level for a specific purpose,</span>
    <span class="token comment">// and the work is delegated to the Write() of the inner type.</span>
    io<span class="token punctuation">.</span>WriteCloser
    count <span class="token builtin">int</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>countingWriteCloser<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>bs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    w<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token function">len</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span>
    <span class="token keyword">return</span> w<span class="token punctuation">.</span>WriteCloser<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Book <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// Bad: Pointers change the usefulness of zero values</span>
    io<span class="token punctuation">.</span>ReadWriter
    <span class="token comment">// other fields</span>
<span class="token punctuation">}</span>
<span class="token comment">// later</span>
<span class="token keyword">var</span> b Book
b<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment">// panic: nil pointer</span>
b<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// panic: nil pointer</span>
b<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// panic: nil pointer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Book <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// Good: Useful zero value</span>
    bytes<span class="token punctuation">.</span>Buffer
    <span class="token comment">// other fields</span>
<span class="token punctuation">}</span>
<span class="token comment">// later</span>
<span class="token keyword">var</span> b Book
b<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment">// ok</span>
b<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ok</span>
b<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    sync<span class="token punctuation">.</span>Mutex
    sync<span class="token punctuation">.</span>WaitGroup
    bytes<span class="token punctuation">.</span>Buffer
    url<span class="token punctuation">.</span>URL
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    mtx sync<span class="token punctuation">.</span>Mutex
    wg  sync<span class="token punctuation">.</span>WaitGroup
    buf bytes<span class="token punctuation">.</span>Buffer
    url url<span class="token punctuation">.</span>URL
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="nil-is-a-valid-slice" tabindex="-1"><a class="header-anchor" href="#nil-is-a-valid-slice"><span><code>nil</code> Is a Valid Slice</span></a></h3><p>When a slice is <code>nil</code>, it represents a slice with a length of 0.</p><ul><li>When returning an empty slice, it&#39;s better to return <code>nil</code> instead of an empty slice.</li></ul><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><ul><li>Use <code>len(s) == 0</code> to check for emptiness rather than <code>s != nil</code>.</li></ul><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s <span class="token operator">==</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><ul><li>Zero-value slices (declared using <code>var</code>) can be used immediately without calling <code>make()</code>.</li></ul><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>nums <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// or, nums := make([]int)</span>

<span class="token keyword">if</span> add1 <span class="token punctuation">{</span>
    nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> add2 <span class="token punctuation">{</span>
    nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>

<span class="token keyword">if</span> add1 <span class="token punctuation">{</span>
    nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> add2 <span class="token punctuation">{</span>
    nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="reduce-variable-scope" tabindex="-1"><a class="header-anchor" href="#reduce-variable-scope"><span>Reduce Variable Scope</span></a></h3><p>Minimize variable scope unless the variable is used elsewhere.</p><table><thead><tr><th>Bad</th><th>Good</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> data<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    err <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><p>By declaring the <code>err</code> variable within the <code>if</code> statement, its scope is limited to the <code>if</code> block. This avoids using the same variable name in the <code>else</code> statement.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>data<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>

<span class="token keyword">if</span> err <span class="token operator">:=</span> cfg<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="use-raw-strings-instead-of-escaped-strings" tabindex="-1"><a class="header-anchor" href="#use-raw-strings-instead-of-escaped-strings"><span>Use Raw Strings Instead of Escaped Strings</span></a></h3><p>When a string contains escape characters, prefer wrapping it in backticks (<code>==</code>), indicating that it&#39;s a raw string and doesn&#39;t require escaping.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>wantError <span class="token operator">:=</span> <span class="token string">&quot;unknown name:\\&quot;test\\&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>wantError <span class="token operator">:=</span> <span class="token string">\`unknown error:&quot;test&quot;\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="struct-initialization" tabindex="-1"><a class="header-anchor" href="#struct-initialization"><span>Struct Initialization</span></a></h3><h4 id="initialize-structs-using-field-names" tabindex="-1"><a class="header-anchor" href="#initialize-structs-using-field-names"><span>Initialize Structs Using Field Names</span></a></h4><p>When initializing a struct, it&#39;s better to include field names to avoid errors due to changes in the struct&#39;s fields.</p><table><thead><tr><th>Bad</th><th>Good</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>k <span class="token operator">:=</span> User<span class="token punctuation">{</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>k <span class="token operator">:=</span> User<span class="token punctuation">{</span>
    FirstName<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    LastName<span class="token punctuation">:</span>  <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>
    Admin<span class="token punctuation">:</span>     <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h4 id="omit-fields-with-zero-values" tabindex="-1"><a class="header-anchor" href="#omit-fields-with-zero-values"><span>Omit Fields with Zero Values</span></a></h4><p>If the fields being initialized have default zero values, you can omit the field names.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>user <span class="token operator">:=</span> User<span class="token punctuation">{</span>
    FirstName<span class="token punctuation">:</span>  <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    LastName<span class="token punctuation">:</span>   <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>
    MiddleName<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    Admin<span class="token punctuation">:</span>      <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>user <span class="token operator">:=</span> User<span class="token punctuation">{</span>
    FirstName<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    LastName<span class="token punctuation">:</span>  <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h4 id="if-initializing-a-struct-variable-with-all-zero-values-use-var" tabindex="-1"><a class="header-anchor" href="#if-initializing-a-struct-variable-with-all-zero-values-use-var"><span>If Initializing a Struct Variable with All Zero Values, Use <code>var</code></span></a></h4><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>user <span class="token operator">:=</span> User<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user User
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td></tr></tbody></table><h4 id="initialize-struct-pointers" tabindex="-1"><a class="header-anchor" href="#initialize-struct-pointers"><span>Initialize Struct Pointers</span></a></h4><p>When initializing a struct pointer, use the <code>&amp;</code> symbol instead of <code>new()</code>.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>sptr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>
sptr<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>sptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>T<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td></tr></tbody></table><h4 id="use-make-to-initialize-maps" tabindex="-1"><a class="header-anchor" href="#use-make-to-initialize-maps"><span>Use <code>make()</code> to Initialize Maps</span></a></h4><p>When initializing a map, if it has initial values, use <code>:=</code> instead of <code>make()</code>. If there are no initial values, use <code>make()</code>, and consider estimating the map&#39;s size by setting an initial capacity.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>T1<span class="token punctuation">]</span>T2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
m<span class="token punctuation">[</span>k1<span class="token punctuation">]</span> <span class="token operator">=</span> v1
m<span class="token punctuation">[</span>k2<span class="token punctuation">]</span> <span class="token operator">=</span> v2
m<span class="token punctuation">[</span>k3<span class="token punctuation">]</span> <span class="token operator">=</span> v3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>T1<span class="token punctuation">]</span>T2<span class="token punctuation">{</span>
  k1<span class="token punctuation">:</span> v1<span class="token punctuation">,</span>
  k2<span class="token punctuation">:</span> v2<span class="token punctuation">,</span>
  k3<span class="token punctuation">:</span> v3<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>T1<span class="token punctuation">]</span>T2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>T1<span class="token punctuation">]</span>T2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="if-defining-a-format-string-outside-printf-use-const" tabindex="-1"><a class="header-anchor" href="#if-defining-a-format-string-outside-printf-use-const"><span>If Defining a Format String Outside Printf, Use <code>const</code></span></a></h3><p>When defining a format string outside of <code>Printf</code>, it&#39;s recommended to use a <code>const</code> constant. This avoids duplicate format string definitions and helps <code>go vet</code> perform static analysis.</p><table><thead><tr><th>Bad</th><th>Good</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>msg <span class="token operator">:=</span> <span class="token string">&quot;unexpected values %v, %v\\n&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&quot;unexpected values %v, %v\\n&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h2 id="development-principles" tabindex="-1"><a class="header-anchor" href="#development-principles"><span>Development Principles</span></a></h2><h3 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling"><span>Error Handling</span></a></h3><h4 id="types-of-errors" tabindex="-1"><a class="header-anchor" href="#types-of-errors"><span>Types of Errors</span></a></h4><p>There are typically two types of errors:</p><ol><li><strong>Static Errors</strong>: These are errors created using <code>errors.New()</code>. They are often used for predefined errors where the error message remains constant.</li><li><strong>Dynamic Errors</strong>: These are errors created using <code>fmt.Errorf()</code> or custom error types. They are suitable for cases where the error message needs to be dynamic.</li></ol><div class="hint-container tip"><p class="hint-container-title">Error Matching</p><p>When checking error types, avoid using <code>==</code> for comparison. Instead, use <code>errors.Is()</code> or <code>errors.As()</code> for comparison. Also, create top-level error variables for better handling.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// package foo</span>
<span class="token keyword">var</span> ErrCouldNotOpen <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;could not open&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> ErrCouldNotOpen
<span class="token punctuation">}</span>

<span class="token comment">// package bar</span>

<span class="token keyword">if</span> err <span class="token operator">:=</span> foo<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> foo<span class="token punctuation">.</span>ErrCouldNotOpen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle the error</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unknown error&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="error-wrapping" tabindex="-1"><a class="header-anchor" href="#error-wrapping"><span>Error Wrapping</span></a></h4><p>We can wrap errors using <code>fmt.Errorf()</code> or <code>errors.Wrap()</code> to preserve the original error information while adding additional context.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Starting from Go 1.13, you can use <code>%w</code> as a formatting verb with <code>fmt.Errorf()</code>. This allows proper error type matching using <code>errors.Is()</code> and <code>errors.As()</code>. Avoid using <code>%v</code> as it loses error type information.</p></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s<span class="token punctuation">,</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>
        <span class="token string">&quot;new store: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="error-naming" tabindex="-1"><a class="header-anchor" href="#error-naming"><span>Error Naming</span></a></h4><p>For regular error variables, use names starting with <code>Err</code>, followed by a description of the error using camel case:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
  <span class="token comment">// Export these errors so users of this package can match them with errors.Is.</span>
  ErrBrokenLink <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;link is broken&quot;</span><span class="token punctuation">)</span>
  ErrCouldNotOpen <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;could not open&quot;</span><span class="token punctuation">)</span>

  <span class="token comment">// This error is not exported to avoid making it part of our public API.</span>
  errNotFound <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;not found&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For custom error types, consider using <code>Error</code> as a suffix:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Similarly, export this error so users of this package can match it with errors.As.</span>
<span class="token keyword">type</span> NotFoundError <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  File <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>NotFoundError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;file %q not found&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>File<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// This error is not exported to avoid making it part of our public API.</span>
<span class="token keyword">type</span> resolveError <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Path <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>resolveError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;resolve %q&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sequential-error-handling" tabindex="-1"><a class="header-anchor" href="#sequential-error-handling"><span>Sequential Error Handling</span></a></h4><p>When handling errors, use <code>errors.Is()</code> and <code>errors.As()</code> to determine the error type. Handle different error types differently, and if an error cannot be handled, explicitly return it to allow higher-level handling.</p><table><thead><tr><th>Description</th><th>Code Example</th></tr></thead><tbody><tr><td><p><strong>Not Recommended</strong>: Log and return the error</p><p>This approach may clutter application logs with similar error messages, but it doesn&#39;t provide significant benefits.</p></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>u<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token comment">// BAD: See description</span>
  log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Could not get user %q: %v&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><p><strong>Recommended</strong>: Wrap the error and return it</p><p>Higher-level callers in the stack will handle this error. Using <code>%w</code> ensures that they can match the error using <code>errors.Is()</code> or <code>errors.As()</code>.</p></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>u<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;get user %q: %w&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><p><strong>Recommended</strong>: Log the error and gracefully degrade</p><p>If the operation is not absolutely critical, we can provide a degraded but uninterrupted experience by recovering from it.</p></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">emitMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token comment">// Failure to write metrics should not</span>
  <span class="token comment">// break the application.</span>
  log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Could not emit metrics: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><p><strong>Recommended</strong>: Match the error and gracefully degrade</p><p>If the callee defines a specific error in its contract and the failure is recoverable, match that error case and degrade gracefully. For all other cases, wrap the error and return it.</p><p>Higher-level callers in the stack will handle other error cases.</p></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>tz<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getUserTimeZone</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ErrUserNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// User doesn&#39;t exist. Use UTC.</span>
    tz <span class="token operator">=</span> time<span class="token punctuation">.</span>UTC
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;get user %q: %w&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="type-assertions" tabindex="-1"><a class="header-anchor" href="#type-assertions"><span>Type Assertions</span></a></h3><p>When performing type assertions, always use the <code>ok</code> return value to avoid causing a panic.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>t <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">// May cause panic</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>t<span class="token punctuation">,</span> ok <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
  <span class="token comment">// Handle the error gracefully</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="minimize-the-use-of-panic" tabindex="-1"><a class="header-anchor" href="#minimize-the-use-of-panic"><span>Minimize the Use of <code>panic</code></span></a></h3><p>In production code, it&#39;s best to avoid using <code>panic</code>. <code>panic</code> is a major contributor to cascading failures. If you must use <code>panic</code>, make sure to handle it using <code>recover()</code>.</p><h3 id="use-atomic-operations" tabindex="-1"><a class="header-anchor" href="#use-atomic-operations"><span>Use Atomic Operations</span></a></h3><p>In concurrent programming, use the atomic operations provided by the <code>atomic</code> package to ensure thread safety. These operations guarantee that basic types like <code>int32</code> and <code>int64</code> can only be accessed by one goroutine at a time.</p><p>For other types, consider using channels or sync locks for control.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  running <span class="token builtin">int32</span>  <span class="token comment">// atomic</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f<span class="token operator">*</span> foo<span class="token punctuation">)</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">SwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">.</span>running<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
     <span class="token comment">// already running…</span>
     <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// start the Foo</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>foo<span class="token punctuation">)</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> f<span class="token punctuation">.</span>running <span class="token operator">==</span> <span class="token number">1</span>  <span class="token comment">// race!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  running atomic<span class="token punctuation">.</span>Bool
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>foo<span class="token punctuation">)</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> f<span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// already running…</span>
     <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// start the Foo</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>foo<span class="token punctuation">)</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> f<span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="avoid-embedding-types-in-public-structures" tabindex="-1"><a class="header-anchor" href="#avoid-embedding-types-in-public-structures"><span>Avoid Embedding Types in Public Structures</span></a></h3><p>Avoid embedding types in public structures. When multiple types are embedded, it can lead to a mix of exposed interfaces and variables, making management and configuration difficult. Additionally, conflicts may arise between identical variables and functions. There&#39;s no guarantee that future versions won&#39;t introduce conflicts.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// ConcreteList represents an entity list.</span>
<span class="token keyword">type</span> ConcreteList <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token operator">*</span>AbstractList
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// ConcreteList represents an entity list.</span>
<span class="token keyword">type</span> ConcreteList <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  list <span class="token operator">*</span>AbstractList
<span class="token punctuation">}</span>
<span class="token comment">// Add adds an entity to the list.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>ConcreteList<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>e Entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  l<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Remove removes an entity from the list.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>ConcreteList<span class="token punctuation">)</span> <span class="token function">Remove</span><span class="token punctuation">(</span>e Entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  l<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="avoid-using-built-in-names" tabindex="-1"><a class="header-anchor" href="#avoid-using-built-in-names"><span>Avoid Using Built-in Names</span></a></h3><p>When declaring variables, avoid using built-in names such as <code>len</code>, <code>cap</code>, <code>append</code>, <code>copy</code>, <code>new</code>, <code>make</code>, <code>close</code>, <code>delete</code>, <code>complex</code>, <code>real</code>, <code>imag</code>, <code>panic</code>, <code>recover</code>, <code>print</code>, <code>println</code>, <code>error</code>, <code>string</code>, <code>int</code>, <code>uint</code>, <code>uintptr</code>, <code>byte</code>, <code>rune</code>, <code>float32</code>, <code>float64</code>, <code>bool</code>, <code>true</code>, <code>false</code>, <code>iota</code>, <code>nil</code>, <code>true</code>, <code>false</code>, <code>iota</code>, <code>nil</code>, <code>append</code>, <code>cap</code>, <code>close</code>, <code>complex</code>, <code>copy</code>, <code>delete</code>, <code>imag</code>, <code>len</code>, <code>make</code>, <code>new</code>, <code>panic</code>, <code>print</code>, <code>println</code>, <code>real</code>, <code>recover</code>, <code>string</code>, <code>uint</code>, <code>uintptr</code>, <code>byte</code>, <code>rune</code>, <code>float32</code>, <code>float64</code>, <code>int</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>, <code>uint</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>, <code>uintptr</code>, <code>bool</code>, etc.</p><h3 id="avoid-using-init-functions" tabindex="-1"><a class="header-anchor" href="#avoid-using-init-functions"><span>Avoid Using <code>init</code> Functions</span></a></h3><p>The <code>init</code> function is automatically executed when a package is imported. However, since the order of execution of <code>init</code> functions is not guaranteed, initializing variables within an <code>init</code> function can lead to unpredictable results. Therefore, it&#39;s best to avoid using <code>init</code> functions.</p><div class="hint-container info"><p class="hint-container-title">When to Use \`init()\`</p><ul><li>When the assignment process during package import is complex and cannot be done with a single variable assignment</li><li>When using pluggable hook functions (e.g., <code>database/sql</code>)</li><li>For optimizing precomputed methods</li></ul></div><h3 id="preallocate-slice-capacity" tabindex="-1"><a class="header-anchor" href="#preallocate-slice-capacity"><span>Preallocate Slice Capacity</span></a></h3><p>If you can know the approximate amount of data in advance, you should configure capacity for <code>slice</code> in advance to reduce the number of <code>slice</code> expansions and improve performance.</p><table><thead><tr><th>Not Recommended</th><th>Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
  data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">{</span>
    data <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
  data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>
  <span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">{</span>
    data <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>BenchmarkBad-4    100000000    2.48s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td><td><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>BenchmarkGood-4   100000000    0.21s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="exiting-the-main-program-using-exit-or-fatal" tabindex="-1"><a class="header-anchor" href="#exiting-the-main-program-using-exit-or-fatal"><span>Exiting the Main Program Using <code>Exit</code> or <code>Fatal</code></span></a></h3><p>In the main program, if an error occurs, it&#39;s preferable to use <code>os.Exit</code> or <code>log.Fatal</code> to exit the program rather than using <code>panic</code>. While <code>panic</code> can cause the program to crash, <code>os.Exit</code> or <code>log.Fatal</code> will allow the program to exit gracefully. Additionally, errors should be propagated to the ultimate caller rather than handling fatal errors in every function.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>It&#39;s best to call either <code>os.Exit</code> or <code>log.Fatal*</code> <strong>only in</strong> <code>main()</code>. All other functions should return errors to the <code>main</code> program.</p><p>Reasons:</p><ul><li>Allowing too many functions to call <code>Fatal</code> can make it difficult to control the program flow.</li><li><code>Fatal</code> errors may prevent all tests from running.</li><li><code>Fatal</code> errors may prevent <code>defer</code> from executing.</li></ul></div><table><thead><tr><th>Bad</th><th>Good</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  body <span class="token operator">:=</span> <span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">readFile</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  b<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  body<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">readFile</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err
  <span class="token punctuation">}</span>
  b<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="declaring-tags-in-serialized-structs" tabindex="-1"><a class="header-anchor" href="#declaring-tags-in-serialized-structs"><span>Declaring Tags in Serialized Structs</span></a></h3><p>In serialized structs, it&#39;s essential to declare tags (such as <code>json</code> or <code>xml</code>) to ensure correct parsing during serialization and deserialization.</p><table><thead><tr><th>Recommended</th><th>Not Recommended</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Stock <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Price <span class="token builtin">int</span>
  Name  <span class="token builtin">string</span>
<span class="token punctuation">}</span>
bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>Stock<span class="token punctuation">{</span>
  Price<span class="token punctuation">:</span> <span class="token number">137</span><span class="token punctuation">,</span>
  Name<span class="token punctuation">:</span>  <span class="token string">&quot;UBER&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Stock <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Price <span class="token builtin">int</span>    <span class="token string">\`json:&quot;price&quot;\`</span>
  Name  <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span>
  <span class="token comment">// Safe to rename Name to Symbol.</span>
<span class="token punctuation">}</span>
bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>Stock<span class="token punctuation">{</span>
  Price<span class="token punctuation">:</span> <span class="token number">137</span><span class="token punctuation">,</span>
  Name<span class="token punctuation">:</span>  <span class="token string">&quot;UBER&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr></tbody></table><h3 id="pay-attention-to-goroutine-usage" tabindex="-1"><a class="header-anchor" href="#pay-attention-to-goroutine-usage"><span>Pay Attention to Goroutine Usage</span></a></h3><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When using goroutines, consider the following:</p><ul><li>Limit the number of goroutines to avoid unbounded creation.</li><li>Ensure goroutines have predictable termination times.</li><li>Provide a method for stopping goroutines.</li></ul></div><table><thead><tr><th>Bad</th><th>Good</th></tr></thead><tbody><tr><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">{</span>
    <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td><td><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
  stop <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Signal to stop the goroutine</span>
  done <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Signal that our goroutine has exited</span>
<span class="token punctuation">)</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
  ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
  <span class="token keyword">defer</span> ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">{</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>tick<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
      <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>stop<span class="token punctuation">:</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Other code...</span>
<span class="token function">close</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span>  <span class="token comment">// Signal the goroutine to stop</span>
<span class="token operator">&lt;-</span>done       <span class="token comment">// Wait for it to exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></td></tr><tr><td><p>This goroutine cannot be stopped. It will keep running until the application exits.</p></td><td><p>This goroutine can be stopped using <code>close(stop)</code>, and we can wait for it to exit using <code>&lt;-done</code>.</p></td></tr></tbody></table><h4 id="waiting-for-goroutines-to-exit" tabindex="-1"><a class="header-anchor" href="#waiting-for-goroutines-to-exit"><span>Waiting for Goroutines to Exit</span></a></h4><p>When a goroutine is executing, use a mechanism to ensure that the main program doesn&#39;t exit prematurely. Otherwise, it might terminate the goroutine.</p><p>Two common approaches are:</p><ol><li><p>Use <code>sync.WaitGroup</code>: If you need to wait for multiple goroutines, use this approach.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
  wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// To wait for all to finish:</span>
wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Add another <code>chan struct{}</code> that the goroutine closes when it&#39;s done. If you have only one goroutine, use this approach.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// To wait for the goroutine to finish:</span>
<span class="token operator">&lt;-</span>done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="avoid-using-goroutines-in-init" tabindex="-1"><a class="header-anchor" href="#avoid-using-goroutines-in-init"><span>Avoid Using Goroutines in <code>init()</code></span></a></h3><p>Using goroutines in <code>init()</code> functions can complicate program initialization. Since <code>init()</code> functions execute when the program starts, and goroutines run asynchronously, the initialization order may become unpredictable.</p><h2 id="performance-optimization" tabindex="-1"><a class="header-anchor" href="#performance-optimization"><span>Performance Optimization</span></a></h2><h3 id="prefer-strconv-over-fmt" tabindex="-1"><a class="header-anchor" href="#prefer-strconv-over-fmt"><span>Prefer <code>strconv</code> Over <code>fmt</code></span></a></h3><p>When converting strings, prefer using the <code>strconv</code> package over <code>fmt</code>. The <code>fmt</code> package is heavier, while <code>strconv</code> is lighter. <code>strconv</code> provides faster conversion and requires fewer resources.</p><h3 id="specify-map-and-slice-capacities" tabindex="-1"><a class="header-anchor" href="#specify-map-and-slice-capacities"><span>Specify Map and Slice Capacities</span></a></h3><p>If you know the approximate capacity in advance, preallocate it to avoid unnecessary memory allocation and automatic resizing.</p>`,129);function v(m,g){const a=t("ExternalLinkIcon");return o(),i("div",null,[n("div",r,[d,n("p",null,[s("These guidelines are based on "),n("a",u,[s("uber-go"),p(a)]),s(".")])]),k])}const f=e(l,[["render",v],["__file","1-golang.html.vue"]]),y=JSON.parse('{"path":"/en/guide/standard/1-golang.html","title":"Golang Dev Specifications","lang":"en-US","frontmatter":{"order":1,"title":"Golang Dev Specifications","icon":"file-icons:go-old","head":[["meta",{"name":"keywords","content":"golang, development, specifications"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goguide.ryansu.tech/guide/standard/1-golang.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/en/guide/standard/1-golang.html"}],["meta",{"property":"og:site_name","content":"Go Guide"}],["meta",{"property":"og:title","content":"Golang Dev Specifications"}],["meta",{"property":"og:description","content":"Source These guidelines are based on uber-go. Basic Guidelines Limit Line Length Go code lines should be limited to 80 characters. This helps improve readability in both smaller..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-03T14:09:00.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-05-03T14:09:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Golang Dev Specifications\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-03T14:09:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"Source These guidelines are based on uber-go. Basic Guidelines Limit Line Length Go code lines should be limited to 80 characters. This helps improve readability in both smaller..."},"headers":[{"level":2,"title":"Basic Guidelines","slug":"basic-guidelines","link":"#basic-guidelines","children":[{"level":3,"title":"Limit Line Length","slug":"limit-line-length","link":"#limit-line-length","children":[]},{"level":3,"title":"Group Related Declarations, Avoid Unrelated Ones","slug":"group-related-declarations-avoid-unrelated-ones","link":"#group-related-declarations-avoid-unrelated-ones","children":[]},{"level":3,"title":"Single Variable Declarations","slug":"single-variable-declarations","link":"#single-variable-declarations","children":[]},{"level":3,"title":"Import Grouping","slug":"import-grouping","link":"#import-grouping","children":[]},{"level":3,"title":"Import Aliases","slug":"import-aliases","link":"#import-aliases","children":[]},{"level":3,"title":"Package Names","slug":"package-names","link":"#package-names","children":[]},{"level":3,"title":"Function Names","slug":"function-names","link":"#function-names","children":[]},{"level":3,"title":"Function Ordering","slug":"function-ordering","link":"#function-ordering","children":[]},{"level":3,"title":"Reduce Nesting","slug":"reduce-nesting","link":"#reduce-nesting","children":[]},{"level":3,"title":"Minimize Unnecessary else Blocks","slug":"minimize-unnecessary-else-blocks","link":"#minimize-unnecessary-else-blocks","children":[]},{"level":3,"title":"Top-Level Variable Declarations","slug":"top-level-variable-declarations","link":"#top-level-variable-declarations","children":[]},{"level":3,"title":"Use _ as a Prefix for Unexported Top-Level Constants and Variables","slug":"use-as-a-prefix-for-unexported-top-level-constants-and-variables","link":"#use-as-a-prefix-for-unexported-top-level-constants-and-variables","children":[]},{"level":3,"title":"Separate Embedded Types in Structs with an Empty Line","slug":"separate-embedded-types-in-structs-with-an-empty-line","link":"#separate-embedded-types-in-structs-with-an-empty-line","children":[]},{"level":3,"title":"nil Is a Valid Slice","slug":"nil-is-a-valid-slice","link":"#nil-is-a-valid-slice","children":[]},{"level":3,"title":"Reduce Variable Scope","slug":"reduce-variable-scope","link":"#reduce-variable-scope","children":[]},{"level":3,"title":"Use Raw Strings Instead of Escaped Strings","slug":"use-raw-strings-instead-of-escaped-strings","link":"#use-raw-strings-instead-of-escaped-strings","children":[]},{"level":3,"title":"Struct Initialization","slug":"struct-initialization","link":"#struct-initialization","children":[{"level":4,"title":"Initialize Structs Using Field Names","slug":"initialize-structs-using-field-names","link":"#initialize-structs-using-field-names","children":[]},{"level":4,"title":"Omit Fields with Zero Values","slug":"omit-fields-with-zero-values","link":"#omit-fields-with-zero-values","children":[]},{"level":4,"title":"If Initializing a Struct Variable with All Zero Values, Use var","slug":"if-initializing-a-struct-variable-with-all-zero-values-use-var","link":"#if-initializing-a-struct-variable-with-all-zero-values-use-var","children":[]},{"level":4,"title":"Initialize Struct Pointers","slug":"initialize-struct-pointers","link":"#initialize-struct-pointers","children":[]},{"level":4,"title":"Use make() to Initialize Maps","slug":"use-make-to-initialize-maps","link":"#use-make-to-initialize-maps","children":[]}]},{"level":3,"title":"If Defining a Format String Outside Printf, Use const","slug":"if-defining-a-format-string-outside-printf-use-const","link":"#if-defining-a-format-string-outside-printf-use-const","children":[]}]},{"level":2,"title":"Development Principles","slug":"development-principles","link":"#development-principles","children":[{"level":3,"title":"Error Handling","slug":"error-handling","link":"#error-handling","children":[{"level":4,"title":"Types of Errors","slug":"types-of-errors","link":"#types-of-errors","children":[]},{"level":4,"title":"Error Wrapping","slug":"error-wrapping","link":"#error-wrapping","children":[]},{"level":4,"title":"Error Naming","slug":"error-naming","link":"#error-naming","children":[]},{"level":4,"title":"Sequential Error Handling","slug":"sequential-error-handling","link":"#sequential-error-handling","children":[]}]},{"level":3,"title":"Type Assertions","slug":"type-assertions","link":"#type-assertions","children":[]},{"level":3,"title":"Minimize the Use of panic","slug":"minimize-the-use-of-panic","link":"#minimize-the-use-of-panic","children":[]},{"level":3,"title":"Use Atomic Operations","slug":"use-atomic-operations","link":"#use-atomic-operations","children":[]},{"level":3,"title":"Avoid Embedding Types in Public Structures","slug":"avoid-embedding-types-in-public-structures","link":"#avoid-embedding-types-in-public-structures","children":[]},{"level":3,"title":"Avoid Using Built-in Names","slug":"avoid-using-built-in-names","link":"#avoid-using-built-in-names","children":[]},{"level":3,"title":"Avoid Using init Functions","slug":"avoid-using-init-functions","link":"#avoid-using-init-functions","children":[]},{"level":3,"title":"Preallocate Slice Capacity","slug":"preallocate-slice-capacity","link":"#preallocate-slice-capacity","children":[]},{"level":3,"title":"Exiting the Main Program Using Exit or Fatal","slug":"exiting-the-main-program-using-exit-or-fatal","link":"#exiting-the-main-program-using-exit-or-fatal","children":[]},{"level":3,"title":"Declaring Tags in Serialized Structs","slug":"declaring-tags-in-serialized-structs","link":"#declaring-tags-in-serialized-structs","children":[]},{"level":3,"title":"Pay Attention to Goroutine Usage","slug":"pay-attention-to-goroutine-usage","link":"#pay-attention-to-goroutine-usage","children":[{"level":4,"title":"Waiting for Goroutines to Exit","slug":"waiting-for-goroutines-to-exit","link":"#waiting-for-goroutines-to-exit","children":[]}]},{"level":3,"title":"Avoid Using Goroutines in init()","slug":"avoid-using-goroutines-in-init","link":"#avoid-using-goroutines-in-init","children":[]}]},{"level":2,"title":"Performance Optimization","slug":"performance-optimization","link":"#performance-optimization","children":[{"level":3,"title":"Prefer strconv Over fmt","slug":"prefer-strconv-over-fmt","link":"#prefer-strconv-over-fmt","children":[]},{"level":3,"title":"Specify Map and Slice Capacities","slug":"specify-map-and-slice-capacities","link":"#specify-map-and-slice-capacities","children":[]}]}],"git":{"createdTime":1714218990000,"updatedTime":1714745340000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":4}]},"readingTime":{"minutes":13.65,"words":4095},"filePathRelative":"en/guide/standard/1-golang.md","localizedDate":"April 27, 2024","autoDesc":true,"excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">Source</p>\\n<p>These guidelines are based on <a href=\\"https://github.com/xxjwxc/uber_go_guide_cn\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">uber-go</a>.</p>\\n</div>\\n<h2>Basic Guidelines</h2>\\n<h3>Limit Line Length</h3>\\n<p>Go code lines should be limited to 80 characters. This helps improve readability in both smaller and larger windows.</p>"}');export{f as comp,y as data};
