import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as t}from"./app-BBtVOMpO.js";const e={},o=t(`<h2 id="what-is-a-closure" tabindex="-1"><a class="header-anchor" href="#what-is-a-closure"><span>What Is a Closure?</span></a></h2><div class="hint-container info"><p class="hint-container-title">What Is a Closure?</p><p>A closure is an entity composed of a function and the associated referencing environment. In simple terms, a closure is a function that references variables outside its own scope. The lifetime of this function can extend beyond the scope in which it was created.</p><p>Example</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	count <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token comment">// Initialize a local variable within the function</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			i<span class="token operator">++</span> <span class="token comment">// Increment the local variable</span>
			<span class="token keyword">return</span> i
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Output</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that <code>i</code> is a local variable within the <code>count</code> function. Executing the function twice might lead one to expect the output to be <code>1</code> both times. However, the actual output is <code>1</code> followed by <code>2</code>. The reason is that when assigning the closure to a variable (<code>count</code>), it retains a pointer to <code>i</code>. As a result, <code>i</code> is preserved beyond the function&#39;s execution due to escape analysis. <strong>If the function is not assigned to a variable, executing it multiple times will yield consistent results.</strong></p></div><h2 id="use-cases" tabindex="-1"><a class="header-anchor" href="#use-cases"><span>Use Cases</span></a></h2><h3 id="middleware" tabindex="-1"><a class="header-anchor" href="#middleware"><span>Middleware</span></a></h3><p>When defining web middleware, we often encounter code like the following:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeHandler</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m <span class="token operator">:=</span> validPath<span class="token punctuation">.</span><span class="token function">FindStringSubmatch</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
        <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            http<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token function">fn</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// If no issues, continue executing fn</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we return an <code>http.HandlerFunc</code> that calls the <code>fn</code> function. This allows us to achieve chainable operationsâ€”executing middleware code while still continuing with the main function.</p><h2 id="state-sharing" tabindex="-1"><a class="header-anchor" href="#state-sharing"><span>State Sharing</span></a></h2><p>Closures can be used to share state across multiple invocations of a function. A common example is an iterator:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	num <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>

	iterator <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			i<span class="token operator">++</span>
			<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	iter <span class="token operator">:=</span> <span class="token function">iterator</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">iter</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>

		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Output</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>
<span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="callback-functions" tabindex="-1"><a class="header-anchor" href="#callback-functions"><span>Callback Functions</span></a></h2><p>We can also pass callback functions as parameters:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">GetData</span><span class="token punctuation">(</span>data <span class="token builtin">int</span><span class="token punctuation">,</span> callback <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		result <span class="token operator">:=</span> data <span class="token operator">+</span> <span class="token number">2</span>
		<span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, after passing in <code>data</code>, the <code>callback</code> can access <code>result</code> for additional callback operations.</p><h2 id="function-factories" tabindex="-1"><a class="header-anchor" href="#function-factories"><span>Function Factories</span></a></h2><p>Closures allow us to create function factories by returning functions based on input parameters:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">CalculationFactory</span><span class="token punctuation">(</span>operation <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> operation <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">+</span> b
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> <span class="token string">&quot;subtract&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">-</span> b
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> <span class="token string">&quot;multiply&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">*</span> b
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> <span class="token string">&quot;divide&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> b <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> a <span class="token operator">/</span> b
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By passing in <code>&quot;add&quot;</code>, you can obtain an addition function, and by passing in <code>&quot;divide&quot;</code>, you can obtain a division function.</p>`,18),p=[o];function c(i,l){return a(),s("div",null,p)}const d=n(e,[["render",c],["__file","50-closure.html.vue"]]),k=JSON.parse(`{"path":"/en/guide/concepts/golang/50-closure.html","title":"Closure","lang":"en-US","frontmatter":{"order":50,"title":"Closure","icon":"line-md:sun-rising-twotone-loop","head":[["meta",{"name":"keywords","content":"Go, Golang, closure, function factory, iterator"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goguide.ryansu.tech/guide/concepts/golang/50-closure.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/en/guide/concepts/golang/50-closure.html"}],["meta",{"property":"og:site_name","content":"Go Guide"}],["meta",{"property":"og:title","content":"Closure"}],["meta",{"property":"og:description","content":"What Is a Closure? What Is a Closure? A closure is an entity composed of a function and the associated referencing environment. In simple terms, a closure is a function that ref..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-21T12:50:27.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-05-21T12:50:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Closure\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-21T12:50:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"What Is a Closure? What Is a Closure? A closure is an entity composed of a function and the associated referencing environment. In simple terms, a closure is a function that ref..."},"headers":[{"level":2,"title":"What Is a Closure?","slug":"what-is-a-closure","link":"#what-is-a-closure","children":[]},{"level":2,"title":"Use Cases","slug":"use-cases","link":"#use-cases","children":[{"level":3,"title":"Middleware","slug":"middleware","link":"#middleware","children":[]}]},{"level":2,"title":"State Sharing","slug":"state-sharing","link":"#state-sharing","children":[]},{"level":2,"title":"Callback Functions","slug":"callback-functions","link":"#callback-functions","children":[]},{"level":2,"title":"Function Factories","slug":"function-factories","link":"#function-factories","children":[]}],"git":{"createdTime":1716295827000,"updatedTime":1716295827000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":1}]},"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"en/guide/concepts/golang/50-closure.md","localizedDate":"May 21, 2024","autoDesc":true,"excerpt":"<h2>What Is a Closure?</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">What Is a Closure?</p>\\n<p>A closure is an entity composed of a function and the associated referencing environment. In simple terms, a closure is a function that references variables outside its own scope. The lifetime of this function can extend beyond the scope in which it was created.</p>\\n<p>Example</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tcount <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">int</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\ti <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span> <span class=\\"token comment\\">// Initialize a local variable within the function</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">int</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\ti<span class=\\"token operator\\">++</span> <span class=\\"token comment\\">// Increment the local variable</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> i\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">count</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">count</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// Output</span>\\n<span class=\\"token comment\\">// 1</span>\\n<span class=\\"token comment\\">// 2</span>\\n</code></pre></div><p>Notice that <code>i</code> is a local variable within the <code>count</code> function. Executing the function twice might lead one to expect the output to be <code>1</code> both times. However, the actual output is <code>1</code> followed by <code>2</code>. The reason is that when assigning the closure to a variable (<code>count</code>), it retains a pointer to <code>i</code>. As a result, <code>i</code> is preserved beyond the function's execution due to escape analysis. <strong>If the function is not assigned to a variable, executing it multiple times will yield consistent results.</strong></p>\\n</div>"}`);export{d as comp,k as data};
