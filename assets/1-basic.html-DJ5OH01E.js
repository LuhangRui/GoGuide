import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as e}from"./app-BSiqoa40.js";const t={},i=e(`<h2 id="pointer" tabindex="-1"><a class="header-anchor" href="#pointer"><span>Pointer</span></a></h2><h3 id="what-is-a-pointer-and-a-pointer-variable" tabindex="-1"><a class="header-anchor" href="#what-is-a-pointer-and-a-pointer-variable"><span>What is a pointer and a pointer variable?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p>Ordinary variables store data, while pointer variables store the address of the data.</p><ul><li><p>Learning about pointers mainly involves two operators <code>&amp;</code> and <code>*</code>.</p></li><li><p><code>&amp;</code>: Address operator, used to get the address from a variable</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Define an ordinary variable and print it</span>
num <span class="token operator">:=</span> <span class="token number">99</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">//output: 99</span>

ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>num
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token comment">//output: for example: 0xc000086020</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>*</code>: Dereference operator, used to get data from an address</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>tamp <span class="token operator">:=</span> <span class="token operator">*</span>ptr
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>tamp<span class="token punctuation">)</span> <span class="token comment">//output: 99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="why-use-pointers" tabindex="-1"><a class="header-anchor" href="#why-use-pointers"><span>Why use pointers?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p><strong>Significance One: Easy Coding</strong></p><p>Pointers play an important role in data structures. Through pointers, we can create complex data structures such as linked lists, trees, and graphs. Pointers can easily access and manipulate relationships between nodes in data structures, thereby achieving efficient data storage and retrieval.</p><p>Pointers can pass references of data between functions, instead of copying the entire data. This can save memory space and improve the execution efficiency of the program. By passing pointers, functions can directly modify the original data without needing to return a value.</p><p><strong>Significance Two: Save Memory</strong></p><p>Pointers can directly access and modify data in memory. Through pointers, we can dynamically allocate memory at runtime to meet the needs of the program, and release memory when it is not needed, avoiding memory leaks.</p><p>Pointers can dynamically allocate memory during program execution. Through dynamic memory allocation, we can allocate and release memory as needed, thereby improving the flexibility and efficiency of the program.</p></details><h3 id="which-objects-can-be-addressed-and-which-cannot" tabindex="-1"><a class="header-anchor" href="#which-objects-can-be-addressed-and-which-cannot"><span>Which objects can be addressed and which cannot?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p>The following objects can be addressed using <code>&amp;</code> to obtain their memory addresses:</p><ul><li>Variables</li><li>Pointers</li><li>Arrays, slices, and their internal data</li><li>Struct pointers</li><li>Map</li></ul><p>The following objects cannot be addressed:</p><ul><li>Structs</li><li>Constants</li><li>Literals</li><li>Functions</li><li>Non-pointer elements of maps</li><li>Array literals</li></ul></details><h2 id="literal" tabindex="-1"><a class="header-anchor" href="#literal"><span>Literal</span></a></h2><h3 id="what-does-literal-mean" tabindex="-1"><a class="header-anchor" href="#what-does-literal-mean"><span>What does literal mean?</span></a></h3><details class="hint-container details"><summary>Answer</summary><ul><li>The text of these basic type values below is a basic type literal.</li></ul><table><thead><tr><th>Basic Type</th><th>Collection</th></tr></thead><tbody><tr><td>Boolean Type</td><td><code>bool</code></td></tr><tr><td>String Type</td><td><code>string</code></td></tr><tr><td>Complex Type</td><td><code>complex64</code> <code>complex128</code></td></tr><tr><td>Float Type</td><td><code>float32</code> <code>float64</code></td></tr><tr><td>Integer Type</td><td><code>int8</code> <code>uint8</code> <code>int16</code> <code>uint16</code> <code>int32</code> <code>uint32</code> <code>int64</code> <code>uint64</code> <code>int</code> <code>uint</code> <code>uintptr</code></td></tr></tbody></table><p>For example:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token string">&quot;hello world&quot;</span> <span class="token comment">// &quot;hello world&quot; is the literal value</span>
n <span class="token operator">:=</span> <span class="token number">10</span> <span class="token comment">// 10 is the literal value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>An unnamed constant is a special kind of constant that doesn&#39;t have a specific name. This kind of constant only has a value, and there is no variable name associated with it. The following strings are string literals, which are <strong>unnamed constants</strong>.</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&quot;helloï¼Œworld&quot;   &quot;123&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="can-different-literals-have-the-same-value" tabindex="-1"><a class="header-anchor" href="#can-different-literals-have-the-same-value"><span>Can different literals have the same value?</span></a></h3><details class="hint-container details"><summary>Answer</summary><ul><li>A value can be represented by multiple literals. For example, the decimal value 21 can be represented by three different literals</li></ul><table><thead><tr><th>Decimal</th><th>Octal</th><th>Binary</th><th>Hexadecimal</th></tr></thead><tbody><tr><td>21</td><td>0o25</td><td>0b0001 0101</td><td>0x15</td></tr></tbody></table><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0o25</span><span class="token punctuation">)</span>     
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0x15</span> <span class="token punctuation">)</span>    
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0b0001</span> <span class="token number">0101</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token comment">// The result of the run shows that they are equal</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="what-is-the-difference-between-a-literal-and-a-variable" tabindex="-1"><a class="header-anchor" href="#what-is-the-difference-between-a-literal-and-a-variable"><span>What is the difference between a literal and a variable?</span></a></h3><details class="hint-container details"><summary>Answer</summary><ul><li><p>A literal is an unnamed constant, just like a constant, it is not addressable.</p></li><li><p>For example</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;fast&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> cannot take the address of <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>If you do not use a variable name to hold it, the text value of a string returned by a function, which is a string literal, and this kind of literal is not addressable, an error will occur. To use <code>&amp;</code> to address, you must use a variable name to hold it.</p></li><li><p>But the following is correct</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;fast&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="what-is-a-composite-literal" tabindex="-1"><a class="header-anchor" href="#what-is-a-composite-literal"><span>What is a composite literal?</span></a></h3><details class="hint-container details"><summary>Answer</summary><ul><li><p>A composite literal is a way to define and initialize an object together. In other words, a composite literal is used to construct values for structures, arrays, slices, and maps, and each time a new value is created. They are followed by the type of the literal, curly braces, and a list of elements. Each element can optionally be preceded by a related key.</p></li><li><p>Using composite literals can be simpler, and the composite literal methods for structures, arrays, slices, and maps are as follows.</p></li><li><p>Structures use composite literals to define and initialize</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> man <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	nationality <span class="token builtin">string</span>
	height <span class="token builtin">int</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Declare and assign properties</span>
	su <span class="token operator">:=</span> man<span class="token punctuation">{</span>
		nationality<span class="token punctuation">:</span>   <span class="token string">&quot;China&quot;</span><span class="token punctuation">,</span>
		height<span class="token punctuation">:</span>    <span class="token number">180</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Structures use the cumbersome conventional method as follows</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> man <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	nationality <span class="token builtin">string</span>
	height <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Declare object</span>
	<span class="token keyword">var</span> su man
	<span class="token comment">// Assign properties</span>
	su<span class="token punctuation">.</span>nationality <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span>
	su<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">180</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Map uses composite literal method for definition and initialization as follows</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token string">&quot;math&quot;</span><span class="token punctuation">:</span> <span class="token number">96</span><span class="token punctuation">,</span>
	<span class="token string">&quot;Chinese&quot;</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Similarly, arrays use composite literal method for definition and initialization as follows</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>colours <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;black&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;white&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Slices use composite literal method as follows</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">}</span> 
<span class="token comment">// The capacity and length of the slice will be automatically filled in</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h2><h3 id="what-is-the-difference-between-rune-and-byte-in-go" tabindex="-1"><a class="header-anchor" href="#what-is-the-difference-between-rune-and-byte-in-go"><span>What is the difference between <code>rune</code> and <code>byte</code> in Go?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p>In Go language, <code>byte</code> and <code>rune</code> are both types used to represent characters, but there are some differences between them:</p><h4 id="different-types" tabindex="-1"><a class="header-anchor" href="#different-types"><span>Different types:</span></a></h4><ul><li>byte: byte, is an alias type of uint8</li><li>rune: character, is an alias type of int32</li></ul><h4 id="different-stored-characters" tabindex="-1"><a class="header-anchor" href="#different-stored-characters"><span>Different stored characters:</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//byte is used to represent ASCII code characters, can only store characters within the range of 0-255.</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;Y&#39;</span>  <span class="token comment">// ASCII code character</span>

<span class="token comment">//rune is used to represent Unicode characters, can store any Unicode character.</span>
<span class="token keyword">var</span> b <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;é…¥&#39;</span>  <span class="token comment">// Unicode character</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="different-byte-sizes-occupied-byte-occupies-1-byte-rune-occupies-4-bytes" tabindex="-1"><a class="header-anchor" href="#different-byte-sizes-occupied-byte-occupies-1-byte-rune-occupies-4-bytes"><span>Different byte sizes occupied: byte occupies 1 byte, rune occupies 4 bytes.</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;unsafe&quot;</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;Y&#39;</span>
<span class="token keyword">var</span> b <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;é…¥&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;a occupies %d bytes\\nb occupies %d bytes&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Output: a occupies 1 byte b occupies 4 bytes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="different-character-ranges-represented" tabindex="-1"><a class="header-anchor" href="#different-character-ranges-represented"><span>Different character ranges represented:</span></a></h4><p>Since the value that the byte type can represent is limited, there are only 2^8=256. So if you want to represent Chinese, you can only use the rune type.</p></details><p>Here is the English translation of your text:</p><h3 id="what-are-deep-copy-and-shallow-copy-in-golang" tabindex="-1"><a class="header-anchor" href="#what-are-deep-copy-and-shallow-copy-in-golang"><span>What are deep copy and shallow copy in golang?</span></a></h3><details class="hint-container details"><summary>Answer</summary><ul><li>What is copying?</li></ul><p>The simplest form of copying is as follows</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token number">648</span>
b <span class="token operator">:=</span> a    <span class="token comment">//copy a to b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>So what are deep copy and shallow copy?</li></ul><p>Deep and shallow copying also depend on the type.</p><table><thead><tr><th>Type</th><th>Details</th></tr></thead><tbody><tr><td>Reference type</td><td><code>Slice</code> <code>Map</code> <code>Channels</code> <code>Interfaces</code> <code>Functions</code></td></tr><tr><td>Value type</td><td><code>String</code> <code>Array</code> <code>Int</code> <code>Struct</code> <code>Float</code> <code>Bool</code></td></tr></tbody></table><p>The effects of copying two types are different. Let&#39;s first talk about the value type that we are more familiar with. As can be seen from the question of what is copying, if it is a value type, a new space will be allocated to store the value every time it is copied, and the two copied value types are independent and do not affect each other.</p><ul><li>Take the reference type slice as an example to talk about deep copy and shallow copy</li></ul><table><thead><tr><th>Type</th><th>Example</th></tr></thead><tbody><tr><td>Deep copy</td><td>copy(slice1, slice2)</td></tr><tr><td>Shallow copy</td><td>slice1 = slice2</td></tr></tbody></table><p><code>Shallow copy</code> only changes the pointer, as follows</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> slice1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>     
	<span class="token keyword">var</span> slice2 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">//slice initialization</span>
	slice2 <span class="token operator">=</span> slice1    <span class="token comment">//shallow copy changes the pointer of slice2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span> 
	slice2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">648</span>  <span class="token comment">// change slice2[0], slice1[0] also changes</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span> 
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output is as follows</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">648</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">648</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>So for slices, <code>shallow copy</code> changes its address.</p></li><li><p>And <code>deep copy</code> will change the array value in the memory of the address, as follows</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> slice1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>     
	<span class="token keyword">var</span> slice2 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//slice initialization</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>slice2<span class="token punctuation">,</span> slice1<span class="token punctuation">)</span>  <span class="token comment">//deep copy will change the array value in the memory of the address</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span> 
	slice2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">648</span>  <span class="token comment">// change slice2[0], slice1[0] remains unchanged</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span> 
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">648</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="what-s-the-difference-between-make-and-new" tabindex="-1"><a class="header-anchor" href="#what-s-the-difference-between-make-and-new"><span>What&#39;s the difference between <code>make</code> and <code>new</code>?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p><code>new</code> is used to allocate memory for any type and return a pointer to that type, initializing the value to zero.</p><blockquote><p><code>new</code> is not commonly used</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
	n <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 0xc00008a030</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token comment">// &quot;&quot;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 0xc00000a0d8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>make</code> is mainly used for initializing <code>slices</code>, <code>map</code>, and <code>channel</code>.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// map[]</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="what-s-the-difference-between-arrays-and-slices" tabindex="-1"><a class="header-anchor" href="#what-s-the-difference-between-arrays-and-slices"><span>What&#39;s the difference between arrays and slices?</span></a></h3><details class="hint-container details"><summary>Answer</summary><ul><li>The length of an array is fixed, determined at creation, and cannot be changed. The length of a slice is dynamic and will automatically expand based on the data added.</li><li>When passing parameters in functions, data is passed by value, while slices are passed by reference.</li><li>Slices have a capacity (capacity) parameter, arrays do not.</li></ul></details><h3 id="if-for-range-adds-data-at-the-same-time-will-for-range-execute-indefinitely" tabindex="-1"><a class="header-anchor" href="#if-for-range-adds-data-at-the-same-time-will-for-range-execute-indefinitely"><span>If <code>for range</code> adds data at the same time, will <code>for range</code> execute indefinitely?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p>No, when executing <code>for range</code>, what is actually traversed is a copy of the variable, so changing the traversed variable will not have an impact.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>

	<span class="token keyword">for</span>  <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> n <span class="token punctuation">{</span>
		n <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// Result: [1 2 3 1 2 3]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="what-is-the-execution-order-of-multiple-defers" tabindex="-1"><a class="header-anchor" href="#what-is-the-execution-order-of-multiple-defers"><span>What is the execution order of multiple defers?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p>The execution order is similar to a stack, first in, last out.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Result:</span>
<span class="token comment">// 3</span>
<span class="token comment">// 2</span>
<span class="token comment">// 1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="what-is-data-overflow" tabindex="-1"><a class="header-anchor" href="#what-is-data-overflow"><span>What is data overflow?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p>When using numeric types, if the data reaches the maximum value, the next data will overflow, such as <code>uint</code> will start from 0 after overflow, <code>int</code> will become negative after overflow.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;math&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> n <span class="token builtin">int8</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>MaxInt8
	<span class="token keyword">var</span> m <span class="token builtin">uint8</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>MaxUint8

	n <span class="token operator">+=</span> <span class="token number">2</span>
	m <span class="token operator">+=</span> <span class="token number">1</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// -127</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How to avoid?</p><ul><li>Use uint for positive numbers first, the range is larger</li><li>Add judgment code to determine whether it overflows</li></ul></details><h3 id="should-function-parameters-use-value-or-pointer" tabindex="-1"><a class="header-anchor" href="#should-function-parameters-use-value-or-pointer"><span>Should function parameters use value or pointer?</span></a></h3><details class="hint-container details"><summary>Answer</summary><ul><li>Value transfer</li></ul><p>Generally speaking, value transfer can be used for common types. The advantage of value transfer is that modifications to the value within the function will not affect the original variable and will not cause concurrency problems. The disadvantage is that value transfer will copy a copy of the corresponding variable, which will occupy more memory. If the input structure is very large, it is not suitable to use value transfer.</p><ul><li>Pointer and reference transfer</li></ul><p>The advantage of using pointer transfer is that it directly transfers the address of the variable, without the need for extra space. The disadvantage is that data modification during concurrent operations will affect the original data. Passing in a slice is actually passing the pointer of the slice to avoid repeated copying. If an array is passed in, it is value transfer, and a copy will be made.</p></details><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><h3 id="can-an-uninitialized-map-read-a-key" tabindex="-1"><a class="header-anchor" href="#can-an-uninitialized-map-read-a-key"><span>Can an uninitialized Map read a key?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p>Yes, an uninitialized <code>map</code> that hasn&#39;t undergone <code>make</code> initialization will return the zero value of the current type for any <code>key</code> read.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Output:</span>
<span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="what-happens-if-you-assign-a-value-to-an-uninitialized-map" tabindex="-1"><a class="header-anchor" href="#what-happens-if-you-assign-a-value-to-an-uninitialized-map"><span>What happens if you assign a value to an uninitialized Map?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p>It will trigger a <code>panic</code> exception error.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token comment">// Output:</span>
<span class="token comment">// panic: assignment to entry in nil map</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="what-happens-if-you-delete-a-key-from-an-uninitialized-map" tabindex="-1"><a class="header-anchor" href="#what-happens-if-you-delete-a-key-from-an-uninitialized-map"><span>What happens if you delete a key from an uninitialized Map?</span></a></h3><details class="hint-container details"><summary>Answer</summary><p>In earlier versions, performing a <code>delete</code> operation on an uninitialized <code>map</code> would throw a <code>panic</code> error. In current versions, performing a <code>delete</code> operation on an uninitialized <code>map</code> will not cause an error.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Output:</span>
<span class="token comment">// </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,41),o=[i];function l(p,c){return a(),s("div",null,o)}const d=n(t,[["render",l],["__file","1-basic.html.vue"]]),m=JSON.parse(`{"path":"/en/guide/interview/golang/basic/1-basic.html","title":"Basic","lang":"en-US","frontmatter":{"order":1,"title":"Basic","description":"Pointer What is a pointer and a pointer variable? Answer Ordinary variables store data, while pointer variables store the address of the data. Learning about pointers mainly inv...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goguide.ryansu.tech/guide/interview/golang/basic/1-basic.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/en/guide/interview/golang/basic/1-basic.html"}],["meta",{"property":"og:site_name","content":"Go Guide"}],["meta",{"property":"og:title","content":"Basic"}],["meta",{"property":"og:description","content":"Pointer What is a pointer and a pointer variable? Answer Ordinary variables store data, while pointer variables store the address of the data. Learning about pointers mainly inv..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-29T02:53:54.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-01-29T02:53:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Basic\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-29T02:53:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]]},"headers":[{"level":2,"title":"Pointer","slug":"pointer","link":"#pointer","children":[{"level":3,"title":"What is a pointer and a pointer variable?","slug":"what-is-a-pointer-and-a-pointer-variable","link":"#what-is-a-pointer-and-a-pointer-variable","children":[]},{"level":3,"title":"Why use pointers?","slug":"why-use-pointers","link":"#why-use-pointers","children":[]},{"level":3,"title":"Which objects can be addressed and which cannot?","slug":"which-objects-can-be-addressed-and-which-cannot","link":"#which-objects-can-be-addressed-and-which-cannot","children":[]}]},{"level":2,"title":"Literal","slug":"literal","link":"#literal","children":[{"level":3,"title":"What does literal mean?","slug":"what-does-literal-mean","link":"#what-does-literal-mean","children":[]},{"level":3,"title":"Can different literals have the same value?","slug":"can-different-literals-have-the-same-value","link":"#can-different-literals-have-the-same-value","children":[]},{"level":3,"title":"What is the difference between a literal and a variable?","slug":"what-is-the-difference-between-a-literal-and-a-variable","link":"#what-is-the-difference-between-a-literal-and-a-variable","children":[]},{"level":3,"title":"What is a composite literal?","slug":"what-is-a-composite-literal","link":"#what-is-a-composite-literal","children":[]}]},{"level":2,"title":"Others","slug":"others","link":"#others","children":[{"level":3,"title":"What is the difference between rune and byte in Go?","slug":"what-is-the-difference-between-rune-and-byte-in-go","link":"#what-is-the-difference-between-rune-and-byte-in-go","children":[]},{"level":3,"title":"What are deep copy and shallow copy in golang?","slug":"what-are-deep-copy-and-shallow-copy-in-golang","link":"#what-are-deep-copy-and-shallow-copy-in-golang","children":[]},{"level":3,"title":"What's the difference between make and new?","slug":"what-s-the-difference-between-make-and-new","link":"#what-s-the-difference-between-make-and-new","children":[]},{"level":3,"title":"What's the difference between arrays and slices?","slug":"what-s-the-difference-between-arrays-and-slices","link":"#what-s-the-difference-between-arrays-and-slices","children":[]},{"level":3,"title":"If for range adds data at the same time, will for range execute indefinitely?","slug":"if-for-range-adds-data-at-the-same-time-will-for-range-execute-indefinitely","link":"#if-for-range-adds-data-at-the-same-time-will-for-range-execute-indefinitely","children":[]},{"level":3,"title":"What is the execution order of multiple defers?","slug":"what-is-the-execution-order-of-multiple-defers","link":"#what-is-the-execution-order-of-multiple-defers","children":[]},{"level":3,"title":"What is data overflow?","slug":"what-is-data-overflow","link":"#what-is-data-overflow","children":[]},{"level":3,"title":"Should function parameters use value or pointer?","slug":"should-function-parameters-use-value-or-pointer","link":"#should-function-parameters-use-value-or-pointer","children":[]}]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[{"level":3,"title":"Can an uninitialized Map read a key?","slug":"can-an-uninitialized-map-read-a-key","link":"#can-an-uninitialized-map-read-a-key","children":[]},{"level":3,"title":"What happens if you assign a value to an uninitialized Map?","slug":"what-happens-if-you-assign-a-value-to-an-uninitialized-map","link":"#what-happens-if-you-assign-a-value-to-an-uninitialized-map","children":[]},{"level":3,"title":"What happens if you delete a key from an uninitialized Map?","slug":"what-happens-if-you-delete-a-key-from-an-uninitialized-map","link":"#what-happens-if-you-delete-a-key-from-an-uninitialized-map","children":[]}]}],"git":{"createdTime":1705223227000,"updatedTime":1706496834000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":6},{"name":"qingyansu","email":"qingyansu@qq.com","commits":2}]},"readingTime":{"minutes":6.64,"words":1991},"filePathRelative":"en/guide/interview/golang/basic/1-basic.md","localizedDate":"January 14, 2024","autoDesc":true,"excerpt":"<h2>Pointer</h2>\\n<h3>What is a pointer and a pointer variable?</h3>\\n<details class=\\"hint-container details\\"><summary>Answer</summary>\\n<p>Ordinary variables store data, while pointer variables store the address of the data.</p>\\n<ul>\\n<li>\\n<p>Learning about pointers mainly involves two operators <code>&amp;</code> and <code>*</code>.</p>\\n</li>\\n<li>\\n<p><code>&amp;</code>: Address operator, used to get the address from a variable</p>\\n</li>\\n</ul>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// Define an ordinary variable and print it</span>\\nnum <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">99</span>\\nfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>num<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//output: 99</span>\\n\\nptr <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&amp;</span>num\\nfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>ptr<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//output: for example: 0xc000086020</span>\\n</code></pre></div><ul>\\n<li><code>*</code>: Dereference operator, used to get data from an address</li>\\n</ul>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code>tamp <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">*</span>ptr\\nfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>tamp<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//output: 99</span>\\n</code></pre></div></details>"}`);export{d as comp,m as data};
