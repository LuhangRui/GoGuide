import{_ as t}from"./tcpip-umKtU34L.js";import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as e,d as o}from"./app-c90xqmlT.js";const a="/assets/image/article/network/httpsgraph.png",i={},n=o('<h3 id="osi七层模型" tabindex="-1"><a class="header-anchor" href="#osi七层模型" aria-hidden="true">#</a> OSI七层模型</h3><table><thead><tr><th>层级</th><th>功能</th></tr></thead><tbody><tr><td>物理层</td><td>主要实现相邻节点间比特流的透明传输，物理层定义了物理设备的标准，如网线的类型等， <code>网卡也会在这层工作</code> 。</td></tr><tr><td>数据链路层</td><td>将网络层传下来的比特数据包组装成帧，并在相邻节点的链路上传送帧。数据链路层会将0、1序列划分为具有意义的数据帧传送给另一端。</td></tr><tr><td>网络层</td><td>选择合适的路由和交换结点，能让数据及时传送，此层的数据称为数据包，要关注的是IP协议。</td></tr><tr><td>传输层</td><td>向主机进程提供通用的数据传输服务。传输层需要关注的协议有TCP协议和UDP协议。</td></tr><tr><td>会话层</td><td>负责在网络中的两节点之间建立、维持和终止通信，常见的协议有 ADSP、RPC 等。</td></tr><tr><td>表示层</td><td>主要负责数据格式的转换，解决不同系统之间通信语法问题</td></tr><tr><td>应用层</td><td>为应用程序提供交互服务，目的是更方便应用从网络中接收的数据，重点关注HTTP协议</td></tr></tbody></table><figure><img src="'+t+'" alt="osi" tabindex="0" loading="lazy"><figcaption>osi</figcaption></figure><h3 id="tcp和ip模型" tabindex="-1"><a class="header-anchor" href="#tcp和ip模型" aria-hidden="true">#</a> TCP和IP模型</h3><table><thead><tr><th>OSI七层模型</th><th>TCP/IP 五层模型</th><th>TCP/IP 四层模型</th><th>功能</th><th>TCP/IP协议族</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>应用层</td><td>文件传输，电子邮件，文件服务，虚拟终端等</td><td>SMTP，DNS，Telnet，TFTP，HTTP，SNHP，FTP</td></tr><tr><td>表示层</td><td>应用层</td><td>应用层</td><td>数据格式化，代码转换，数据加密</td><td>无</td></tr><tr><td>会话层</td><td>应用层</td><td>应用层</td><td>解除或建立与别的接点的联系</td><td>无</td></tr><tr><td>传输层</td><td>传输层</td><td>传输层</td><td>提供端对端的接口</td><td>TCP，UDP</td></tr><tr><td>网络层</td><td>网络层</td><td>网络层</td><td>为数据包选择路由</td><td>IP，ICHP，RIP，OSPF，BCP，ICMF</td></tr><tr><td>数据链路层</td><td>数据链路层</td><td>网络接口层</td><td>传输有地址的顿以及错误检测功能</td><td>SLIP，CSLIP，PPP，ARP，RARP，MTU</td></tr><tr><td>物理层</td><td>物理层</td><td>网络接口层</td><td>以二进制数据形式在物理媒介上传输数据</td><td>IS02110，IEEE802，IEEE802.2</td></tr></tbody></table><h3 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h3><h5 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法" aria-hidden="true">#</a> 请求方法</h5><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>HTTP 1.0 支持三种请求方式：</p><ul><li>GET</li><li>POST</li><li>HEAD</li></ul><p>HTTP 1.1 额外支持 6 种请求方式</p><ul><li>OPTIONS</li><li>PUT</li><li>PATCH</li><li>DELETE</li><li>TRACE</li><li>CONNECT</li></ul></div><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>请求一个指定资源，用于获取数据</td></tr><tr><td>HEAD</td><td>和 GET 类似，但是只返回响应头，不返回响应体</td></tr><tr><td>POST</td><td>用于提交信息到目标地址，用于数据提交和文件上传</td></tr><tr><td>PUT</td><td>提交更新的信息，用于替换原数据</td></tr><tr><td>DELETE</td><td>删除指定的资源</td></tr><tr><td>CONNECT</td><td>与服务器建立隧道</td></tr><tr><td>OPTIONS</td><td>返回特定服务器地址所支持的 <code>HTTP</code> 请求方法, 也可用于测试服务器支持的功能</td></tr><tr><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td>PATCH</td><td>和 <code>PUT</code> 相似，主要用于部分更新</td></tr></tbody></table><h4 id="http-状态码" tabindex="-1"><a class="header-anchor" href="#http-状态码" aria-hidden="true">#</a> HTTP 状态码</h4><table><thead><tr><th>数字</th><th>含义</th></tr></thead><tbody><tr><td>1XX</td><td>指示信息，表示请求以接收，继续处理</td></tr><tr><td>2XX</td><td>成功，表示请求已经被成功接收、理解、接受</td></tr><tr><td>3XX</td><td>状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向</td></tr><tr><td>4XX</td><td>状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。</td></tr><tr><td>5XX</td><td>状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码</td></tr></tbody></table><details class="hint-container details"><summary>常见状态码</summary><table><thead><tr><th>HTTP 状态码</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td><strong>继续</strong> 表示客户端可以继续提交请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td><strong>切换协议</strong> 切换传输协议，只能从低版本切换到高版本，如 <code>HTTP1.0</code> 切换为 <code>HTTP1.1</code></td></tr><tr><td>200</td><td>OK</td><td><strong>请求成功</strong> 表示服务器成功返回了数据</td></tr><tr><td>201</td><td>Created</td><td><strong>已创建</strong> 表示服务器成功接收到请求并创建了对应的资源</td></tr><tr><td>202</td><td>Accepted</td><td><strong>已接受</strong> 表示服务器已经接受了请求，请求将会被处理</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td><strong>非授权信息</strong> 表示请求成功,但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td><strong>无内容</strong> 表示服务器成功处理请求</td></tr><tr><td>205</td><td>Reset Content</td><td><strong>重置内容</strong> 服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td><strong>部分内容</strong>服务器成功处理了部分GET请求</td></tr><tr><td>300</td><td>Multiple Choices</td><td><strong>多种选择</strong>请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td><strong>永久移动</strong>请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td><strong>临时移动</strong>与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td><strong>查看其它地址</strong>与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td><strong>未修改</strong> 所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td><strong>使用代理</strong> 所请求的资源必须通过代理访问</td></tr><tr><td>307</td><td>Temporary Redirect</td><td><strong>临时重定向</strong>与302类似。使用GET请求重定向</td></tr><tr><td>400</td><td>Bad Request</td><td><strong>错误请求</strong>表示客户端请求的报文有错误</td></tr><tr><td>401</td><td>Unauthorized</td><td><strong>未授权</strong>缺失或错误的认证，这个状态代码必须和<code>WWW-Authenticate</code>报头域一起使用</td></tr><tr><td>403</td><td>Forbidden</td><td><strong>禁止访问</strong>表示服务器禁止访问资源,并不是客户端的请求出错</td></tr><tr><td>404</td><td>Not Found</td><td><strong>未找到</strong>表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端</td></tr><tr><td>501</td><td>Not Implemented</td><td><strong>功能未实现</strong>表示客户端请求的功能还不支持</td></tr><tr><td>502</td><td>Bad Gateway</td><td><strong>网关错误</strong>通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误</td></tr><tr><td>503</td><td>Service Unavailable</td><td><strong>服务器不可用</strong>表示服务器当前很忙，暂时无法响应服务器</td></tr><tr><td>504</td><td>Gateway Timeout</td><td><strong>网关超时</strong>网关超时，由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答</td></tr></tbody></table></details><h4 id="https-vs-http" tabindex="-1"><a class="header-anchor" href="#https-vs-http" aria-hidden="true">#</a> HTTPS vs HTTP</h4><table><thead><tr><th>特性</th><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td>定义</td><td>HTTP 是超文本传输协议，用于从万维网服务器传输超文本到本地浏览器的传送协议。</td><td>HTTPS 是带有安全性的 HTTP，通过 SSL/TLS 提供加密处理、数据完整性校验及身份认证。</td></tr><tr><td>端口</td><td>默认的 HTTP 端口是 80。</td><td>默认的 HTTPS 端口是 443。</td></tr><tr><td>安全性</td><td>HTTP 本身不是安全的，因为数据在传输过程中没有加密，可能会被第三方获取。</td><td>HTTPS 是安全的，因为数据在传输过程中会被加密，防止被第三方获取。</td></tr><tr><td>速度</td><td>HTTP 相对较快，因为没有加密和解密的过程。</td><td>HTTPS 相对较慢，因为数据在传输过程中需要进行加密和解密。</td></tr></tbody></table><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h4><p><code>HTTPS</code> 协议会对传输的数据进行加密，而加密过程是使用了非对称加密实现</p><ol><li><code>Client</code>发起一个<code>HTTPS</code>的请求</li><li><code>Server</code>把事先配置好的公钥证书返回给客户端。</li><li><code>Client</code>验证公钥证书：比如是否在有效期内，证书的用途是不是匹配<code>Client</code>请求的站点，是不是在<code>CRL</code>吊销列表里面，它的上一级证书是否有效，这是一个递归的过程，直到验证到根证书（操作系统内置的<code>Root</code>证书或者<code>Client</code>内置的<code>Root</code>证书），如果验证通过则继续，不通过则显示警告信息。</li><li><code>Client</code>使用伪随机数生成器生成加密所使用的对称密钥，然后用证书的公钥加密这个对称密钥，发给Server。</li><li><code>Server</code>使用自己的私钥解密这个消息，得到对称密钥。至此，<code>Client</code>和<code>Server</code>双方都持有了相同的对称密钥。</li><li><code>Server</code>使用对称密钥加密明文内容<code>A</code>，发送给<code>Client</code>。</li><li><code>Client</code>使用对称密钥解密响应的密文，得到明文内容<code>A</code>。</li><li><code>Client</code>再次发起<code>HTTPS</code>的请求，使用对称密钥加密请求的明文内容<code>B</code>，然后<code>Server</code>使用对称密钥解密密文，得到明文内容<code>B</code>。</li></ol><figure><img src="'+a+'" alt="https" tabindex="0" loading="lazy"><figcaption>https</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><h4 id="什么是ssl数字证书" tabindex="-1"><a class="header-anchor" href="#什么是ssl数字证书" aria-hidden="true">#</a> 什么是ssl数字证书?</h4><p>ssl 数字证书是由机构颁发的用于传输加密的整数，用于保证数据传输的安全性。</p><h4 id="如何保证公钥不被篡改和信任度" tabindex="-1"><a class="header-anchor" href="#如何保证公钥不被篡改和信任度" aria-hidden="true">#</a> 如何保证公钥不被篡改和信任度？</h4><p>我们的电脑可以访问数据证书的颁发机构确认数据证书是否被篡改或伪造，数字证书有签名可以防止被篡改。</p></div>',19),s=[n];function h(c,l){return r(),e("div",null,s)}const p=d(i,[["render",h],["__file","network.html.vue"]]);export{p as default};
