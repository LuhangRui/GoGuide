const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/en/\":{\"documentCount\":52,\"nextId\":52,\"documentIds\":{\"0\":\"v-e6412400\",\"1\":\"v-e6412400#introduce\",\"2\":\"v-519e79c4\",\"3\":\"v-519e79c4#keywords\",\"4\":\"v-519e79c4#declaration-types\",\"5\":\"v-519e79c4#const\",\"6\":\"v-519e79c4#func\",\"7\":\"v-519e79c4#import\",\"8\":\"v-519e79c4#package\",\"9\":\"v-519e79c4#type\",\"10\":\"v-519e79c4#var\",\"11\":\"v-519e79c4#composite-types\",\"12\":\"v-519e79c4#chan\",\"13\":\"v-519e79c4#interface\",\"14\":\"v-519e79c4#map\",\"15\":\"v-519e79c4#struct\",\"16\":\"v-519e79c4#control-flow\",\"17\":\"v-519e79c4#if-else\",\"18\":\"v-519e79c4#switch-fallthrough\",\"19\":\"v-519e79c4#for-break-continue-range\",\"20\":\"v-519e79c4#goto\",\"21\":\"v-519e79c4#select\",\"22\":\"v-519e79c4#function-modifiers\",\"23\":\"v-519e79c4#defer\",\"24\":\"v-519e79c4#go\",\"25\":\"v-7562f136\",\"26\":\"v-7562f136#integers-int\",\"27\":\"v-7562f136#floating-point-numbers-float\",\"28\":\"v-7562f136#complex-numbers-complex\",\"29\":\"v-7562f136#strings-string\",\"30\":\"v-7562f136#booleans-bool\",\"31\":\"v-7562f136#arrays-array\",\"32\":\"v-7562f136#slices-slices\",\"33\":\"v-7562f136#map-map\",\"34\":\"v-7562f136#structures-struct\",\"35\":\"v-7562f136#pointers-pointer\",\"36\":\"v-d57bd0da\",\"37\":\"v-d57bd0da#pointer\",\"38\":\"v-d57bd0da#what-is-a-pointer-and-a-pointer-variable\",\"39\":\"v-d57bd0da#why-use-pointers\",\"40\":\"v-d57bd0da#how-to-use-object-selectors-for-automatic-dereferencing\",\"41\":\"v-d57bd0da#literal\",\"42\":\"v-d57bd0da#what-does-literal-mean\",\"43\":\"v-d57bd0da#can-different-literals-have-the-same-value\",\"44\":\"v-d57bd0da#what-is-the-difference-between-a-literal-and-a-variable\",\"45\":\"v-d57bd0da#what-is-a-composite-literal\",\"46\":\"v-d57bd0da#others\",\"47\":\"v-d57bd0da#what-is-the-difference-between-rune-and-byte-in-go\",\"48\":\"v-d57bd0da#different-types\",\"49\":\"v-d57bd0da#different-stored-characters\",\"50\":\"v-d57bd0da#different-byte-sizes-occupied-byte-occupies-1-byte-rune-occupies-4-bytes\",\"51\":\"v-d57bd0da#different-character-ranges-represented\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,13],\"2\":[1],\"3\":[1,47],\"4\":[2],\"5\":[1,55],\"6\":[1,32],\"7\":[1,57],\"8\":[1,8],\"9\":[1,27],\"10\":[1,33],\"11\":[2],\"12\":[1,26],\"13\":[1,16],\"14\":[1,36],\"15\":[1,17],\"16\":[2],\"17\":[2,21],\"18\":[2,76],\"19\":[4,50],\"20\":[1,38],\"21\":[1,54],\"22\":[2],\"23\":[1,62],\"24\":[1,33],\"25\":[2],\"26\":[3,60],\"27\":[5,14],\"28\":[4,39],\"29\":[3,44],\"30\":[3,18],\"31\":[3,30],\"32\":[3,43],\"33\":[3,42],\"34\":[3,24],\"35\":[3,34],\"36\":[1],\"37\":[1],\"38\":[7,45],\"39\":[4,88],\"40\":[9,55],\"41\":[1],\"42\":[5,59],\"43\":[8,42],\"44\":[10,62],\"45\":[6,105],\"46\":[1],\"47\":[11,22],\"48\":[3,10],\"49\":[4,28],\"50\":[10,21],\"51\":[5,64]},\"averageFieldLength\":[2.980769230769231,37.08615052134213],\"storedFields\":{\"0\":{\"h\":\"Guide\"},\"1\":{\"h\":\"introduce\",\"t\":[\"This website mainly provides Golang interview frequently asked questions and basic knowledge.\"]},\"2\":{\"h\":\"Keywords\"},\"3\":{\"h\":\"Keywords\",\"t\":[\"Golang has 25 reserved keywords that cannot be used as program identifiers.\",\"Type\",\"Keywords\",\"Introduction\",\"Declaration\",\"constfuncimportpackagetypevar\",\"These keywords are used to declare various elements in the code.\",\"Composite Types\",\"chaninterfacemapstruct\",\"These keywords are used to declare some special compound types.\",\"Control Flow\",\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",\"These keywords are used to control the flow of program execution.\",\"Function Modifiers\",\"defergo\",\"Used to modify special functions.\"]},\"4\":{\"h\":\"Declaration Types\"},\"5\":{\"h\":\"const\",\"t\":[\"const is used to declare constants, which once declared cannot be changed, and must specify an initial value when declaring a constant.\",\"Example\",\"const identifier T = value // T is the data type, which can be omitted, and the compiler will infer it. const identifier1, identifier2 = value1, value2 // Declare multiple, such as const a, b, c = \\\"hello\\\", 100, true const ( FeMale = 0 Male = 1 ) // Enumeration const ( a = iota b c ) // iota \"]},\"6\":{\"h\":\"func\",\"t\":[\"func is used to declare functions, supports multiple return values, and does not support default parameters.\",\"Example\",\"// p is the parameter, T is the type func Test(p T) {} func Test(p T) (T1, T2) {} func Test(p T, p1 T1, list ...T3) (T4, T5) {} // variadic parameters \"]},\"7\":{\"h\":\"import\",\"t\":[\"import is used to import packages to use their public identifiers.\",\"import supports single-line and multi-line imports.\",\"Example\",\"import \\\"flag\\\" // single import import ( \\\"flag\\\" \\\"fmt\\\" ) // multiple imports \",\"We can also use ., _, and aliases to modify imported packages.\",\"Import Command\",\"Usage\",\"Explanation\",\"import \\\"lib/math\\\"\",\"math.Sin\",\"Normal import requires the package name\",\"import m \\\"lib/math\\\"\",\"m.Sin\",\"Aliases can be set during import\",\"import . \\\"lib/math\\\"\",\"Sin\",\"Using . allows direct use of functions without the package name\",\"We can also use _ to modify imported packages, which will only execute the package's initialization function init().\"]},\"8\":{\"h\":\"package\",\"t\":[\"package is used to define the package name.\"]},\"9\":{\"h\":\"type\",\"t\":[\"type is used to define variable types.\",\"Example\",\"// Define an interface type Animal interface { eat() } // Define a structure type Tiger struct { Name string } // Define equivalent types type Num int32 // Define a new type type Num = int32 // Only define an alias \"]},\"10\":{\"h\":\"var\",\"t\":[\"var is used to declare public or private variables.\",\"Example\",\"var Name T // public variable var name T // private variable var name1, name2 T // declare multiple variables of the same type var name1, name2 T = val1, val2 // declare and initialize multiple variables of the same type var name1, name2 = val1, val2 // infer types and initialize based on val1, val2 // Using parentheses var ( name1 = val1 name2 = val2 ) \"]},\"11\":{\"h\":\"Composite Types\"},\"12\":{\"h\":\"chan\",\"t\":[\"chan (Channel) is used to declare channels.\",\"Example\",\"// Channel for sending and receiving data of type T chan T // Channel for sending data of type T <-chan T // Channel for receiving data of type T chan<- T \",\"ch := make(chan T) // unbuffered channel ch := make(chan T, 20) // buffered channel \"]},\"13\":{\"h\":\"interface\",\"t\":[\"interface is used to declare interfaces.\",\"Example\",\"type File interface { Read(b Buffer) bool Write(b Buffer) bool Close() } \"]},\"14\":{\"h\":\"map\",\"t\":[\"map is used to declare collections, consisting of unordered key-value pairs, with an underlying hash map. Although map will automatically expand, it is recommended to configure the capacity at initialization.\",\"Example\",\"m := make(map[string]string) // empty map m := make(map[string]string, 10) // map with an initial capacity of 10 \"]},\"15\":{\"h\":\"struct\",\"t\":[\"struct is used to declare structures.\",\"Example\",\"type Person struct { Name string } \",\"Here is the translation into English:\"]},\"16\":{\"h\":\"Control Flow\"},\"17\":{\"h\":\"if else\",\"t\":[\"ifelse is used for conditional judgments and can be nested.\",\"Example\",\"if a > 0 { fmt.Println(\\\"hello\\\") } else { fmt.Println(\\\"world\\\") } \"]},\"18\":{\"h\":\"switch fallthrough\",\"t\":[\"switch is used to perform different actions based on different conditions. By default, each case comes with a break, and after executing one case, it will automatically exit. If you want to continue executing the following statements, you need to use fallthrough.\",\"Example\",\"a := \\\"2\\\" switch a { case \\\"1\\\": fmt.Println(\\\"hello\\\") case \\\"2\\\": fmt.Println(\\\"world\\\") default: // default action fmt.Println(\\\"default\\\") } // Result: world \",\"Using fallthrough, you can directly execute the action of the next case after completing the corresponding case.\",\"package main import \\\"fmt\\\" func main() { var dayOfWeek int = 4 switch dayOfWeek { case 1: fmt.Println(\\\"Monday\\\") fallthrough case 2: fmt.Println(\\\"Tuesday\\\") fallthrough case 3: fmt.Println(\\\"Wednesday\\\") fallthrough case 4: fmt.Println(\\\"Thursday\\\") fallthrough case 5: fmt.Println(\\\"Friday\\\") fallthrough case 6: fmt.Println(\\\"Saturday\\\") case 7: fmt.Println(\\\"Sunday\\\") default: fmt.Println(\\\"Invalid Day\\\") } } // Result: // Thursday // Friday // Saturday \"]},\"19\":{\"h\":\"for break continue range\",\"t\":[\"for is used to loop actions, using break to interrupt the current for loop, and continue to skip the remaining statements of the current loop and continue with the next round.\",\"Example\",\"// Single condition for i <= 10 { fmt.Println(i) i = i + 1 } // Initialization and judgment for i:=0; i < 3; i++ { fmt.Println(i) } // for range iteration array :=[]int{1, 2, 3, 4, 5} for i, v :=range array{ fmt.Println(i,v) } // break for i, v :=range array{ if i >= 2 { break } fmt.Println(i,v) } // continue for i, v :=range array{ if i == 2 { continue } fmt.Println(i,v) } \"]},\"20\":{\"h\":\"goto\",\"t\":[\"goto can jump to a specified location to continue executing actions.\",\"Example\",\"package main import \\\"fmt\\\" func main() { for i := 0; i < 10; i ++ { if i == 5 { goto end // Jump to the end position to execute } fmt.Println(i) } end: fmt.Println(\\\"end\\\") } // Result: // 0 // 1 // 2 // 3 // 4 // end \"]},\"21\":{\"h\":\"select\",\"t\":[\"select allows goroutine to wait for multiple communication operations. select will block until one case receives information. If multiple channels receive data at the same time, a random case will be executed.\",\"Example\",\"package main import \\\"fmt\\\" func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c <- x: x, y = y, x+y case <-quit: fmt.Println(\\\"quit\\\") return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i < 10; i++ { fmt.Println(<-c) } quit <- 0 }() fibonacci(c, quit) } \"]},\"22\":{\"h\":\"Function Modifiers\"},\"23\":{\"h\":\"defer\",\"t\":[\"return is used to terminate the execution of a function and return zero or more return values. defer is used to perform actions before the function's return or after it has finished executing.\",\"Example\",\"package main import \\\"fmt\\\" func main() { defer fmt.Println(\\\"world\\\") fmt.Println(\\\"hello\\\") } // Result // hello // world \",\"Note:\",\"The execution order of defer is last-in-first-out.\",\"defer executing before return means you can use defer to get the final result of variables before return.\",\"package main import \\\"fmt\\\" func main() { num := 1 defer func() { fmt.Println(num) }() for i := 0; i < 4; i ++ { num += i } } // Result: // 7 \"]},\"24\":{\"h\":\"go\",\"t\":[\"go is used to create a coroutine (goroutine) and perform actions in the background of the program.\",\"Example\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { go func(){ fmt.Println(\\\"no.1\\\") }() go func(){ fmt.Println(\\\"no.2\\\") }() fmt.Println(\\\"start goroutine\\\") time.Sleep(5*time.Second) } // Result: // start goroutine // no.1 // no.2 \"]},\"25\":{\"h\":\"Data Type\"},\"26\":{\"h\":\"Integers (int)\",\"t\":[\"Integers come in two types:\",\"Type\",\"Range\",\"Description\",\"Signed integers\",\"-∞ ~ +∞\",\"Signed integers include positive and negative numbers\",\"Unsigned integers\",\"0 ~ +∞\",\"Unsigned integers include 0 and all positive numbers\",\"In Golang, types starting with int are signed integers, and those starting with uint are unsigned integers.\",\"Integer types in Golang:\",\"Bits\",\"Type\",\"8\",\"int8uint8\",\"16\",\"int16uint16\",\"32\",\"int32uint32\",\"64\",\"int64uint64\",\"32 or 64 (based on system architecture)\",\"intuint\",\"There are also two equivalent types:\",\"rune: equivalent to int32 , used to store Unicode characters\",\"byte: equivalent to uint8 , used to store ASCII characters\"]},\"27\":{\"h\":\"Floating-point Numbers (float)\",\"t\":[\"Floating-point numbers are numbers that contain a decimal point.\",\"Bits\",\"Type\",\"32\",\"float32\",\"64\",\"float64\"]},\"28\":{\"h\":\"Complex Numbers (complex)\",\"t\":[\"Complex numbers contain imaginary and real numbers, with the real part being a floating-point number.\",\"Bits\",\"Type\",\"32-bit float + imaginary\",\"complex64\",\"64-bit float + imaginary\",\"complex128\",\"Example\",\"// Initialize a complex number var complexData complex64 = complex(5, 3) // Equals: 5 + 3i // Another way to initialize complexData2 := 5 + 3i \"]},\"29\":{\"h\":\"Strings (string)\",\"t\":[\"Strings are composed of a sequence of characters, and the type name is string.\",\"Once a string is created, it cannot be modified.\",\"Example\",\"package main import \\\"fmt\\\" func main() { var str string := \\\"Hi! Jack\\\" // Cannot modify, the following commented code will cause an error // str[2] = 'c' fmt.Printf(\\\"%s\\\",str) } \"]},\"30\":{\"h\":\"Booleans (bool)\",\"t\":[\"The boolean type values are true or false, and the type name is bool.\",\"Example\",\"var isNumber bool isNumber = true isNumber = false \"]},\"31\":{\"h\":\"Arrays (array)\",\"t\":[\"Arrays are composed of a series of data, which can be accessed by index.\",\"The capacity of an array cannot be modified once created.\",\"Example\",\"data := [5]int{1, 2, 3, 4, 5} \"]},\"32\":{\"h\":\"Slices (slices)\",\"t\":[\"Slices are dynamic arrays that can automatically adjust their capacity size based on the data.\",\"Example\",\"package main import \\\"fmt\\\" func main() { var data []int for i := 0; i < 10; i ++ { data = append(data, i) } fmt.Println(data) } // Result // [0 1 2 3 4 5 6 7 8 9] \"]},\"33\":{\"h\":\"Map (map)\",\"t\":[\"A map is a key-value mapping table, where you can get the corresponding value through the key.\",\"The declaration of a map is as follows:\",\"map[KeyType]ValueType \",\"KeyType is the data type of the key, and ValueType is the data type of the value.\",\"Example\",\"// Declare a map var m map[string]int // Initialize the map using make m = make(map[string]int) // Set the value m[\\\"path\\\"] = 66 // Output the value fmt.Println(m[\\\"path\\\"]) \"]},\"34\":{\"h\":\"Structures (struct)\",\"t\":[\"Structures are composed of a series of custom fields, which can be accessed using ..\",\"Example\",\"type Animal struct { Name string } a := Animal{ Name: \\\"Lucky\\\" } fmt.Println(a.Name) \"]},\"35\":{\"h\":\"Pointers (pointer)\",\"t\":[\"Pointers store the memory address of a variable. Use * in front of a variable to define it as a pointer, and & to get the variable's address. Pointers allow you to modify data outside of a function within the function.\",\"Example\",\"var num *int n := 10 num = &n \"]},\"36\":{\"h\":\"Basic\"},\"37\":{\"h\":\"Pointer\"},\"38\":{\"h\":\"What is a pointer and a pointer variable?\",\"t\":[\"Click to expand Ordinary variables store data, while pointer variables store the address of the data. \",\"Learning about pointers mainly involves two operators & and *.\",\"&: Address operator, used to get the address from a variable\",\"// Define an ordinary variable and print it num := 99 fmt.Println(num) //output: 99 ptr := &num fmt.Println(ptr) //output: for example: 0xc000086020 \",\"*: Dereference operator, used to get data from an address\",\"tamp := *ptr fmt.Println(tamp) //output: 99 \"]},\"39\":{\"h\":\"Why use pointers?\",\"t\":[\"Click to expand\",\"Significance One: Easy Coding\",\"Pointers play an important role in data structures. Through pointers, we can create complex data structures such as linked lists, trees, and graphs. Pointers can easily access and manipulate relationships between nodes in data structures, thereby achieving efficient data storage and retrieval.\",\"Pointers can pass references of data between functions, instead of copying the entire data. This can save memory space and improve the execution efficiency of the program. By passing pointers, functions can directly modify the original data without needing to return a value.\",\"Significance Two: Save Memory\",\"Pointers can directly access and modify data in memory. Through pointers, we can dynamically allocate memory at runtime to meet the needs of the program, and release memory when it is not needed, avoiding memory leaks.\",\"Pointers can dynamically allocate memory during program execution. Through dynamic memory allocation, we can allocate and release memory as needed, thereby improving the flexibility and efficiency of the program.\"]},\"40\":{\"h\":\"How to use object selectors for automatic dereferencing?\",\"t\":[\"Click to expand\",\"To get a value from a struct instance object, you can use .. This symbol is a selector.\",\"This method can save the * operation, the selector . will directly dereference, as shown in the example below\",\"type animal struct { Name string } func main() { p1 := &animal{\\\"yikesu\\\"} fmt.Println(p1.Name) } \",\"It used to be like this\",\"type animal struct { Name string } func main() { p1 := &animal{\\\"yikesu\\\"} fmt.Println((*p1).Name) } \",\"Also, you can save the * operation, the selector . will directly dereference, as shown in the example below\",\"type animal struct { Name string } func main() { p1 := &animal{\\\"yikesu\\\"} fmt.Println(p1.Name) } \",\"And it can be like this\",\"type animal struct { name string } func (p *animal) Say() { fmt.Println(p.name) } \",\"Instead of like this\",\"type animal struct { name string } func (p *animal) Say() { fmt.Println((*p).name) } \"]},\"41\":{\"h\":\"Literal\"},\"42\":{\"h\":\"What does literal mean?\",\"t\":[\"Click to expand - The text of these basic type values below is a basic type literal. \",\"Basic Type\",\"Collection\",\"Boolean Type\",\"bool\",\"String Type\",\"string\",\"Complex Type\",\"complex64complex128\",\"Float Type\",\"float32float64\",\"Integer Type\",\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",\"An unnamed constant is a special kind of constant that doesn't have a specific name. This kind of constant only has a value, and there is no variable name associated with it. The following strings are string literals, which are unnamed constants.\",\"\\\"hello，world\\\" \\\"123\\\" \"]},\"43\":{\"h\":\"Can different literals have the same value?\",\"t\":[\"Click to expand\",\"A value can be represented by multiple literals. For example, the decimal value 21 can be represented by three different literals\",\"Decimal\",\"Octal\",\"Binary\",\"Hexadecimal\",\"21\",\"0o25\",\"0b0001 0101\",\"0x15\",\"import \\\"fmt\\\" func main() { fmt.Println(21 == 0o25) fmt.Println(21 == 0x15 ) fmt.Println(21 == 0b0001 0101) }// The result of the run shows that they are equal \"]},\"44\":{\"h\":\"What is the difference between a literal and a variable?\",\"t\":[\"Click to expand\",\"A literal is an unnamed constant, just like a constant, it is not addressable.\",\"For example\",\"func run() string { return \\\"fast\\\" } func main() { fmt.Println(&run()) } \",\"./main.go:10:14: cannot take the address of run() \",\"If you do not use a variable name to hold it, the text value of a string returned by a function, which is a string literal, and this kind of literal is not addressable, an error will occur. To use & to address, you must use a variable name to hold it.\",\"But the following is correct\",\"func run() string { return \\\"fast\\\" } func main() { t := run() fmt.Println(&t) } \",\"Translate to English:\"]},\"45\":{\"h\":\"What is a composite literal?\",\"t\":[\"Click to expand\",\"A composite literal is a way to define and initialize an object together. In other words, a composite literal is used to construct values for structures, arrays, slices, and maps, and each time a new value is created. They are followed by the type of the literal, curly braces, and a list of elements. Each element can optionally be preceded by a related key.\",\"Using composite literals can be simpler, and the composite literal methods for structures, arrays, slices, and maps are as follows.\",\"Structures use composite literals to define and initialize\",\"type man struct { nationality string height int } func main() { // Declare and assign properties su := man{ nationality: \\\"China\\\", height: 180, } } \",\"Structures use the cumbersome conventional method as follows\",\"type man struct { nationality string height int } func main() { // Declare object var su man // Assign properties su.nationality = \\\"China\\\" su.height = 180 } \",\"Map uses composite literal method for definition and initialization as follows\",\"m := map[string]int { \\\"math\\\": 96, \\\"Chinese\\\": 90, } \",\"Similarly, arrays use composite literal method for definition and initialization as follows\",\"colours := [3]string{\\\"black\\\", \\\"red\\\", \\\"white\\\"} \",\"Slices use composite literal method as follows\",\"s := []string{\\\"red\\\", \\\"black\\\"} // The capacity and length of the slice will be automatically filled in \"]},\"46\":{\"h\":\"Others\"},\"47\":{\"h\":\"What is the difference between rune and byte in Go?\",\"t\":[\"Click to expand\",\"In Go language, byte and rune are both types used to represent characters, but there are some differences between them:\"]},\"48\":{\"h\":\"Different types:\",\"t\":[\"byte: byte, is an alias type of uint8\",\"rune: character, is an alias type of int32\"]},\"49\":{\"h\":\"Different stored characters:\",\"t\":[\"//byte is used to represent ASCII code characters, can only store characters within the range of 0-255. var a byte = 'Y' // ASCII code character //rune is used to represent Unicode characters, can store any Unicode character. var b rune = '酥' // Unicode character \"]},\"50\":{\"h\":\"Different byte sizes occupied: byte occupies 1 byte, rune occupies 4 bytes.\",\"t\":[\"import \\\"unsafe\\\" var a byte = 'Y' var b rune = '酥' fmt.Printf(\\\"a occupies %d bytes\\\\nb occupies %d bytes\\\", unsafe.Sizeof(a), unsafe.Sizeof(b)) // Output: a occupies 1 byte b occupies 4 bytes \"]},\"51\":{\"h\":\"Different character ranges represented:\",\"t\":[\"Since the value that the byte type can represent is limited, there are only 2^8=256. So if you want to represent Chinese, you can only use the rune type.\",\"String representation: In Go, strings are encoded in UTF-8, English letters occupy one byte, while Chinese letters occupy 3 bytes. For example:\",\"var world string = \\\"world,世界\\\" fmt.Println(len(world)) // Output 12 var a byte = 'G' var b rune = 'O' fmt.Printf(\\\"a occupies %d bytes\\\\n\\\", unsafe.Sizeof(a)) fmt.Printf(\\\"b occupies %d bytes\\\\n\\\",unsafe.Sizeof(b)) // output a occupies 1 byte b occupies 4 bytes \"]}},\"dirtCount\":0,\"index\":[[\"世界\",{\"1\":{\"51\":1}}],[\"酥\",{\"1\":{\"49\":1,\"50\":1}}],[\"90\",{\"1\":{\"45\":1}}],[\"96\",{\"1\":{\"45\":1}}],[\"99\",{\"1\":{\"38\":3}}],[\"9\",{\"1\":{\"32\":1}}],[\"jack\",{\"1\":{\"29\":1}}],[\"just\",{\"1\":{\"44\":1}}],[\"jump\",{\"1\":{\"20\":2}}],[\"judgment\",{\"1\":{\"19\":1}}],[\"judgments\",{\"1\":{\"17\":1}}],[\"8\",{\"1\":{\"26\":1,\"32\":1,\"51\":1}}],[\"~\",{\"1\":{\"26\":2}}],[\"∞\",{\"1\":{\"26\":1}}],[\"zero\",{\"1\":{\"23\":1}}],[\"yikesu\",{\"1\":{\"40\":3}}],[\"y\",{\"1\":{\"21\":3,\"49\":1,\"50\":1}}],[\"you\",{\"1\":{\"18\":3,\"23\":1,\"33\":1,\"35\":1,\"40\":2,\"44\":2,\"51\":2}}],[\"x+y\",{\"1\":{\"21\":1}}],[\"x\",{\"1\":{\"21\":3}}],[\"quit\",{\"1\":{\"21\":6}}],[\"questions\",{\"1\":{\"1\":1}}],[\"v\",{\"1\":{\"19\":6}}],[\"val2\",{\"1\":{\"10\":4}}],[\"val1\",{\"1\":{\"10\":4}}],[\"valuetype\",{\"1\":{\"33\":2}}],[\"values\",{\"1\":{\"6\":1,\"23\":1,\"30\":1,\"42\":1,\"45\":1}}],[\"value2\",{\"1\":{\"5\":1}}],[\"value1\",{\"1\":{\"5\":1}}],[\"value\",{\"0\":{\"43\":1},\"1\":{\"5\":2,\"14\":1,\"33\":5,\"39\":1,\"40\":1,\"42\":1,\"43\":2,\"44\":1,\"45\":1,\"51\":1}}],[\"var\",{\"0\":{\"10\":1},\"1\":{\"10\":7,\"18\":1,\"28\":1,\"29\":1,\"30\":1,\"32\":1,\"33\":1,\"35\":1,\"45\":1,\"49\":2,\"50\":2,\"51\":3}}],[\"variables\",{\"1\":{\"10\":3,\"23\":1,\"38\":2}}],[\"variable\",{\"0\":{\"38\":1,\"44\":1},\"1\":{\"9\":1,\"10\":2,\"35\":3,\"38\":2,\"42\":1,\"44\":2}}],[\"variadic\",{\"1\":{\"6\":1}}],[\"various\",{\"1\":{\"3\":1}}],[\"+∞\",{\"1\":{\"26\":2}}],[\"+=\",{\"1\":{\"23\":1}}],[\"++\",{\"1\":{\"20\":1,\"23\":1,\"32\":1}}],[\"+\",{\"1\":{\"19\":1,\"28\":4}}],[\"language\",{\"1\":{\"47\":1}}],[\"last\",{\"1\":{\"23\":1}}],[\"len\",{\"1\":{\"51\":1}}],[\"length\",{\"1\":{\"45\":1}}],[\"letters\",{\"1\":{\"51\":2}}],[\"leaks\",{\"1\":{\"39\":1}}],[\"learning\",{\"1\":{\"38\":1}}],[\"lucky\",{\"1\":{\"34\":1}}],[\"location\",{\"1\":{\"20\":1}}],[\"loop\",{\"1\":{\"19\":3}}],[\"limited\",{\"1\":{\"51\":1}}],[\"literals\",{\"0\":{\"43\":1},\"1\":{\"42\":1,\"43\":2,\"45\":2}}],[\"literal\",{\"0\":{\"41\":1,\"42\":1,\"44\":1,\"45\":1},\"1\":{\"42\":1,\"44\":3,\"45\":7}}],[\"like\",{\"1\":{\"40\":3,\"44\":1}}],[\"linked\",{\"1\":{\"39\":1}}],[\"line\",{\"1\":{\"7\":2}}],[\"lib\",{\"1\":{\"7\":3}}],[\"lists\",{\"1\":{\"39\":1}}],[\"list\",{\"1\":{\"6\":1,\"45\":1}}],[\"run\",{\"1\":{\"43\":1,\"44\":5}}],[\"runtime\",{\"1\":{\"39\":1}}],[\"rune\",{\"0\":{\"47\":1,\"50\":1},\"1\":{\"26\":1,\"47\":1,\"48\":1,\"49\":2,\"50\":1,\"51\":2}}],[\"role\",{\"1\":{\"39\":1}}],[\"round\",{\"1\":{\"19\":1}}],[\"random\",{\"1\":{\"21\":1}}],[\"ranges\",{\"0\":{\"51\":1}}],[\"range\",{\"0\":{\"19\":1},\"1\":{\"19\":1,\"26\":1,\"49\":1}}],[\"representation\",{\"1\":{\"51\":1}}],[\"represent\",{\"1\":{\"47\":1,\"49\":2,\"51\":2}}],[\"represented\",{\"0\":{\"51\":1},\"1\":{\"43\":2}}],[\"red\",{\"1\":{\"45\":2}}],[\"related\",{\"1\":{\"45\":1}}],[\"relationships\",{\"1\":{\"39\":1}}],[\"release\",{\"1\":{\"39\":2}}],[\"references\",{\"1\":{\"39\":1}}],[\"retrieval\",{\"1\":{\"39\":1}}],[\"returned\",{\"1\":{\"44\":1}}],[\"return\",{\"1\":{\"6\":1,\"21\":1,\"23\":6,\"39\":1,\"44\":2}}],[\"real\",{\"1\":{\"28\":2}}],[\"read\",{\"1\":{\"13\":1}}],[\"remaining\",{\"1\":{\"19\":1}}],[\"result\",{\"1\":{\"18\":2,\"20\":1,\"23\":3,\"24\":1,\"32\":1,\"43\":1}}],[\"reserved\",{\"1\":{\"3\":1}}],[\"receive\",{\"1\":{\"21\":1}}],[\"receives\",{\"1\":{\"21\":1}}],[\"receiving\",{\"1\":{\"12\":2}}],[\"recommended\",{\"1\":{\"14\":1}}],[\"requires\",{\"1\":{\"7\":1}}],[\"7\",{\"1\":{\"18\":1,\"23\":1,\"32\":1}}],[\"66\",{\"1\":{\"33\":1}}],[\"64\",{\"1\":{\"26\":2,\"27\":1,\"28\":1}}],[\"6\",{\"1\":{\"18\":1,\"32\":1}}],[\"5\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"24\":1,\"28\":3,\"31\":2,\"32\":1}}],[\"3i\",{\"1\":{\"28\":2}}],[\"32\",{\"1\":{\"26\":2,\"27\":1,\"28\":1}}],[\"3\",{\"1\":{\"18\":1,\"19\":2,\"20\":1,\"28\":1,\"31\":1,\"32\":1,\"45\":1,\"51\":1}}],[\"4\",{\"0\":{\"50\":1},\"1\":{\"18\":2,\"19\":1,\"20\":1,\"23\":1,\"31\":1,\"32\":1,\"50\":1,\"51\":1}}],[\">=\",{\"1\":{\"19\":1}}],[\">\",{\"1\":{\"17\":1}}],[\"2^8=256\",{\"1\":{\"51\":1}}],[\"21\",{\"1\":{\"43\":5}}],[\"2\",{\"1\":{\"18\":3,\"19\":3,\"20\":1,\"24\":2,\"29\":1,\"31\":1,\"32\":1}}],[\"20\",{\"1\":{\"12\":1}}],[\"255\",{\"1\":{\"49\":1}}],[\"25\",{\"1\":{\"3\":1}}],[\"utf\",{\"1\":{\"51\":1}}],[\"uint8\",{\"1\":{\"26\":1,\"48\":1}}],[\"uint\",{\"1\":{\"26\":1}}],[\"unsafe\",{\"1\":{\"50\":3,\"51\":2}}],[\"unsigned\",{\"1\":{\"26\":3}}],[\"unnamed\",{\"1\":{\"42\":2,\"44\":1}}],[\"unicode\",{\"1\":{\"26\":1,\"49\":3}}],[\"until\",{\"1\":{\"21\":1}}],[\"underlying\",{\"1\":{\"14\":1}}],[\"unordered\",{\"1\":{\"14\":1}}],[\"unbuffered\",{\"1\":{\"12\":1}}],[\"using\",{\"1\":{\"7\":1,\"10\":1,\"18\":1,\"19\":1,\"33\":1,\"34\":1,\"45\":1}}],[\"usage\",{\"1\":{\"7\":1}}],[\"uses\",{\"1\":{\"45\":1}}],[\"use\",{\"0\":{\"39\":1,\"40\":1},\"1\":{\"7\":4,\"18\":1,\"23\":1,\"35\":1,\"40\":1,\"44\":3,\"45\":4,\"51\":1}}],[\"used\",{\"1\":{\"3\":5,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":1,\"18\":1,\"19\":1,\"23\":2,\"24\":1,\"26\":2,\"38\":2,\"40\":1,\"45\":1,\"47\":1,\"49\":2}}],[\"<=\",{\"1\":{\"19\":1}}],[\"<\",{\"1\":{\"12\":1,\"19\":1,\"20\":1,\"21\":5,\"23\":1,\"32\":1}}],[\"nb\",{\"1\":{\"50\":1}}],[\"nationality\",{\"1\":{\"45\":4}}],[\"name2\",{\"1\":{\"10\":4}}],[\"name1\",{\"1\":{\"10\":4}}],[\"name\",{\"1\":{\"7\":2,\"8\":1,\"9\":1,\"10\":2,\"15\":1,\"29\":1,\"30\":1,\"34\":3,\"40\":10,\"42\":2,\"44\":2}}],[\"n\",{\"1\":{\"35\":2,\"51\":2}}],[\"negative\",{\"1\":{\"26\":1}}],[\"next\",{\"1\":{\"18\":1,\"19\":1}}],[\"needed\",{\"1\":{\"39\":2}}],[\"needs\",{\"1\":{\"39\":1}}],[\"needing\",{\"1\":{\"39\":1}}],[\"need\",{\"1\":{\"18\":1}}],[\"nested\",{\"1\":{\"17\":1}}],[\"new\",{\"1\":{\"9\":1,\"45\":1}}],[\"number\",{\"1\":{\"28\":2}}],[\"numbers\",{\"0\":{\"27\":1,\"28\":1},\"1\":{\"26\":2,\"27\":2,\"28\":2}}],[\"num\",{\"1\":{\"9\":2,\"23\":3,\"35\":2,\"38\":3}}],[\"nodes\",{\"1\":{\"39\":1}}],[\"no\",{\"1\":{\"24\":4,\"42\":1}}],[\"normal\",{\"1\":{\"7\":1}}],[\"note\",{\"1\":{\"23\":1}}],[\"not\",{\"1\":{\"6\":1,\"39\":1,\"44\":3}}],[\"play\",{\"1\":{\"39\":1}}],[\"ptr\",{\"1\":{\"38\":3}}],[\"pointer\",{\"0\":{\"35\":1,\"37\":1,\"38\":2},\"1\":{\"35\":1,\"38\":1}}],[\"pointers\",{\"0\":{\"35\":1,\"39\":1},\"1\":{\"35\":2,\"38\":1,\"39\":8}}],[\"point\",{\"0\":{\"27\":1},\"1\":{\"27\":2,\"28\":1}}],[\"positive\",{\"1\":{\"26\":2}}],[\"position\",{\"1\":{\"20\":1}}],[\"perform\",{\"1\":{\"18\":1,\"23\":1,\"24\":1}}],[\"person\",{\"1\":{\"15\":1}}],[\"preceded\",{\"1\":{\"45\":1}}],[\"print\",{\"1\":{\"38\":1}}],[\"printf\",{\"1\":{\"29\":1,\"50\":1,\"51\":2}}],[\"println\",{\"1\":{\"17\":2,\"18\":11,\"19\":5,\"20\":2,\"21\":2,\"23\":3,\"24\":3,\"32\":1,\"33\":1,\"34\":1,\"38\":3,\"40\":5,\"43\":3,\"44\":2,\"51\":1}}],[\"private\",{\"1\":{\"10\":2}}],[\"properties\",{\"1\":{\"45\":2}}],[\"program\",{\"1\":{\"3\":2,\"24\":1,\"39\":4}}],[\"provides\",{\"1\":{\"1\":1}}],[\"public\",{\"1\":{\"7\":1,\"10\":2}}],[\"passing\",{\"1\":{\"39\":1}}],[\"pass\",{\"1\":{\"39\":1}}],[\"path\",{\"1\":{\"33\":2}}],[\"pairs\",{\"1\":{\"14\":1}}],[\"part\",{\"1\":{\"28\":1}}],[\"parentheses\",{\"1\":{\"10\":1}}],[\"parameter\",{\"1\":{\"6\":1}}],[\"parameters\",{\"1\":{\"6\":2}}],[\"package\",{\"0\":{\"8\":1},\"1\":{\"7\":3,\"8\":2,\"18\":1,\"20\":1,\"21\":1,\"23\":2,\"24\":1,\"29\":1,\"32\":1}}],[\"packages\",{\"1\":{\"7\":3}}],[\"p1\",{\"1\":{\"6\":1,\"40\":6}}],[\"p\",{\"1\":{\"6\":4,\"40\":4}}],[\"12\",{\"1\":{\"51\":1}}],[\"123\",{\"1\":{\"42\":1}}],[\"180\",{\"1\":{\"45\":2}}],[\"14\",{\"1\":{\"44\":1}}],[\"16\",{\"1\":{\"26\":1}}],[\"10\",{\"1\":{\"14\":2,\"19\":1,\"20\":1,\"21\":1,\"32\":1,\"35\":1,\"44\":1}}],[\"100\",{\"1\":{\"5\":1}}],[\"1\",{\"0\":{\"50\":1},\"1\":{\"5\":1,\"18\":2,\"19\":2,\"20\":1,\"21\":1,\"23\":1,\"24\":2,\"31\":1,\"32\":1,\"50\":1,\"51\":1}}],[\"0x15\",{\"1\":{\"43\":2}}],[\"0xc000086020\",{\"1\":{\"38\":1}}],[\"0101\",{\"1\":{\"43\":2}}],[\"0b0001\",{\"1\":{\"43\":2}}],[\"0o25\",{\"1\":{\"43\":2}}],[\"0\",{\"1\":{\"5\":1,\"17\":1,\"20\":2,\"21\":3,\"23\":1,\"26\":2,\"32\":2,\"49\":1}}],[\"hold\",{\"1\":{\"44\":2}}],[\"how\",{\"0\":{\"40\":1}}],[\"have\",{\"0\":{\"43\":1},\"1\":{\"42\":1}}],[\"hash\",{\"1\":{\"14\":1}}],[\"has\",{\"1\":{\"3\":1,\"23\":1,\"42\":1}}],[\"hi\",{\"1\":{\"29\":1}}],[\"height\",{\"1\":{\"45\":4}}],[\"hexadecimal\",{\"1\":{\"43\":1}}],[\"here\",{\"1\":{\"15\":1}}],[\"hello\",{\"1\":{\"5\":1,\"17\":1,\"18\":1,\"23\":2,\"42\":1}}],[\"d\",{\"1\":{\"50\":2,\"51\":2}}],[\"do\",{\"1\":{\"44\":1}}],[\"doesn\",{\"1\":{\"42\":1}}],[\"does\",{\"0\":{\"42\":1},\"1\":{\"6\":1}}],[\"dynamically\",{\"1\":{\"39\":2}}],[\"dynamic\",{\"1\":{\"32\":1,\"39\":1}}],[\"day\",{\"1\":{\"18\":1}}],[\"dayofweek\",{\"1\":{\"18\":2}}],[\"data\",{\"0\":{\"25\":1},\"1\":{\"5\":1,\"12\":3,\"21\":1,\"31\":2,\"32\":5,\"33\":2,\"35\":1,\"38\":3,\"39\":8}}],[\"differences\",{\"1\":{\"47\":1}}],[\"difference\",{\"0\":{\"44\":1,\"47\":1}}],[\"different\",{\"0\":{\"43\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1},\"1\":{\"18\":2,\"43\":1}}],[\"directly\",{\"1\":{\"18\":1,\"39\":2,\"40\":2}}],[\"direct\",{\"1\":{\"7\":1}}],[\"during\",{\"1\":{\"7\":1,\"39\":1}}],[\"dereferencing\",{\"0\":{\"40\":1}}],[\"dereference\",{\"1\":{\"38\":1,\"40\":2}}],[\"decimal\",{\"1\":{\"27\":1,\"43\":2}}],[\"declaring\",{\"1\":{\"5\":1}}],[\"declared\",{\"1\":{\"5\":1}}],[\"declare\",{\"1\":{\"3\":2,\"5\":2,\"6\":1,\"10\":3,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"33\":1,\"45\":2}}],[\"declaration\",{\"0\":{\"4\":1},\"1\":{\"3\":1,\"33\":1}}],[\"description\",{\"1\":{\"26\":1}}],[\"definition\",{\"1\":{\"45\":2}}],[\"define\",{\"1\":{\"8\":1,\"9\":6,\"35\":1,\"38\":1,\"45\":2}}],[\"defer\",{\"0\":{\"23\":1},\"1\":{\"23\":6}}],[\"defergo\",{\"1\":{\"3\":1}}],[\"default\",{\"1\":{\"6\":1,\"18\":5}}],[\"==\",{\"1\":{\"19\":1,\"20\":1,\"43\":3}}],[\"=range\",{\"1\":{\"19\":3}}],[\"=0\",{\"1\":{\"19\":1}}],[\"=\",{\"1\":{\"5\":6,\"9\":1,\"10\":4,\"12\":2,\"14\":2,\"18\":2,\"19\":2,\"20\":1,\"21\":5,\"23\":2,\"28\":2,\"29\":2,\"30\":2,\"31\":1,\"32\":2,\"33\":2,\"34\":1,\"35\":2,\"38\":3,\"40\":3,\"44\":1,\"45\":6,\"49\":2,\"50\":2,\"51\":3}}],[\"o\",{\"1\":{\"51\":1}}],[\"optionally\",{\"1\":{\"45\":1}}],[\"operation\",{\"1\":{\"40\":2}}],[\"operations\",{\"1\":{\"21\":1}}],[\"operator\",{\"1\":{\"38\":2}}],[\"operators\",{\"1\":{\"38\":1}}],[\"others\",{\"0\":{\"46\":1}}],[\"other\",{\"1\":{\"45\":1}}],[\"occupy\",{\"1\":{\"51\":2}}],[\"occupies\",{\"0\":{\"50\":2},\"1\":{\"50\":4,\"51\":4}}],[\"occupied\",{\"0\":{\"50\":1}}],[\"occur\",{\"1\":{\"44\":1}}],[\"octal\",{\"1\":{\"43\":1}}],[\"object\",{\"0\":{\"40\":1},\"1\":{\"40\":1,\"45\":2}}],[\"outside\",{\"1\":{\"35\":1}}],[\"output\",{\"1\":{\"33\":1,\"38\":3,\"50\":1,\"51\":2}}],[\"out\",{\"1\":{\"23\":1}}],[\"original\",{\"1\":{\"39\":1}}],[\"ordinary\",{\"1\":{\"38\":2}}],[\"order\",{\"1\":{\"23\":1}}],[\"or\",{\"1\":{\"10\":1,\"23\":2,\"26\":1,\"30\":1}}],[\"one\",{\"1\":{\"18\":1,\"21\":1,\"39\":1,\"51\":1}}],[\"on\",{\"1\":{\"10\":1,\"18\":1,\"26\":1,\"32\":1}}],[\"only\",{\"1\":{\"7\":1,\"9\":1,\"42\":1,\"49\":1,\"51\":2}}],[\"once\",{\"1\":{\"5\":1,\"29\":1,\"31\":1}}],[\"omitted\",{\"1\":{\"5\":1}}],[\"of\",{\"1\":{\"3\":1,\"7\":1,\"10\":2,\"12\":3,\"14\":2,\"18\":1,\"19\":1,\"23\":3,\"24\":1,\"29\":2,\"31\":3,\"33\":3,\"34\":2,\"35\":3,\"38\":1,\"39\":5,\"40\":1,\"42\":3,\"43\":1,\"44\":3,\"45\":3,\"48\":2,\"49\":1}}],[\"words\",{\"1\":{\"45\":1}}],[\"world\",{\"1\":{\"17\":1,\"18\":2,\"23\":2,\"42\":1,\"51\":3}}],[\"way\",{\"1\":{\"28\":1,\"45\":1}}],[\"wait\",{\"1\":{\"21\":1}}],[\"want\",{\"1\":{\"18\":1,\"51\":1}}],[\"write\",{\"1\":{\"13\":1}}],[\"within\",{\"1\":{\"35\":1,\"49\":1}}],[\"with\",{\"1\":{\"14\":2,\"18\":1,\"19\":1,\"26\":2,\"28\":1,\"42\":1}}],[\"without\",{\"1\":{\"7\":1,\"39\":1}}],[\"will\",{\"1\":{\"5\":1,\"7\":1,\"14\":1,\"18\":1,\"21\":2,\"29\":1,\"40\":2,\"44\":1,\"45\":1}}],[\"wednesday\",{\"1\":{\"18\":1}}],[\"we\",{\"1\":{\"7\":2,\"39\":3}}],[\"website\",{\"1\":{\"1\":1}}],[\"why\",{\"0\":{\"39\":1}}],[\"white\",{\"1\":{\"45\":1}}],[\"while\",{\"1\":{\"38\":1,\"51\":1}}],[\"which\",{\"1\":{\"5\":2,\"7\":1,\"31\":1,\"34\":1,\"42\":1,\"44\":1}}],[\"what\",{\"0\":{\"38\":1,\"42\":1,\"44\":1,\"45\":1,\"47\":1}}],[\"where\",{\"1\":{\"33\":1}}],[\"when\",{\"1\":{\"5\":1,\"39\":1}}],[\"mean\",{\"0\":{\"42\":1}}],[\"means\",{\"1\":{\"23\":1}}],[\"methods\",{\"1\":{\"45\":1}}],[\"method\",{\"1\":{\"40\":1,\"45\":4}}],[\"meet\",{\"1\":{\"39\":1}}],[\"memory\",{\"1\":{\"35\":1,\"39\":9}}],[\"more\",{\"1\":{\"23\":1}}],[\"monday\",{\"1\":{\"18\":1}}],[\"modified\",{\"1\":{\"29\":1,\"31\":1}}],[\"modifiers\",{\"0\":{\"22\":1},\"1\":{\"3\":1}}],[\"modify\",{\"1\":{\"3\":1,\"7\":2,\"29\":1,\"35\":1,\"39\":2}}],[\"m\",{\"1\":{\"7\":2,\"14\":2,\"33\":4,\"45\":1}}],[\"man\",{\"1\":{\"45\":4}}],[\"manipulate\",{\"1\":{\"39\":1}}],[\"main\",{\"1\":{\"18\":2,\"20\":2,\"21\":2,\"23\":4,\"24\":2,\"29\":2,\"32\":2,\"40\":3,\"43\":1,\"44\":3,\"45\":2}}],[\"mainly\",{\"1\":{\"1\":1,\"38\":1}}],[\"maps\",{\"1\":{\"45\":2}}],[\"mapping\",{\"1\":{\"33\":1}}],[\"map\",{\"0\":{\"14\":1,\"33\":2},\"1\":{\"14\":7,\"33\":7,\"45\":2}}],[\"make\",{\"1\":{\"12\":2,\"14\":2,\"21\":2,\"33\":2}}],[\"math\",{\"1\":{\"7\":4,\"45\":1}}],[\"male\",{\"1\":{\"5\":1}}],[\"multi\",{\"1\":{\"7\":1}}],[\"multiple\",{\"1\":{\"5\":1,\"6\":1,\"7\":1,\"10\":2,\"21\":2,\"43\":1}}],[\"must\",{\"1\":{\"5\":1,\"44\":1}}],[\"efficiency\",{\"1\":{\"39\":2}}],[\"efficient\",{\"1\":{\"39\":1}}],[\"error\",{\"1\":{\"29\":1,\"44\":1}}],[\"equal\",{\"1\":{\"43\":1}}],[\"equals\",{\"1\":{\"28\":1}}],[\"equivalent\",{\"1\":{\"9\":1,\"26\":3}}],[\"easily\",{\"1\":{\"39\":1}}],[\"easy\",{\"1\":{\"39\":1}}],[\"each\",{\"1\":{\"18\":1,\"45\":2}}],[\"eat\",{\"1\":{\"9\":1}}],[\"element\",{\"1\":{\"45\":1}}],[\"elements\",{\"1\":{\"3\":1,\"45\":1}}],[\"else\",{\"0\":{\"17\":1},\"1\":{\"17\":1}}],[\"encoded\",{\"1\":{\"51\":1}}],[\"entire\",{\"1\":{\"39\":1}}],[\"end\",{\"1\":{\"20\":5}}],[\"english\",{\"1\":{\"15\":1,\"44\":1,\"51\":1}}],[\"enumeration\",{\"1\":{\"5\":1}}],[\"empty\",{\"1\":{\"14\":1}}],[\"exit\",{\"1\":{\"18\":1}}],[\"expand\",{\"1\":{\"14\":1,\"38\":1,\"39\":1,\"40\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"47\":1}}],[\"explanation\",{\"1\":{\"7\":1}}],[\"executing\",{\"1\":{\"18\":2,\"20\":1,\"23\":2}}],[\"execution\",{\"1\":{\"3\":1,\"23\":2,\"39\":2}}],[\"executed\",{\"1\":{\"21\":1}}],[\"execute\",{\"1\":{\"7\":1,\"18\":1,\"20\":1}}],[\"example\",{\"1\":{\"5\":1,\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"38\":1,\"40\":2,\"43\":1,\"44\":1,\"51\":1}}],[\"fast\",{\"1\":{\"44\":2}}],[\"false\",{\"1\":{\"30\":2}}],[\"fallthrough\",{\"0\":{\"18\":1},\"1\":{\"18\":7}}],[\"filled\",{\"1\":{\"45\":1}}],[\"file\",{\"1\":{\"13\":1}}],[\"fields\",{\"1\":{\"34\":1}}],[\"final\",{\"1\":{\"23\":1}}],[\"finished\",{\"1\":{\"23\":1}}],[\"first\",{\"1\":{\"23\":1}}],[\"fibonacci\",{\"1\":{\"21\":2}}],[\"from\",{\"1\":{\"38\":2,\"40\":1}}],[\"front\",{\"1\":{\"35\":1}}],[\"friday\",{\"1\":{\"18\":2}}],[\"frequently\",{\"1\":{\"1\":1}}],[\"followed\",{\"1\":{\"45\":1}}],[\"follows\",{\"1\":{\"33\":1,\"45\":5}}],[\"following\",{\"1\":{\"18\":1,\"29\":1,\"42\":1,\"44\":1}}],[\"for\",{\"0\":{\"19\":1,\"40\":1},\"1\":{\"12\":3,\"17\":1,\"19\":8,\"20\":1,\"21\":3,\"23\":1,\"32\":1,\"38\":1,\"43\":1,\"44\":1,\"45\":4,\"51\":1}}],[\"fmt\",{\"1\":{\"7\":1,\"17\":2,\"18\":12,\"19\":5,\"20\":3,\"21\":3,\"23\":5,\"24\":4,\"29\":2,\"32\":2,\"33\":1,\"34\":1,\"38\":3,\"40\":5,\"43\":4,\"44\":2,\"50\":1,\"51\":3}}],[\"flexibility\",{\"1\":{\"39\":1}}],[\"float64\",{\"1\":{\"27\":1}}],[\"float32float64\",{\"1\":{\"42\":1}}],[\"float32\",{\"1\":{\"27\":1}}],[\"float\",{\"0\":{\"27\":1},\"1\":{\"28\":2,\"42\":1}}],[\"floating\",{\"0\":{\"27\":1},\"1\":{\"27\":1,\"28\":1}}],[\"flow\",{\"0\":{\"16\":1},\"1\":{\"3\":2}}],[\"flag\",{\"1\":{\"7\":2}}],[\"func\",{\"0\":{\"6\":1},\"1\":{\"6\":4,\"18\":1,\"20\":1,\"21\":3,\"23\":3,\"24\":3,\"29\":1,\"32\":1,\"40\":5,\"43\":1,\"44\":4,\"45\":2}}],[\"functions\",{\"1\":{\"3\":1,\"6\":1,\"7\":1,\"39\":2}}],[\"function\",{\"0\":{\"22\":1},\"1\":{\"3\":1,\"7\":1,\"23\":2,\"35\":2,\"44\":1}}],[\"female\",{\"1\":{\"5\":1}}],[\"so\",{\"1\":{\"51\":1}}],[\"some\",{\"1\":{\"3\":1,\"47\":1}}],[\"shows\",{\"1\":{\"43\":1}}],[\"shown\",{\"1\":{\"40\":2}}],[\"symbol\",{\"1\":{\"40\":1}}],[\"system\",{\"1\":{\"26\":1}}],[\"space\",{\"1\":{\"39\":1}}],[\"specific\",{\"1\":{\"42\":1}}],[\"specified\",{\"1\":{\"20\":1}}],[\"specify\",{\"1\":{\"5\":1}}],[\"special\",{\"1\":{\"3\":2,\"42\":1}}],[\"slice\",{\"1\":{\"45\":1}}],[\"slices\",{\"0\":{\"32\":2},\"1\":{\"32\":1,\"45\":3}}],[\"sleep\",{\"1\":{\"24\":1}}],[\"similarly\",{\"1\":{\"45\":1}}],[\"simpler\",{\"1\":{\"45\":1}}],[\"significance\",{\"1\":{\"39\":2}}],[\"signed\",{\"1\":{\"26\":3}}],[\"sizeof\",{\"1\":{\"50\":2,\"51\":2}}],[\"sizes\",{\"0\":{\"50\":1}}],[\"size\",{\"1\":{\"32\":1}}],[\"since\",{\"1\":{\"51\":1}}],[\"sin\",{\"1\":{\"7\":3}}],[\"single\",{\"1\":{\"7\":2,\"19\":1}}],[\"skip\",{\"1\":{\"19\":1}}],[\"say\",{\"1\":{\"40\":2}}],[\"save\",{\"1\":{\"39\":2,\"40\":2}}],[\"saturday\",{\"1\":{\"18\":2}}],[\"same\",{\"0\":{\"43\":1},\"1\":{\"10\":2,\"21\":1}}],[\"storage\",{\"1\":{\"39\":1}}],[\"stored\",{\"0\":{\"49\":1}}],[\"store\",{\"1\":{\"26\":2,\"35\":1,\"38\":2,\"49\":2}}],[\"starting\",{\"1\":{\"26\":2}}],[\"start\",{\"1\":{\"24\":2}}],[\"statements\",{\"1\":{\"18\":1,\"19\":1}}],[\"str\",{\"1\":{\"29\":3}}],[\"strings\",{\"0\":{\"29\":1},\"1\":{\"29\":1,\"42\":1,\"51\":1}}],[\"string\",{\"0\":{\"29\":1},\"1\":{\"9\":1,\"14\":4,\"15\":1,\"29\":3,\"33\":2,\"34\":1,\"40\":5,\"42\":3,\"44\":4,\"45\":5,\"51\":2}}],[\"struct\",{\"0\":{\"15\":1,\"34\":1},\"1\":{\"9\":1,\"15\":2,\"34\":1,\"40\":6,\"45\":2}}],[\"structures\",{\"0\":{\"34\":1},\"1\":{\"15\":1,\"34\":1,\"39\":3,\"45\":4}}],[\"structure\",{\"1\":{\"9\":1}}],[\"switch\",{\"0\":{\"18\":1},\"1\":{\"18\":3}}],[\"series\",{\"1\":{\"31\":1,\"34\":1}}],[\"sequence\",{\"1\":{\"29\":1}}],[\"second\",{\"1\":{\"24\":1}}],[\"selector\",{\"1\":{\"40\":3}}],[\"selectors\",{\"0\":{\"40\":1}}],[\"select\",{\"0\":{\"21\":1},\"1\":{\"21\":3}}],[\"sending\",{\"1\":{\"12\":2}}],[\"set\",{\"1\":{\"7\":1,\"33\":1}}],[\"s\",{\"1\":{\"7\":1,\"23\":1,\"29\":1,\"35\":1,\"45\":1}}],[\"su\",{\"1\":{\"45\":4}}],[\"sunday\",{\"1\":{\"18\":1}}],[\"support\",{\"1\":{\"6\":1}}],[\"supports\",{\"1\":{\"6\":1,\"7\":1}}],[\"such\",{\"1\":{\"5\":1,\"39\":1}}],[\"click\",{\"1\":{\"38\":1,\"39\":1,\"40\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"47\":1}}],[\"close\",{\"1\":{\"13\":1}}],[\"cumbersome\",{\"1\":{\"45\":1}}],[\"curly\",{\"1\":{\"45\":1}}],[\"current\",{\"1\":{\"19\":2}}],[\"custom\",{\"1\":{\"34\":1}}],[\"created\",{\"1\":{\"29\":1,\"31\":1,\"45\":1}}],[\"create\",{\"1\":{\"24\":1,\"39\":1}}],[\"cause\",{\"1\":{\"29\":1}}],[\"case\",{\"1\":{\"18\":13,\"21\":4}}],[\"capacity\",{\"1\":{\"14\":2,\"31\":1,\"32\":1,\"45\":1}}],[\"can\",{\"0\":{\"43\":1},\"1\":{\"5\":1,\"7\":3,\"17\":1,\"18\":1,\"20\":1,\"23\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"39\":9,\"40\":4,\"43\":2,\"45\":2,\"49\":2,\"51\":2}}],[\"cannot\",{\"1\":{\"3\":1,\"5\":1,\"29\":2,\"31\":1,\"44\":1}}],[\"chinese\",{\"1\":{\"45\":1,\"51\":2}}],[\"china\",{\"1\":{\"45\":2}}],[\"character\",{\"0\":{\"51\":1},\"1\":{\"48\":1,\"49\":3}}],[\"characters\",{\"0\":{\"49\":1},\"1\":{\"26\":2,\"29\":1,\"47\":1,\"49\":3}}],[\"chan<\",{\"1\":{\"12\":1}}],[\"channels\",{\"1\":{\"12\":1,\"21\":1}}],[\"channel\",{\"1\":{\"12\":6}}],[\"chan\",{\"0\":{\"12\":1},\"1\":{\"12\":5,\"21\":3}}],[\"changed\",{\"1\":{\"5\":1}}],[\"chaninterfacemapstruct\",{\"1\":{\"3\":1}}],[\"ch\",{\"1\":{\"12\":2}}],[\"c\",{\"1\":{\"5\":2,\"21\":5,\"29\":1}}],[\"colours\",{\"1\":{\"45\":1}}],[\"collection\",{\"1\":{\"42\":1}}],[\"collections\",{\"1\":{\"14\":1}}],[\"copying\",{\"1\":{\"39\":1}}],[\"coding\",{\"1\":{\"39\":1}}],[\"code\",{\"1\":{\"3\":1,\"29\":1,\"49\":2}}],[\"correct\",{\"1\":{\"44\":1}}],[\"corresponding\",{\"1\":{\"18\":1,\"33\":1}}],[\"coroutine\",{\"1\":{\"24\":1}}],[\"come\",{\"1\":{\"26\":1}}],[\"comes\",{\"1\":{\"18\":1}}],[\"commented\",{\"1\":{\"29\":1}}],[\"communication\",{\"1\":{\"21\":1}}],[\"command\",{\"1\":{\"7\":1}}],[\"complexdata2\",{\"1\":{\"28\":1}}],[\"complexdata\",{\"1\":{\"28\":1}}],[\"complex128\",{\"1\":{\"28\":1}}],[\"complex64complex128\",{\"1\":{\"42\":1}}],[\"complex64\",{\"1\":{\"28\":2}}],[\"complex\",{\"0\":{\"28\":2},\"1\":{\"28\":3,\"39\":1,\"42\":1}}],[\"completing\",{\"1\":{\"18\":1}}],[\"compiler\",{\"1\":{\"5\":1}}],[\"composed\",{\"1\":{\"29\":1,\"31\":1,\"34\":1}}],[\"composite\",{\"0\":{\"11\":1,\"45\":1},\"1\":{\"3\":1,\"45\":8}}],[\"compound\",{\"1\":{\"3\":1}}],[\"conventional\",{\"1\":{\"45\":1}}],[\"contain\",{\"1\":{\"27\":1,\"28\":1}}],[\"continue\",{\"0\":{\"19\":1},\"1\":{\"18\":1,\"19\":4,\"20\":1}}],[\"control\",{\"0\":{\"16\":1},\"1\":{\"3\":2}}],[\"condition\",{\"1\":{\"19\":1}}],[\"conditions\",{\"1\":{\"18\":1}}],[\"conditional\",{\"1\":{\"17\":1}}],[\"configure\",{\"1\":{\"14\":1}}],[\"consisting\",{\"1\":{\"14\":1}}],[\"construct\",{\"1\":{\"45\":1}}],[\"constant\",{\"1\":{\"5\":1,\"42\":3,\"44\":2}}],[\"constants\",{\"1\":{\"5\":1,\"42\":1}}],[\"const\",{\"0\":{\"5\":1},\"1\":{\"5\":6}}],[\"constfuncimportpackagetypevar\",{\"1\":{\"3\":1}}],[\"take\",{\"1\":{\"44\":1}}],[\"tamp\",{\"1\":{\"38\":2}}],[\"table\",{\"1\":{\"33\":1}}],[\"two\",{\"1\":{\"26\":2,\"38\":1,\"39\":1}}],[\"text\",{\"1\":{\"42\":1,\"44\":1}}],[\"terminate\",{\"1\":{\"23\":1}}],[\"test\",{\"1\":{\"6\":3}}],[\"time\",{\"1\":{\"21\":1,\"24\":3,\"45\":1}}],[\"tiger\",{\"1\":{\"9\":1}}],[\"tuesday\",{\"1\":{\"18\":1}}],[\"translate\",{\"1\":{\"44\":1}}],[\"translation\",{\"1\":{\"15\":1}}],[\"trees\",{\"1\":{\"39\":1}}],[\"true\",{\"1\":{\"5\":1,\"30\":2}}],[\"t5\",{\"1\":{\"6\":1}}],[\"t4\",{\"1\":{\"6\":1}}],[\"t3\",{\"1\":{\"6\":1}}],[\"t2\",{\"1\":{\"6\":1}}],[\"t1\",{\"1\":{\"6\":2}}],[\"t\",{\"1\":{\"5\":2,\"6\":4,\"10\":4,\"12\":8,\"42\":1,\"44\":2}}],[\"together\",{\"1\":{\"45\":1}}],[\"to\",{\"0\":{\"40\":1},\"1\":{\"3\":4,\"5\":1,\"6\":1,\"7\":4,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":2,\"15\":1,\"18\":3,\"19\":3,\"20\":4,\"21\":1,\"23\":3,\"24\":1,\"26\":4,\"28\":1,\"35\":3,\"38\":3,\"39\":3,\"40\":3,\"42\":1,\"43\":1,\"44\":6,\"45\":4,\"47\":2,\"49\":2,\"51\":1}}],[\"types\",{\"0\":{\"4\":1,\"11\":1,\"48\":1},\"1\":{\"3\":2,\"9\":2,\"10\":1,\"26\":4,\"47\":1}}],[\"type\",{\"0\":{\"9\":1,\"25\":1},\"1\":{\"3\":1,\"5\":1,\"6\":1,\"9\":6,\"10\":2,\"12\":3,\"13\":1,\"15\":1,\"26\":2,\"27\":1,\"28\":1,\"29\":1,\"30\":2,\"33\":2,\"34\":1,\"40\":5,\"42\":8,\"45\":3,\"48\":2,\"51\":2}}],[\"three\",{\"1\":{\"43\":1}}],[\"through\",{\"1\":{\"33\":1,\"39\":3}}],[\"those\",{\"1\":{\"26\":1}}],[\"thursday\",{\"1\":{\"18\":2}}],[\"them\",{\"1\":{\"47\":1}}],[\"they\",{\"1\":{\"43\":1,\"45\":1}}],[\"thereby\",{\"1\":{\"39\":2}}],[\"there\",{\"1\":{\"26\":1,\"42\":1,\"47\":1,\"51\":1}}],[\"their\",{\"1\":{\"7\":1,\"32\":1}}],[\"the\",{\"0\":{\"43\":1,\"44\":1,\"47\":1},\"1\":{\"3\":2,\"5\":2,\"6\":2,\"7\":3,\"8\":1,\"10\":2,\"14\":1,\"15\":1,\"18\":4,\"19\":4,\"20\":1,\"21\":1,\"23\":4,\"24\":2,\"28\":1,\"29\":2,\"30\":2,\"31\":1,\"32\":1,\"33\":10,\"35\":3,\"38\":3,\"39\":8,\"40\":6,\"42\":2,\"43\":3,\"44\":3,\"45\":6,\"49\":1,\"51\":3}}],[\"these\",{\"1\":{\"3\":3,\"42\":1}}],[\"that\",{\"1\":{\"3\":1,\"27\":1,\"32\":1,\"42\":1,\"43\":1,\"51\":1}}],[\"this\",{\"1\":{\"1\":1,\"39\":1,\"40\":5,\"42\":1,\"44\":1}}],[\"improving\",{\"1\":{\"39\":1}}],[\"improve\",{\"1\":{\"39\":1}}],[\"important\",{\"1\":{\"39\":1}}],[\"imported\",{\"1\":{\"7\":2}}],[\"imports\",{\"1\":{\"7\":2}}],[\"import\",{\"0\":{\"7\":1},\"1\":{\"7\":12,\"18\":1,\"20\":1,\"21\":1,\"23\":2,\"24\":1,\"29\":1,\"32\":1,\"43\":1,\"50\":1}}],[\"imaginary\",{\"1\":{\"28\":3}}],[\"i++\",{\"1\":{\"19\":1,\"21\":1}}],[\"i\",{\"1\":{\"19\":15,\"20\":5,\"21\":2,\"23\":4,\"32\":4}}],[\"ifelse\",{\"1\":{\"17\":1}}],[\"if\",{\"0\":{\"17\":1},\"1\":{\"17\":1,\"18\":1,\"19\":2,\"20\":1,\"21\":1,\"44\":1,\"51\":1}}],[\"iota\",{\"1\":{\"5\":2}}],[\"iteration\",{\"1\":{\"19\":1}}],[\"it\",{\"1\":{\"5\":1,\"14\":1,\"18\":1,\"23\":1,\"29\":1,\"35\":1,\"38\":1,\"39\":1,\"40\":2,\"42\":1,\"44\":3}}],[\"identifier2\",{\"1\":{\"5\":1}}],[\"identifier1\",{\"1\":{\"5\":1}}],[\"identifier\",{\"1\":{\"5\":1}}],[\"identifiers\",{\"1\":{\"3\":1,\"7\":1}}],[\"isnumber\",{\"1\":{\"30\":3}}],[\"is\",{\"0\":{\"38\":1,\"44\":1,\"45\":1,\"47\":1},\"1\":{\"5\":2,\"6\":3,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":2,\"15\":2,\"17\":1,\"18\":1,\"19\":1,\"23\":3,\"24\":1,\"29\":2,\"30\":1,\"33\":4,\"39\":1,\"40\":1,\"42\":3,\"44\":5,\"45\":3,\"48\":2,\"49\":2,\"51\":1}}],[\"instance\",{\"1\":{\"40\":1}}],[\"instead\",{\"1\":{\"39\":1,\"40\":1}}],[\"involves\",{\"1\":{\"38\":1}}],[\"invalid\",{\"1\":{\"18\":1}}],[\"index\",{\"1\":{\"31\":1}}],[\"include\",{\"1\":{\"26\":2}}],[\"information\",{\"1\":{\"21\":1}}],[\"infer\",{\"1\":{\"5\":1,\"10\":1}}],[\"init\",{\"1\":{\"7\":1}}],[\"initialize\",{\"1\":{\"10\":2,\"28\":2,\"33\":1,\"45\":2}}],[\"initialization\",{\"1\":{\"7\":1,\"14\":1,\"19\":1,\"45\":2}}],[\"initial\",{\"1\":{\"5\":1,\"14\":1}}],[\"in\",{\"0\":{\"47\":1},\"1\":{\"3\":1,\"23\":1,\"24\":1,\"26\":3,\"35\":1,\"39\":3,\"40\":2,\"45\":2,\"47\":1,\"51\":2}}],[\"intuint\",{\"1\":{\"26\":1}}],[\"int64uint64\",{\"1\":{\"26\":1}}],[\"int16uint16\",{\"1\":{\"26\":1}}],[\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",{\"1\":{\"42\":1}}],[\"int8uint8\",{\"1\":{\"26\":1}}],[\"integer\",{\"1\":{\"26\":1,\"42\":1}}],[\"integers\",{\"0\":{\"26\":1},\"1\":{\"26\":7}}],[\"interrupt\",{\"1\":{\"19\":1}}],[\"interfaces\",{\"1\":{\"13\":1}}],[\"interface\",{\"0\":{\"13\":1},\"1\":{\"9\":2,\"13\":2}}],[\"interview\",{\"1\":{\"1\":1}}],[\"int\",{\"0\":{\"26\":1},\"1\":{\"18\":1,\"19\":1,\"21\":3,\"26\":1,\"31\":1,\"32\":1,\"33\":2,\"35\":1,\"45\":3}}],[\"into\",{\"1\":{\"15\":1}}],[\"int32uint32\",{\"1\":{\"26\":1}}],[\"int32\",{\"1\":{\"9\":2,\"26\":1,\"48\":1}}],[\"introduction\",{\"1\":{\"3\":1}}],[\"introduce\",{\"0\":{\"1\":1}}],[\"both\",{\"1\":{\"47\":1}}],[\"boolean\",{\"1\":{\"30\":1,\"42\":1}}],[\"booleans\",{\"0\":{\"30\":1}}],[\"bool\",{\"0\":{\"30\":1},\"1\":{\"13\":2,\"30\":2,\"42\":1}}],[\"black\",{\"1\":{\"45\":2}}],[\"block\",{\"1\":{\"21\":1}}],[\"braces\",{\"1\":{\"45\":1}}],[\"break\",{\"0\":{\"19\":1},\"1\":{\"18\":1,\"19\":3}}],[\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",{\"1\":{\"3\":1}}],[\"but\",{\"1\":{\"44\":1,\"47\":1}}],[\"buffer\",{\"1\":{\"13\":2}}],[\"buffered\",{\"1\":{\"12\":1}}],[\"binary\",{\"1\":{\"43\":1}}],[\"bit\",{\"1\":{\"28\":2}}],[\"bits\",{\"1\":{\"26\":1,\"27\":1,\"28\":1}}],[\"background\",{\"1\":{\"24\":1}}],[\"based\",{\"1\":{\"10\":1,\"18\":1,\"26\":1,\"32\":1}}],[\"basic\",{\"0\":{\"36\":1},\"1\":{\"1\":1,\"42\":3}}],[\"bytes\",{\"0\":{\"50\":1},\"1\":{\"50\":3,\"51\":4}}],[\"byte\",{\"0\":{\"47\":1,\"50\":3},\"1\":{\"26\":1,\"47\":1,\"48\":2,\"49\":2,\"50\":2,\"51\":4}}],[\"by\",{\"1\":{\"18\":1,\"31\":1,\"39\":1,\"43\":2,\"44\":1,\"45\":2}}],[\"b\",{\"1\":{\"5\":2,\"13\":2,\"49\":1,\"50\":3,\"51\":4}}],[\"below\",{\"1\":{\"40\":2,\"42\":1}}],[\"between\",{\"0\":{\"44\":1,\"47\":1},\"1\":{\"39\":2,\"47\":1}}],[\"being\",{\"1\":{\"28\":1}}],[\"before\",{\"1\":{\"23\":3}}],[\"be\",{\"1\":{\"3\":1,\"5\":2,\"7\":1,\"17\":1,\"21\":1,\"29\":1,\"31\":2,\"34\":1,\"40\":2,\"43\":2,\"45\":3}}],[\"kind\",{\"1\":{\"42\":2,\"44\":1}}],[\"keytype\",{\"1\":{\"33\":2}}],[\"key\",{\"1\":{\"14\":1,\"33\":3,\"45\":1}}],[\"keywords\",{\"0\":{\"2\":1,\"3\":1},\"1\":{\"3\":5}}],[\"knowledge\",{\"1\":{\"1\":1}}],[\"automatic\",{\"0\":{\"40\":1}}],[\"automatically\",{\"1\":{\"14\":1,\"18\":1,\"32\":1,\"45\":1}}],[\"avoiding\",{\"1\":{\"39\":1}}],[\"about\",{\"1\":{\"38\":1}}],[\"addressable\",{\"1\":{\"44\":2}}],[\"address\",{\"1\":{\"35\":2,\"38\":4,\"44\":2}}],[\"adjust\",{\"1\":{\"32\":1}}],[\"append\",{\"1\":{\"32\":1}}],[\"achieving\",{\"1\":{\"39\":1}}],[\"access\",{\"1\":{\"39\":2}}],[\"accessed\",{\"1\":{\"31\":1,\"34\":1}}],[\"action\",{\"1\":{\"18\":2}}],[\"actions\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"23\":1,\"24\":1}}],[\"architecture\",{\"1\":{\"26\":1}}],[\"arrays\",{\"0\":{\"31\":1},\"1\":{\"31\":1,\"32\":1,\"45\":3}}],[\"array\",{\"0\":{\"31\":1},\"1\":{\"19\":4,\"31\":1}}],[\"are\",{\"1\":{\"3\":3,\"26\":3,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"34\":1,\"42\":2,\"43\":1,\"45\":2,\"47\":2,\"51\":2}}],[\"after\",{\"1\":{\"18\":2,\"23\":1}}],[\"at\",{\"1\":{\"14\":1,\"21\":1,\"39\":1}}],[\"allocation\",{\"1\":{\"39\":1}}],[\"allocate\",{\"1\":{\"39\":3}}],[\"allow\",{\"1\":{\"35\":1}}],[\"allows\",{\"1\":{\"7\":1,\"21\":1}}],[\"all\",{\"1\":{\"26\":1}}],[\"although\",{\"1\":{\"14\":1}}],[\"alias\",{\"1\":{\"9\":1,\"48\":2}}],[\"aliases\",{\"1\":{\"7\":2}}],[\"also\",{\"1\":{\"7\":2,\"26\":1,\"40\":1}}],[\"a\",{\"0\":{\"38\":2,\"44\":2,\"45\":1},\"1\":{\"5\":3,\"9\":2,\"17\":1,\"18\":3,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"27\":1,\"28\":2,\"29\":2,\"31\":1,\"33\":4,\"34\":3,\"35\":4,\"38\":1,\"39\":1,\"40\":3,\"42\":4,\"43\":1,\"44\":7,\"45\":6,\"49\":1,\"50\":4,\"51\":4}}],[\"any\",{\"1\":{\"49\":1}}],[\"another\",{\"1\":{\"28\":1}}],[\"animal\",{\"1\":{\"9\":1,\"34\":2,\"40\":10}}],[\"an\",{\"1\":{\"5\":1,\"9\":2,\"14\":2,\"29\":1,\"31\":1,\"38\":2,\"39\":1,\"42\":1,\"44\":2,\"45\":1,\"48\":2}}],[\"and\",{\"0\":{\"38\":1,\"44\":1,\"47\":1},\"1\":{\"1\":1,\"5\":2,\"6\":1,\"7\":2,\"10\":2,\"12\":1,\"17\":1,\"18\":1,\"19\":3,\"23\":1,\"24\":1,\"26\":3,\"28\":1,\"29\":1,\"30\":1,\"33\":1,\"35\":1,\"38\":2,\"39\":8,\"40\":1,\"42\":1,\"44\":1,\"45\":11,\"47\":1}}],[\"assign\",{\"1\":{\"45\":2}}],[\"associated\",{\"1\":{\"42\":1}}],[\"ascii\",{\"1\":{\"26\":1,\"49\":2}}],[\"as\",{\"1\":{\"3\":1,\"5\":1,\"33\":1,\"35\":1,\"39\":2,\"40\":2,\"45\":5}}],[\"asked\",{\"1\":{\"1\":1}}],[\"g\",{\"1\":{\"51\":1}}],[\"graphs\",{\"1\":{\"39\":1}}],[\"get\",{\"1\":{\"23\":1,\"33\":1,\"35\":1,\"38\":2,\"40\":1}}],[\"go\",{\"0\":{\"24\":1,\"47\":1},\"1\":{\"21\":1,\"24\":3,\"44\":1,\"47\":1,\"51\":1}}],[\"goroutine\",{\"1\":{\"21\":1,\"24\":3}}],[\"goto\",{\"0\":{\"20\":1},\"1\":{\"20\":2}}],[\"golang\",{\"1\":{\"1\":1,\"3\":1,\"26\":2}}],[\"guide\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2},\"/\":{\"documentCount\":65,\"nextId\":65,\"documentIds\":{\"0\":\"v-fffb8e28\",\"1\":\"v-fffb8e28#介绍\",\"2\":\"v-c2a0ca9c\",\"3\":\"v-c2a0ca9c#保留关键字\",\"4\":\"v-c2a0ca9c#声明类型关键字\",\"5\":\"v-c2a0ca9c#const\",\"6\":\"v-c2a0ca9c#func\",\"7\":\"v-c2a0ca9c#import\",\"8\":\"v-c2a0ca9c#package\",\"9\":\"v-c2a0ca9c#type\",\"10\":\"v-c2a0ca9c#var\",\"11\":\"v-c2a0ca9c#复合类型\",\"12\":\"v-c2a0ca9c#chan\",\"13\":\"v-c2a0ca9c#interface\",\"14\":\"v-c2a0ca9c#map\",\"15\":\"v-c2a0ca9c#struct\",\"16\":\"v-c2a0ca9c#流程控制\",\"17\":\"v-c2a0ca9c#if-else\",\"18\":\"v-c2a0ca9c#switch-fallthrough\",\"19\":\"v-c2a0ca9c#for-break-continue-range\",\"20\":\"v-c2a0ca9c#goto\",\"21\":\"v-c2a0ca9c#select\",\"22\":\"v-c2a0ca9c#功能修饰\",\"23\":\"v-c2a0ca9c#defer\",\"24\":\"v-c2a0ca9c#go\",\"25\":\"v-e665420e\",\"26\":\"v-e665420e#整数-int\",\"27\":\"v-e665420e#浮点数-float\",\"28\":\"v-e665420e#复数-complex\",\"29\":\"v-e665420e#字符串-string\",\"30\":\"v-e665420e#布尔类型-bool\",\"31\":\"v-e665420e#数组-array\",\"32\":\"v-e665420e#分片-slices\",\"33\":\"v-e665420e#map-map\",\"34\":\"v-e665420e#结构体-struct\",\"35\":\"v-e665420e#指针-pointer\",\"36\":\"v-4ba30527\",\"37\":\"v-4ba30527#指针\",\"38\":\"v-4ba30527#什么是指针和指针变量\",\"39\":\"v-4ba30527#为什么使用指针\",\"40\":\"v-4ba30527#对象选择器自动解引用怎么用\",\"41\":\"v-4ba30527#字面量\",\"42\":\"v-4ba30527#字面量是什么意思\",\"43\":\"v-4ba30527#什么是有类型常量和无类型常量\",\"44\":\"v-4ba30527#不同字面量可能同值吗\",\"45\":\"v-4ba30527#字面量和变量的区别是什么\",\"46\":\"v-4ba30527#什么是组合字面量\",\"47\":\"v-4ba30527#其他\",\"48\":\"v-4ba30527#go-中的-rune-和-byte-有什么区别\",\"49\":\"v-4ba30527#类型不同\",\"50\":\"v-4ba30527#存储的字符不同\",\"51\":\"v-4ba30527#占用的字节大小不同-byte-占用1个字节-rune-占用4个字节。\",\"52\":\"v-4ba30527#表示的字符范围不同\",\"53\":\"v-4ba30527#语法相关基础\",\"54\":\"v-4ba30527#go-中-与-的不同是什么\",\"55\":\"v-5749b3fe\",\"56\":\"v-716b9f18\",\"57\":\"v-011899d6\",\"58\":\"v-51523ef8\",\"59\":\"v-a4e5eec0\",\"60\":\"v-79cbaa1f\",\"61\":\"v-5de33e8c\",\"62\":\"v-7ac35d0c\",\"63\":\"v-9c7680ea\",\"64\":\"v-288b4cce\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,4],\"2\":[1],\"3\":[1,25],\"4\":[1],\"5\":[1,31],\"6\":[1,19],\"7\":[1,27],\"8\":[1,2],\"9\":[1,19],\"10\":[1,19],\"11\":[1],\"12\":[1,18],\"13\":[1,12],\"14\":[1,18],\"15\":[1,8],\"16\":[1],\"17\":[2,14],\"18\":[2,49],\"19\":[4,37],\"20\":[1,28],\"21\":[1,36],\"22\":[1],\"23\":[1,33],\"24\":[1,21],\"25\":[1],\"26\":[3,46],\"27\":[3,7],\"28\":[3,24],\"29\":[3,23],\"30\":[3,11],\"31\":[3,13],\"32\":[3,31],\"33\":[3,28],\"34\":[3,15],\"35\":[3,14],\"36\":[1],\"37\":[1],\"38\":[2,22],\"39\":[2,29],\"40\":[2,29],\"41\":[1],\"42\":[2,26],\"43\":[2,39],\"44\":[2,21],\"45\":[2,34],\"46\":[2,49],\"47\":[1],\"48\":[7,10],\"49\":[2,8],\"50\":[2,19],\"51\":[6,21],\"52\":[2,45],\"53\":[1],\"54\":[6,28],\"55\":[1],\"56\":[1],\"57\":[1],\"58\":[1],\"59\":[1],\"60\":[1],\"61\":[1],\"62\":[1],\"63\":[1],\"64\":[1]},\"averageFieldLength\":[1.8,21.637294270073912],\"storedFields\":{\"0\":{\"h\":\"指南\"},\"1\":{\"h\":\"介绍\",\"t\":[\"本栏目主要提供 Golang 面试常见问题。\"]},\"2\":{\"h\":\"保留关键字\"},\"3\":{\"h\":\"保留关键字\",\"t\":[\"golang 有 25 个保留的关键字，这些关键字不能用作程序标识符。\",\"类型\",\"关键字\",\"介绍\",\"声明\",\"constfuncimportpackagetypevar\",\"这些关键字用于声明代码中的各种元素\",\"复合类型\",\"chaninterfacemapstruct\",\"这些关键字用于声明一些特殊的复合类型\",\"流程控制\",\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",\"这些关键字用于控制程序运行流程\",\"功能修饰\",\"defergo\",\"用于修饰特殊的 function\",\"注意\",\"注意： 下面的例子中的 T 表示任意类型\"]},\"4\":{\"h\":\"声明类型关键字\"},\"5\":{\"h\":\"const\",\"t\":[\"const 用于声明常量，常量一经声明就不能被更改，声明常量必须指定初始值。\",\"例子\",\"const identifier T = value // T 为数据类型，可以省略，编译器会自己推断。 const identifier1, identifier2 = value1, value2 // 声明多个，如 const a, b, c = \\\"hello\\\", 100, true const ( FeMale = 0 Male = 1 ) // 枚举 const ( a = iota b c ) // iota \"]},\"6\":{\"h\":\"func\",\"t\":[\"func 用于声明函数，支持多个返回值，不支持默认参数。\",\"例子\",\"// p 为参数， T 为类型 func Test(p T) {} func Test(p T) (T1, T2) {} func Test (p T, p1, T1, list ...T3) (T4, T5) {} // 不定参数 \"]},\"7\":{\"h\":\"import\",\"t\":[\"import 用于导入包，使用其公开的标识符。\",\"import 支持单行和多行导入。\",\"例子\",\"import \\\"flag\\\" // 单个导入 import ( \\\"flag\\\" \\\"fmt\\\" ) // 多个导入 \",\"我们还可以使用 ., _ 和别名修饰导入的包。\",\"导入命令\",\"使用方法\",\"解析\",\"import \\\"lib/math\\\"\",\"math.Sin\",\"普通导入需要使用包名\",\"import m \\\"lib/math\\\"\",\"m.Sin\",\"可以在导入时设置别名\",\"import . \\\"lib/math\\\" \",\"Sin\",\"使用 . 导入本地可以直接使用函数，不需要包名\",\"我们还可以使用 _ 来修饰导入的包，这样只会执行导入包的初始化函数 init()\"]},\"8\":{\"h\":\"package\",\"t\":[\"package 用于定义包名\"]},\"9\":{\"h\":\"type\",\"t\":[\"type 用于定义变量类型\",\"例子\",\"// 定义接口 type Animal interface { eat() } // 定义结构 type Tiger struct { Name string } // 定义等价类型 type Num int32 // 定义一个新的类型 type Num = int32 // 仅定义别名 \"]},\"10\":{\"h\":\"var\",\"t\":[\"var 用于声明公开或者私有变量\",\"例子\",\"var Name T // 公开变量 var name T // 私有变量 var name1, name2 T // 声明多个相同类型的变量 var name1, name2 T = val1, val2 // 声明多个相同类型的变量, 并初始化 var name1, name2 = val1, val2 // 根据 val1, val2 自动推断类型并初始化 // 使用括号 var ( name1 = val1 name2 = val2 ) \"]},\"11\":{\"h\":\"复合类型\"},\"12\":{\"h\":\"chan\",\"t\":[\"chan (Channel) 用于声明信道。\",\"例子\",\"// 用于发送和接收 T 类型的数据的信道 chan T // 用于发送 T 类型的数据的信道 <-chan T // 用于接收 T 类型的数据的信道 chan<- T \",\"ch := make(chan T) // 无缓冲信道 ch := make(chan T, 20) // 带缓冲信道 \"]},\"13\":{\"h\":\"interface\",\"t\":[\"interface 用于声明接口\",\"例子\",\"type File interface { Read(b Buffer) bool Write(b Buffer) bool Close() } \"]},\"14\":{\"h\":\"map\",\"t\":[\"map 用于声明集合，由无序的键值对组成，底层为 hash map. 虽然 map 会自动扩容，但是建议在初始化的时候就配置容量。\",\"例子\",\"m := make(map[string]string) // 空的 map m := make(map[string]string, 10) // 初始容量为 10 的 map \"]},\"15\":{\"h\":\"struct\",\"t\":[\"struct 用于声明结构体\",\"例子\",\"type Person struct { Name string } \"]},\"16\":{\"h\":\"流程控制\"},\"17\":{\"h\":\"if else\",\"t\":[\"ifelse 用于条件判断，可嵌套使用\",\"例子\",\"if a > 0 { fmt.Println(\\\"hello\\\") } else { fmt.Println(\\\"world\\\") } \"]},\"18\":{\"h\":\"switch fallthrough\",\"t\":[\"switch 用于根据不同条件执行不同的动作，默认每个 case 都带有 break, 执行完一个 case 会自动跳出，若希望继续执行下面的语句，需搭配 fallthrough\",\"例子\",\"a := \\\"2\\\" switch a { case \\\"1\\\": fmt.Println(\\\"hello\\\") case \\\"2\\\": fmt.Println(\\\"world\\\") default: // 默认操作 fmt.Println(\\\"default\\\") } // 结果： world \",\"使用 fallthrough 可以在执行完对应 case 后直接执行下一个 case 的动作\",\"package main import \\\"fmt\\\" func main() { var dayOfWeek int = 4 switch dayOfWeek { case 1: fmt.Println(\\\"Monday\\\") fallthrough case 2: fmt.Println(\\\"Tuesday\\\") fallthrough case 3: fmt.Println(\\\"Wednesday\\\") fallthrough case 4: fmt.Println(\\\"Thursday\\\") fallthrough case 5: fmt.Println(\\\"Friday\\\") fallthrough case 6: fmt.Println(\\\"Saturday\\\") case 7: fmt.Println(\\\"Sunday\\\") default: fmt.Println(\\\"Invalid Day\\\") } } // 结果： // Thursday // Friday // Saturday \"]},\"19\":{\"h\":\"for break continue range\",\"t\":[\"for 用于循环执行动作，使用 break 中断当前 for 循环， continue 用于跳过当前循环的剩余语句，继续执行下一轮循环\",\"例子\",\"// 单个条件 for i <= 10 { fmt.Println(i) i = i + 1 } // 初始化并判断 for i:=0; i < 3; i++ { fmt.Println(i) } // for range 遍历 array :=[]int{1, 2, 3, 4, 5} for i, v :=range array{ fmt.Println(i,v) } // break for i, v :=range array{ if i >= 2 { break } fmt.Println(i,v) } // continue for i, v :=range array{ if i == 2 { continue } fmt.Println(i,v) } \"]},\"20\":{\"h\":\"goto\",\"t\":[\"goto 可以跳到指定位置继续执行动作\",\"例子\",\"package main import \\\"fmt\\\" func main() { for i := 0; i < 10; i ++ { if i == 5 { goto end // 跳到 end 位置执行 } fmt.Println(i) } end: fmt.Println(\\\"end\\\") } // 结果： // 0 // 1 // 2 // 3 // 4 // end \"]},\"21\":{\"h\":\"select\",\"t\":[\"select 让 goroutine 等待多个通信操作，select 会阻塞直到一个 case 接收到信息，如果同时多个通道收到数据，则会随机执行一个 case\",\"例子\",\"package main import \\\"fmt\\\" func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c <- x: x, y = y, x+y case <-quit: fmt.Println(\\\"quit\\\") return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i < 10; i++ { fmt.Println(<-c) } quit <- 0 }() fibonacci(c, quit) } \"]},\"22\":{\"h\":\"功能修饰\"},\"23\":{\"h\":\"defer\",\"t\":[\"return 用于终止函数的执行并返回0个或多个返回值， defer 用于函数 return 之前或执行完之后执行动作\",\"例子\",\"package main import \\\"fmt\\\" func main() { defer fmt.Println(\\\"world\\\") fmt.Println(\\\"hello\\\") } // 结果 // hello // world \",\"注意：\",\"defer 的执行顺序是后进先出\",\"defer 在 return 之前执行意味着可以使用 defer 获取 return 之前变量的最终结果\",\"package main import \\\"fmt\\\" func main() { num := 1 defer func() { fmt.Println(num) }() for i := 0; i < 4; i ++ { num += i } } // 结果： // 7 \"]},\"24\":{\"h\":\"go\",\"t\":[\"go 用于创建协程（goroutine）, 在程序后台执行动作\",\"例子\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { go func(){ fmt.Println(\\\"no.1\\\") }() go func(){ fmt.Println(\\\"no.2\\\") }() fmt.Println(\\\"start goroutine\\\") time.Sleep(5*time.Second) } // 结果： // start goroutine // no.1 // no.2 \"]},\"25\":{\"h\":\"数据类型\"},\"26\":{\"h\":\"整数 (int)\",\"t\":[\"整数有两种类型：\",\"类型\",\"范围\",\"介绍\",\"有符号数 (signed integers)\",\"-∞ ~ +∞\",\"有符号数包含正数和负数\",\"无符号数 (unsigned integers)\",\"0 ~ +∞\",\"无符号数包含 0 和所有正数\",\"golang 中 int 开头为有符号数， uint 开头为无符号数\",\"Golang 中的整数类型：\",\"位\",\"类型\",\"8\",\"int8uint8\",\"16\",\"int16uint16\",\"32\",\"int32uint32\",\"64\",\"int64uint64\",\"32 或 64 (基于系统架构)\",\"intuint\",\"同时还有两个等价类型\",\"rune : 等价于 int32 , 用于存储 Unicode 字符\",\"byte ：等价于 uint8 , 用于存储 ASCII 字符\"]},\"27\":{\"h\":\"浮点数 (float)\",\"t\":[\"浮点数就是包含小数点的数字\",\"位\",\"类型\",\"32\",\"float32\",\"64\",\"float64\"]},\"28\":{\"h\":\"复数 (complex)\",\"t\":[\"复数包含虚数和实数，实数为浮点数\",\"位\",\"类型\",\"32 位浮点数 + 虚数\",\"complex64\",\"64 位浮点数 + 虚数\",\"complex128\",\"例子\",\"// 初始化一个复数 var complexData complex64 = complex(5, 3) // 等于： 5 + 3i // 另一种初始化方式 complexData2 := 5 + 3i \"]},\"29\":{\"h\":\"字符串 (string)\",\"t\":[\"字符串由一连串的字符组成，类型名称为 string\",\"字符串一旦创建，无法修改\",\"例子\",\"package main import \\\"fmt\\\" func main() { var str string := \\\"Hi! Jack\\\" // 不能修改，以下注释的代码会报错 // str[2] = 'c' fmt.Printf(\\\"%s\\\",str) } \"]},\"30\":{\"h\":\"布尔类型 (bool)\",\"t\":[\"布尔类型的值为 true 或 false, 类型名称为 bool\",\"例子\",\"var isNumber bool isNumber = true isNumber = false \"]},\"31\":{\"h\":\"数组 (array)\",\"t\":[\"数组由一系列数据组成，可通过下标获取数据\",\"数组的容量一经创建就无法修改\",\"例子\",\"data := [5]int{1, 2, 3, 4, 5} \"]},\"32\":{\"h\":\"分片 (slices)\",\"t\":[\"分片是动态的数组，可根据数据自动调整容量大小\",\"例子\",\"package main import \\\"fmt\\\" func main() { var data []int for i := 0; i < 10; i ++ { data = append(data, i) } fmt.Println(data) } // 结果 // [0 1 2 3 4 5 6 7 8 9] \"]},\"33\":{\"h\":\"Map (map)\",\"t\":[\"map 是一种键值映射表，通过 key 获取对应的 value\",\"map 的声明方式\",\"map[KeyType]ValueType \",\"KeyType 为 key 的数据类型 , ValueType 为 value 的数据类型\",\"例子\",\"// 声明 map var m map[string]int // 使用 make 初始化 map m = make(map[string]int) // 设置值 m[\\\"path\\\"] = 66 // 输出值 fmt.Println(m[\\\"path\\\"]) \"]},\"34\":{\"h\":\"结构体 (struct)\",\"t\":[\"结构体由一系列自定义的字段组成，可通过 . 获取字段内容\",\"例子\",\"type Animal struct { Name string } a := Animal{ Name: \\\"Lucky\\\" } fmt.Println(a.Name) \"]},\"35\":{\"h\":\"指针 (pointer)\",\"t\":[\"指针存储的是变量的内存地址，在变量前使用 * 定义为指针，使用 & 获取变量地址，通过指针可以在函数中修改函数外的数据\",\"例子\",\"var num *int n := 10 num = &n \"]},\"36\":{\"h\":\"基础\"},\"37\":{\"h\":\"指针\"},\"38\":{\"h\":\"什么是指针和指针变量?\",\"t\":[\"展开查看 普通变量存储数据，而指针变量存储的是数据的地址。 \",\"学习指针，主要有两个运算符号&和*。\",\"&：地址运算符，从变量中取地址\",\"// 定义普通变量并打印 num := 99 fmt.Println(num) //output: 99 ptr := &num fmt.Println(ptr) //output: 例如：0xc000086020 \",\"*：引用运算符，取地址中数据\",\"tamp := *ptr fmt.Println(tamp) //output: 99 \"]},\"39\":{\"h\":\"为什么使用指针？\",\"t\":[\"展开查看\",\"意义一：容易编码\",\"指针在数据结构中起着重要的作用。通过指针，我们可以创建复杂的数据结构，如链表、树和图。指针可在数据结构中轻松地访问和操作节点之间的关系，从而实现高效的数据存储和检索。\",\"指针可在函数之间传递数据的引用，而不是复制整个数据。这样可以节省内存空间，并提高程序的执行效率。通过传递指针，函数可以直接修改原始数据，而不需要返回值。\",\"意义二：节省内存\",\"指针可直接访问和修改内存中的数据，通过指针，我们可以在运行时动态地分配内存，以满足程序的需求，并在不需要时释放内存，避免内存泄漏。\",\"指针可在程序运行时动态地分配内存。通过动态内存分配，我们可以根据需要分配和释放内存，从而提高程序的灵活性和效率。\"]},\"40\":{\"h\":\"对象选择器自动解引用怎么用？\",\"t\":[\"展开查看\",\"从结构体实例对象中获取值，可用 . ，此符号为 选择器。\",\"此做法可省去 * 操作，选择器 . 会直接解引用，示例如下\",\"type animal struct { Name string } func main() { p1 := &animal{\\\"yikesu\\\"} fmt.Println(p1.Name) } \",\"过去通常如下\",\"type animal struct { Name string } func main() { p1 := &animal{\\\"yikesu\\\"} fmt.Println((*p1).Name) } \",\"还有可省去 * 操作，选择器 . 会直接解引用，示例如下\",\"type animal struct { Name string } func main() { p1 := &animal{\\\"yikesu\\\"} fmt.Println(p1.Name) } \",\"而可像下面这样\",\"type animal struct { name string } func (p *animal) Say() { fmt.Println(p.name) } \",\"不必像下面这样\",\"type animal struct { name string } func (p *animal) Say() { fmt.Println((*p).name) } \"]},\"41\":{\"h\":\"字面量\"},\"42\":{\"h\":\"字面量是什么意思？\",\"t\":[\"展开查看\",\"而下面这些基本类型值的文本，就是基本类型字面量。\",\"基本类型\",\"集合\",\"布尔类型\",\"bool\",\"字符串类\",\"string\",\"复数类型\",\"complex64complex128\",\"浮点类型\",\"float32float64\",\"整数类型\",\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",\"未命名常量是一种特殊的常量，它没有具体的名称。这种常量只有值，没有与之关联的变量名。 如下字符串都是字符串字面量，就是 未命名常量。\",\"\\\"hello，world\\\" \\\"123\\\" \"]},\"43\":{\"h\":\"什么是有类型常量和无类型常量？\",\"t\":[\"展开查看\",\"Golang 中，常量分为有类型常量和无类型常量。\",\"// 无类型常量 const A = 8 // 有类型常量 const colour string = \\\"red\\\" \",\"当无类型的常量被赋值给一个变量的时，无类型的常量会转化成对应的类型\",\"package main import \\\"fmt\\\" func main() { const A = 8 var t int16 = A fmt.Printf(\\\"%T \\\", t) }//输出： int16 \",\"或者进行显式的转换\",\"package main import \\\"fmt\\\" func main() { const A int8 = 8 var t int16 = int16(A) fmt.Printf(\\\"%T \\\", t) //输出： int16 } \",\"而有类型常量在赋值的时，类型不同会报错\",\"package main import \\\"fmt\\\" func main() { const A int8 = 8 var t int16 = A fmt.Printf(\\\"type: %T \\\\n\\\", t) //出错： cannot use A (type int8) as type int16 in assignment } \"]},\"44\":{\"h\":\"不同字面量可能同值吗？\",\"t\":[\"展开查看\",\"一个值可存在多种字面量表示，如下十进制的数值 21，可由三种字面量表示\",\"10进制\",\"8进制\",\"2进制\",\"16进制\",\"21\",\"0o25\",\"0b0001 0101\",\"0x15\",\"import \\\"fmt\\\" func main() { fmt.Println(21 == 0o25) fmt.Println(21 == 0x15 ) fmt.Println(21 == 0b0001 0101) }// 由运行结果得出他们相等 \"]},\"45\":{\"h\":\"字面量和变量的区别是什么？\",\"t\":[\"展开查看\",\"字面量，就是未命名的常量，跟常量一样，是不可寻址的。\",\"举例如下\",\"func run() string { return \\\"fast\\\" } func main() { fmt.Println(&run()) } \",\"./main.go:10:14: cannot take the address of run() \",\"若不用变量名承接，函数返回的一个字符串的文本值，也就是字符串字面量， 而这种字面量是不可寻址的，会出现错误。要用 & 寻址，须用变量名承接。\",\"而下面这样就没错\",\"func run() string { return \\\"fast\\\" } func main() { t := run() fmt.Println(&t) } \"]},\"46\":{\"h\":\"什么是组合字面量？\",\"t\":[\"展开查看\",\"组合字面量就是把对象的定义和初始化放在了一起，进一步说，组合字面量是为结构体、数组、切片和map构造值，并且每次都会创建新值。它们由字面量的类型后紧跟大括号及元素列表。每个元素前面可以选择性的带一个相关key。\",\"使用组合字面量会简单一些，而结构体、数组、切片和map的组合字面量方式如下。\",\"结构体用组合字面量方式来定义和初始化\",\"type man struct { nationality string height int } func main() { // 声明和属性赋值 su := man{ nationality: \\\"China\\\", height: 180, } } \",\"结构体用繁琐的常规方式如下\",\"type man struct { nationality string height int } func main() { // 声明对象 var su man // 属性赋值 su.nationality = \\\"China\\\" su.height = 180 } \",\"map用组合字面量方式的定义和初始化如下\",\"m := map[string]int { \\\"math\\\": 96, \\\"Chinese\\\": 90, } \",\"同样的，数组用组合字面量方式的定义和初始化可以如下\",\"colours := [3]string{\\\"black\\\", \\\"red\\\", \\\"white\\\"} \",\"切片的组合字面量方式如下\",\"s := []string{\\\"red\\\", \\\"black\\\"} //会自动补上切片的容量和长度 \"]},\"47\":{\"h\":\"其他\"},\"48\":{\"h\":\"Go 中的 rune 和 byte 有什么区别？\",\"t\":[\"展开查看\",\"在 Go 语言中，byte 和 rune 都是用于表示字符的类型，但它们之间有一些区别：\"]},\"49\":{\"h\":\"类型不同：\",\"t\":[\"byte ：字节，是 uint8 的别名类型\",\"rune ：字符，是 int32 的别名类型\"]},\"50\":{\"h\":\"存储的字符不同：\",\"t\":[\"//byte 用于表示 ASCII 码字符，只能存储 0-255 范围内的字符。 var a byte = 'Y' // ASCII 码字符 //rune 用于表示 Unicode 字符，可以存储任意 Unicode 字符。 var b rune = '酥' // Unicode 字符 \"]},\"51\":{\"h\":\"占用的字节大小不同：byte 占用1个字节，rune 占用4个字节。\",\"t\":[\"import \\\"unsafe\\\" var a byte = 'Y' var b rune = '酥' fmt.Printf(\\\"a 占用 %d 个字节数\\\\nb 占用 %d 个字节数\\\", unsafe.Sizeof(a), unsafe.Sizeof(b)) // 输出: a 占用 1 个字节数 b 占用 4 个字节数 \"]},\"52\":{\"h\":\"表示的字符范围不同：\",\"t\":[\"由于 byte 类型能表示的值是有限的，只有 2^8=256 个。所以想表示中文只能使用 rune 类型。\",\"字符串表示：在 Go 中，字符串是用 UTF-8 进行编码的，英文字母占用一个字节，而中文字母占用 3个字节1。例如：\",\"var world string = \\\"world,世界\\\" fmt.Println(len(world)) // 输出 12 var a byte = 'G' var b rune = 'O' fmt.Printf(\\\"a 占用 %d 个字节数 \\\", unsafe.Sizeof(a)) fmt.Printf(\\\"b 占用 %d 个字节数 \\\", unsafe.Sizeof(b)) // output a 占用 1 个字节数 b 占用 4 个字节数 \"]},\"53\":{\"h\":\"语法相关基础\"},\"54\":{\"h\":\"Go 中 = 与 := 的不同是什么？\",\"t\":[\"展开查看\",\" `=` 是赋值 `:=` 是声明并赋值 \",\"赋值前，要声明其类型。\",\"var people int people = 8 \",\"而用 := 可合成一行代码\",\"people := 8 \",\"一个变量仅能声明一次，不能多次用:=声明，多次用:=声明会出现如下错误\",\" no new variables on left side of := \"]},\"55\":{\"h\":\"Golang\"},\"56\":{\"h\":\"Concepts\"},\"57\":{\"h\":\"Golang\"},\"58\":{\"h\":\"Concepts\"},\"59\":{\"h\":\"Basic\"},\"60\":{\"h\":\"Golang\"},\"61\":{\"h\":\"Interview\"},\"62\":{\"h\":\"Basic\"},\"63\":{\"h\":\"Golang\"},\"64\":{\"h\":\"Interview\"}},\"dirtCount\":0,\"index\":[[\"多次用\",{\"1\":{\"54\":1}}],[\"多个导入\",{\"1\":{\"7\":1}}],[\"一个变量仅能声明一次\",{\"1\":{\"54\":1}}],[\"一个值可存在多种字面量表示\",{\"1\":{\"44\":1}}],[\"要声明其类型\",{\"1\":{\"54\":1}}],[\"要用\",{\"1\":{\"45\":1}}],[\"赋值前\",{\"1\":{\"54\":1}}],[\"`\",{\"1\":{\"54\":1}}],[\"`=`\",{\"1\":{\"54\":1}}],[\"与\",{\"0\":{\"54\":1}}],[\"语法相关基础\",{\"0\":{\"53\":1}}],[\"语言中\",{\"1\":{\"48\":1}}],[\"g\",{\"1\":{\"52\":1}}],[\"go\",{\"0\":{\"24\":1,\"48\":1,\"54\":1},\"1\":{\"21\":1,\"24\":3,\"45\":1,\"48\":1,\"52\":1}}],[\"goroutine\",{\"1\":{\"21\":1,\"24\":3}}],[\"goto\",{\"0\":{\"20\":1},\"1\":{\"20\":2}}],[\"golang\",{\"0\":{\"55\":1,\"57\":1,\"60\":1,\"63\":1},\"1\":{\"1\":1,\"3\":1,\"26\":2,\"43\":1}}],[\"世界\",{\"1\":{\"52\":1}}],[\"英文字母占用一个字节\",{\"1\":{\"52\":1}}],[\"进行编码的\",{\"1\":{\"52\":1}}],[\"进一步说\",{\"1\":{\"46\":1}}],[\"所以想表示中文只能使用\",{\"1\":{\"52\":1}}],[\"只有\",{\"1\":{\"52\":1}}],[\"只能存储\",{\"1\":{\"50\":1}}],[\"表示的字符范围不同\",{\"0\":{\"52\":1}}],[\"表示任意类型\",{\"1\":{\"3\":1}}],[\"个\",{\"1\":{\"52\":1}}],[\"个字节数\",{\"1\":{\"51\":4,\"52\":4}}],[\"个保留的关键字\",{\"1\":{\"3\":1}}],[\"占用\",{\"1\":{\"51\":4,\"52\":4}}],[\"占用4个字节\",{\"0\":{\"51\":1}}],[\"占用1个字节\",{\"0\":{\"51\":1}}],[\"占用的字节大小不同\",{\"0\":{\"51\":1}}],[\"酥\",{\"1\":{\"50\":1,\"51\":1}}],[\"码字符\",{\"1\":{\"50\":2}}],[\"存储的字符不同\",{\"0\":{\"50\":1}}],[\"但它们之间有一些区别\",{\"1\":{\"48\":1}}],[\"但是建议在初始化的时候就配置容量\",{\"1\":{\"14\":1}}],[\"都是用于表示字符的类型\",{\"1\":{\"48\":1}}],[\"都带有\",{\"1\":{\"18\":1}}],[\"其他\",{\"0\":{\"47\":1}}],[\"切片的组合字面量方式如下\",{\"1\":{\"46\":1}}],[\"切片和map的组合字面量方式如下\",{\"1\":{\"46\":1}}],[\"切片和map构造值\",{\"1\":{\"46\":1}}],[\"同样的\",{\"1\":{\"46\":1}}],[\"同时还有两个等价类型\",{\"1\":{\"26\":1}}],[\"属性赋值\",{\"1\":{\"46\":1}}],[\"每个元素前面可以选择性的带一个相关key\",{\"1\":{\"46\":1}}],[\"它们由字面量的类型后紧跟大括号及元素列表\",{\"1\":{\"46\":1}}],[\"它没有具体的名称\",{\"1\":{\"42\":1}}],[\"组合字面量是为结构体\",{\"1\":{\"46\":1}}],[\"组合字面量就是把对象的定义和初始化放在了一起\",{\"1\":{\"46\":1}}],[\"须用变量名承接\",{\"1\":{\"45\":1}}],[\"寻址\",{\"1\":{\"45\":1}}],[\"也就是字符串字面量\",{\"1\":{\"45\":1}}],[\"函数返回的一个字符串的文本值\",{\"1\":{\"45\":1}}],[\"函数可以直接修改原始数据\",{\"1\":{\"39\":1}}],[\"若不用变量名承接\",{\"1\":{\"45\":1}}],[\"若希望继续执行下面的语句\",{\"1\":{\"18\":1}}],[\"on\",{\"1\":{\"54\":1}}],[\"o\",{\"1\":{\"52\":1}}],[\"of\",{\"1\":{\"45\":1,\"54\":1}}],[\"output\",{\"1\":{\"38\":3,\"52\":1}}],[\"举例如下\",{\"1\":{\"45\":1}}],[\"是声明并赋值\",{\"1\":{\"54\":1}}],[\"是赋值\",{\"1\":{\"54\":1}}],[\"是\",{\"1\":{\"49\":2}}],[\"是不可寻址的\",{\"1\":{\"45\":1}}],[\"是一种键值映射表\",{\"1\":{\"33\":1}}],[\"跟常量一样\",{\"1\":{\"45\":1}}],[\"由于\",{\"1\":{\"52\":1}}],[\"由运行结果得出他们相等\",{\"1\":{\"44\":1}}],[\"由无序的键值对组成\",{\"1\":{\"14\":1}}],[\"出错\",{\"1\":{\"43\":1}}],[\"输出\",{\"1\":{\"43\":2,\"51\":1,\"52\":1}}],[\"输出值\",{\"1\":{\"33\":1}}],[\"当无类型的常量被赋值给一个变量的时\",{\"1\":{\"43\":1}}],[\"常量分为有类型常量和无类型常量\",{\"1\":{\"43\":1}}],[\"常量一经声明就不能被更改\",{\"1\":{\"5\":1}}],[\"什么是组合字面量\",{\"0\":{\"46\":1}}],[\"什么是有类型常量和无类型常量\",{\"0\":{\"43\":1}}],[\"什么是指针和指针变量\",{\"0\":{\"38\":1}}],[\"未命名常量\",{\"1\":{\"42\":1}}],[\"未命名常量是一种特殊的常量\",{\"1\":{\"42\":1}}],[\"就是未命名的常量\",{\"1\":{\"45\":1}}],[\"就是\",{\"1\":{\"42\":1}}],[\"就是基本类型字面量\",{\"1\":{\"42\":1}}],[\"没有与之关联的变量名\",{\"1\":{\"42\":1}}],[\"浮点类型\",{\"1\":{\"42\":1}}],[\"浮点数就是包含小数点的数字\",{\"1\":{\"27\":1}}],[\"浮点数\",{\"0\":{\"27\":1}}],[\"集合\",{\"1\":{\"42\":1}}],[\"字节\",{\"1\":{\"49\":1}}],[\"字面量和变量的区别是什么\",{\"0\":{\"45\":1}}],[\"字面量是什么意思\",{\"0\":{\"42\":1}}],[\"字面量\",{\"0\":{\"41\":1},\"1\":{\"45\":1}}],[\"字符串是用\",{\"1\":{\"52\":1}}],[\"字符串表示\",{\"1\":{\"52\":1}}],[\"字符串类\",{\"1\":{\"42\":1}}],[\"字符串一旦创建\",{\"1\":{\"29\":1}}],[\"字符串由一连串的字符组成\",{\"1\":{\"29\":1}}],[\"字符串\",{\"0\":{\"29\":1}}],[\"字符\",{\"1\":{\"26\":2,\"49\":1,\"50\":3}}],[\"还有可省去\",{\"1\":{\"40\":1}}],[\"过去通常如下\",{\"1\":{\"40\":1}}],[\"示例如下\",{\"1\":{\"40\":2}}],[\"操作\",{\"1\":{\"40\":2}}],[\"此做法可省去\",{\"1\":{\"40\":1}}],[\"此符号为\",{\"1\":{\"40\":1}}],[\"选择器\",{\"1\":{\"40\":3}}],[\"对象选择器自动解引用怎么用\",{\"0\":{\"40\":1}}],[\"避免内存泄漏\",{\"1\":{\"39\":1}}],[\"以满足程序的需求\",{\"1\":{\"39\":1}}],[\"以下注释的代码会报错\",{\"1\":{\"29\":1}}],[\"节省内存\",{\"1\":{\"39\":1}}],[\"意义二\",{\"1\":{\"39\":1}}],[\"意义一\",{\"1\":{\"39\":1}}],[\"并且每次都会创建新值\",{\"1\":{\"46\":1}}],[\"并在不需要时释放内存\",{\"1\":{\"39\":1}}],[\"并提高程序的执行效率\",{\"1\":{\"39\":1}}],[\"并初始化\",{\"1\":{\"10\":1}}],[\"而用\",{\"1\":{\"54\":1}}],[\"而中文字母占用\",{\"1\":{\"52\":1}}],[\"而结构体\",{\"1\":{\"46\":1}}],[\"而下面这样就没错\",{\"1\":{\"45\":1}}],[\"而下面这些基本类型值的文本\",{\"1\":{\"42\":1}}],[\"而这种字面量是不可寻址的\",{\"1\":{\"45\":1}}],[\"而有类型常量在赋值的时\",{\"1\":{\"43\":1}}],[\"而可像下面这样\",{\"1\":{\"40\":1}}],[\"而不需要返回值\",{\"1\":{\"39\":1}}],[\"而不是复制整个数据\",{\"1\":{\"39\":1}}],[\"而指针变量存储的是数据的地址\",{\"1\":{\"38\":1}}],[\"从结构体实例对象中获取值\",{\"1\":{\"40\":1}}],[\"从而提高程序的灵活性和效率\",{\"1\":{\"39\":1}}],[\"从而实现高效的数据存储和检索\",{\"1\":{\"39\":1}}],[\"从变量中取地址\",{\"1\":{\"38\":1}}],[\"树和图\",{\"1\":{\"39\":1}}],[\"我们可以根据需要分配和释放内存\",{\"1\":{\"39\":1}}],[\"我们可以在运行时动态地分配内存\",{\"1\":{\"39\":1}}],[\"我们可以创建复杂的数据结构\",{\"1\":{\"39\":1}}],[\"我们还可以使用\",{\"1\":{\"7\":2}}],[\"容易编码\",{\"1\":{\"39\":1}}],[\"取地址中数据\",{\"1\":{\"38\":1}}],[\"引用运算符\",{\"1\":{\"38\":1}}],[\"例如\",{\"1\":{\"38\":1,\"52\":1}}],[\"例子\",{\"1\":{\"5\":1,\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1}}],[\"地址运算符\",{\"1\":{\"38\":1}}],[\"主要有两个运算符号\",{\"1\":{\"38\":1}}],[\"学习指针\",{\"1\":{\"38\":1}}],[\"普通变量存储数据\",{\"1\":{\"38\":1}}],[\"普通导入需要使用包名\",{\"1\":{\"7\":1}}],[\"展开查看\",{\"1\":{\"38\":1,\"39\":1,\"40\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"48\":1,\"54\":1}}],[\"基本类型\",{\"1\":{\"42\":1}}],[\"基础\",{\"0\":{\"36\":1}}],[\"基于系统架构\",{\"1\":{\"26\":1}}],[\"指针可直接访问和修改内存中的数据\",{\"1\":{\"39\":1}}],[\"指针可在程序运行时动态地分配内存\",{\"1\":{\"39\":1}}],[\"指针可在函数之间传递数据的引用\",{\"1\":{\"39\":1}}],[\"指针可在数据结构中轻松地访问和操作节点之间的关系\",{\"1\":{\"39\":1}}],[\"指针在数据结构中起着重要的作用\",{\"1\":{\"39\":1}}],[\"指针存储的是变量的内存地址\",{\"1\":{\"35\":1}}],[\"指针\",{\"0\":{\"35\":1,\"37\":1}}],[\"指南\",{\"0\":{\"0\":1}}],[\"left\",{\"1\":{\"54\":1}}],[\"len\",{\"1\":{\"52\":1}}],[\"lucky\",{\"1\":{\"34\":1}}],[\"lib\",{\"1\":{\"7\":3}}],[\"list\",{\"1\":{\"6\":1}}],[\"结构体用繁琐的常规方式如下\",{\"1\":{\"46\":1}}],[\"结构体用组合字面量方式来定义和初始化\",{\"1\":{\"46\":1}}],[\"结构体由一系列自定义的字段组成\",{\"1\":{\"34\":1}}],[\"结构体\",{\"0\":{\"34\":1}}],[\"结果\",{\"1\":{\"18\":2,\"20\":1,\"23\":2,\"24\":1,\"32\":1}}],[\"设置值\",{\"1\":{\"33\":1}}],[\"keytype\",{\"1\":{\"33\":2}}],[\"key\",{\"1\":{\"33\":2}}],[\"通过动态内存分配\",{\"1\":{\"39\":1}}],[\"通过传递指针\",{\"1\":{\"39\":1}}],[\"通过指针\",{\"1\":{\"39\":2}}],[\"通过指针可以在函数中修改函数外的数据\",{\"1\":{\"35\":1}}],[\"通过\",{\"1\":{\"33\":1}}],[\"90\",{\"1\":{\"46\":1}}],[\"96\",{\"1\":{\"46\":1}}],[\"99\",{\"1\":{\"38\":3}}],[\"9\",{\"1\":{\"32\":1}}],[\"分片是动态的数组\",{\"1\":{\"32\":1}}],[\"分片\",{\"0\":{\"32\":1}}],[\"数组用组合字面量方式的定义和初始化可以如下\",{\"1\":{\"46\":1}}],[\"数组的容量一经创建就无法修改\",{\"1\":{\"31\":1}}],[\"数组由一系列数据组成\",{\"1\":{\"31\":1}}],[\"数组\",{\"0\":{\"31\":1},\"1\":{\"46\":2}}],[\"数据类型\",{\"0\":{\"25\":1}}],[\"布尔类型的值为\",{\"1\":{\"30\":1}}],[\"布尔类型\",{\"0\":{\"30\":1},\"1\":{\"42\":1}}],[\"jack\",{\"1\":{\"29\":1}}],[\"另一种初始化方式\",{\"1\":{\"28\":1}}],[\"虚数\",{\"1\":{\"28\":2}}],[\"实数为浮点数\",{\"1\":{\"28\":1}}],[\"复数类型\",{\"1\":{\"42\":1}}],[\"复数包含虚数和实数\",{\"1\":{\"28\":1}}],[\"复数\",{\"0\":{\"28\":1}}],[\"复合类型\",{\"0\":{\"11\":1},\"1\":{\"3\":1}}],[\"等于\",{\"1\":{\"28\":1}}],[\"等价于\",{\"1\":{\"26\":2}}],[\"等待多个通信操作\",{\"1\":{\"21\":1}}],[\"或者进行显式的转换\",{\"1\":{\"43\":1}}],[\"或\",{\"1\":{\"26\":1,\"30\":1}}],[\"8进制\",{\"1\":{\"44\":1}}],[\"8\",{\"1\":{\"26\":1,\"32\":1,\"43\":4,\"52\":1,\"54\":2}}],[\"位浮点数\",{\"1\":{\"28\":2}}],[\"位\",{\"1\":{\"26\":1,\"27\":1,\"28\":1}}],[\"位置执行\",{\"1\":{\"20\":1}}],[\"开头为无符号数\",{\"1\":{\"26\":1}}],[\"开头为有符号数\",{\"1\":{\"26\":1}}],[\"utf\",{\"1\":{\"52\":1}}],[\"use\",{\"1\":{\"43\":1}}],[\"unsafe\",{\"1\":{\"51\":3,\"52\":2}}],[\"unsigned\",{\"1\":{\"26\":1}}],[\"unicode\",{\"1\":{\"26\":1,\"50\":3}}],[\"uint8\",{\"1\":{\"26\":1,\"49\":1}}],[\"uint\",{\"1\":{\"26\":1}}],[\"中的\",{\"0\":{\"48\":1}}],[\"中的整数类型\",{\"1\":{\"26\":1}}],[\"中\",{\"0\":{\"54\":1},\"1\":{\"26\":1,\"43\":1,\"52\":1}}],[\"中断当前\",{\"1\":{\"19\":1}}],[\"和\",{\"0\":{\"48\":1},\"1\":{\"38\":1,\"48\":1}}],[\"和所有正数\",{\"1\":{\"26\":1}}],[\"和别名修饰导入的包\",{\"1\":{\"7\":1}}],[\"无类型的常量会转化成对应的类型\",{\"1\":{\"43\":1}}],[\"无类型常量\",{\"1\":{\"43\":1}}],[\"无法修改\",{\"1\":{\"29\":1}}],[\"无符号数包含\",{\"1\":{\"26\":1}}],[\"无符号数\",{\"1\":{\"26\":1}}],[\"无缓冲信道\",{\"1\":{\"12\":1}}],[\"~\",{\"1\":{\"26\":2}}],[\"∞\",{\"1\":{\"26\":1}}],[\"范围内的字符\",{\"1\":{\"50\":1}}],[\"范围\",{\"1\":{\"26\":1}}],[\"整数类型\",{\"1\":{\"42\":1}}],[\"整数有两种类型\",{\"1\":{\"26\":1}}],[\"整数\",{\"0\":{\"26\":1}}],[\"获取变量地址\",{\"1\":{\"35\":1}}],[\"获取字段内容\",{\"1\":{\"34\":1}}],[\"获取对应的\",{\"1\":{\"33\":1}}],[\"获取\",{\"1\":{\"23\":1}}],[\"之前变量的最终结果\",{\"1\":{\"23\":1}}],[\"之前执行意味着可以使用\",{\"1\":{\"23\":1}}],[\"之前或执行完之后执行动作\",{\"1\":{\"23\":1}}],[\"在变量前使用\",{\"1\":{\"35\":1}}],[\"在程序后台执行动作\",{\"1\":{\"24\":1}}],[\"在\",{\"1\":{\"23\":1,\"48\":1,\"52\":1}}],[\"yikesu\",{\"1\":{\"40\":3}}],[\"y\",{\"1\":{\"21\":3,\"50\":1,\"51\":1}}],[\"x+y\",{\"1\":{\"21\":1}}],[\"x\",{\"1\":{\"21\":3}}],[\"quit\",{\"1\":{\"21\":6}}],[\"则会随机执行一个\",{\"1\":{\"21\":1}}],[\"接收到信息\",{\"1\":{\"21\":1}}],[\"会出现错误\",{\"1\":{\"45\":1}}],[\"会直接解引用\",{\"1\":{\"40\":2}}],[\"会阻塞直到一个\",{\"1\":{\"21\":1}}],[\"会自动补上切片的容量和长度\",{\"1\":{\"46\":1}}],[\"会自动跳出\",{\"1\":{\"18\":1}}],[\"会自动扩容\",{\"1\":{\"14\":1}}],[\"让\",{\"1\":{\"21\":1}}],[\"跳到\",{\"1\":{\"20\":1}}],[\"v\",{\"1\":{\"19\":6}}],[\"val2\",{\"1\":{\"10\":4}}],[\"val1\",{\"1\":{\"10\":4}}],[\"valuetype\",{\"1\":{\"33\":2}}],[\"value2\",{\"1\":{\"5\":1}}],[\"value1\",{\"1\":{\"5\":1}}],[\"value\",{\"1\":{\"5\":1,\"33\":2}}],[\"variables\",{\"1\":{\"54\":1}}],[\"var\",{\"0\":{\"10\":1},\"1\":{\"10\":7,\"18\":1,\"28\":1,\"29\":1,\"30\":1,\"32\":1,\"33\":1,\"35\":1,\"43\":3,\"46\":1,\"50\":2,\"51\":2,\"52\":3,\"54\":1}}],[\"遍历\",{\"1\":{\"19\":1}}],[\"初始化\",{\"1\":{\"33\":1}}],[\"初始化一个复数\",{\"1\":{\"28\":1}}],[\"初始化并判断\",{\"1\":{\"19\":1}}],[\"初始容量为\",{\"1\":{\"14\":1}}],[\"+∞\",{\"1\":{\"26\":2}}],[\"+=\",{\"1\":{\"23\":1}}],[\"++\",{\"1\":{\"20\":1,\"23\":1,\"32\":1}}],[\"+\",{\"1\":{\"19\":1,\"28\":4}}],[\"单个条件\",{\"1\":{\"19\":1}}],[\"单个导入\",{\"1\":{\"7\":1}}],[\"继续执行下一轮循环\",{\"1\":{\"19\":1}}],[\"循环\",{\"1\":{\"19\":1}}],[\"run\",{\"1\":{\"45\":5}}],[\"rune\",{\"0\":{\"48\":1,\"51\":1},\"1\":{\"26\":1,\"48\":1,\"49\":1,\"50\":2,\"51\":1,\"52\":2}}],[\"red\",{\"1\":{\"43\":1,\"46\":2}}],[\"return\",{\"1\":{\"21\":1,\"23\":4,\"45\":2}}],[\"read\",{\"1\":{\"13\":1}}],[\"range\",{\"0\":{\"19\":1},\"1\":{\"19\":1}}],[\"7\",{\"1\":{\"18\":1,\"23\":1,\"32\":1}}],[\"66\",{\"1\":{\"33\":1}}],[\"64\",{\"1\":{\"26\":2,\"27\":1,\"28\":1}}],[\"6\",{\"1\":{\"18\":1,\"32\":1}}],[\"5\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"24\":1,\"28\":3,\"31\":2,\"32\":1}}],[\"3个字节1\",{\"1\":{\"52\":1}}],[\"3i\",{\"1\":{\"28\":2}}],[\"32\",{\"1\":{\"26\":2,\"27\":1,\"28\":1}}],[\"3\",{\"1\":{\"18\":1,\"19\":2,\"20\":1,\"28\":1,\"31\":1,\"32\":1,\"46\":1}}],[\"4\",{\"1\":{\"18\":2,\"19\":1,\"20\":1,\"23\":1,\"31\":1,\"32\":1,\"51\":1,\"52\":1}}],[\"d\",{\"1\":{\"51\":2,\"52\":2}}],[\"data\",{\"1\":{\"31\":1,\"32\":4}}],[\"day\",{\"1\":{\"18\":1}}],[\"dayofweek\",{\"1\":{\"18\":2}}],[\"defer\",{\"0\":{\"23\":1},\"1\":{\"23\":6}}],[\"defergo\",{\"1\":{\"3\":1}}],[\"default\",{\"1\":{\"18\":3}}],[\"后直接执行下一个\",{\"1\":{\"18\":1}}],[\"默认操作\",{\"1\":{\"18\":1}}],[\"默认每个\",{\"1\":{\"18\":1}}],[\"需搭配\",{\"1\":{\"18\":1}}],[\"执行完一个\",{\"1\":{\"18\":1}}],[\"white\",{\"1\":{\"46\":1}}],[\"wednesday\",{\"1\":{\"18\":1}}],[\"world\",{\"1\":{\"17\":1,\"18\":2,\"23\":2,\"42\":1,\"52\":3}}],[\"write\",{\"1\":{\"13\":1}}],[\">=\",{\"1\":{\"19\":1}}],[\">\",{\"1\":{\"17\":1}}],[\"可合成一行代码\",{\"1\":{\"54\":1}}],[\"可由三种字面量表示\",{\"1\":{\"44\":1}}],[\"可用\",{\"1\":{\"40\":1}}],[\"可通过\",{\"1\":{\"34\":1}}],[\"可通过下标获取数据\",{\"1\":{\"31\":1}}],[\"可根据数据自动调整容量大小\",{\"1\":{\"32\":1}}],[\"可嵌套使用\",{\"1\":{\"17\":1}}],[\"可以存储任意\",{\"1\":{\"50\":1}}],[\"可以跳到指定位置继续执行动作\",{\"1\":{\"20\":1}}],[\"可以在执行完对应\",{\"1\":{\"18\":1}}],[\"可以在导入时设置别名\",{\"1\":{\"7\":1}}],[\"可以省略\",{\"1\":{\"5\":1}}],[\"end\",{\"1\":{\"20\":5}}],[\"else\",{\"0\":{\"17\":1},\"1\":{\"17\":1}}],[\"eat\",{\"1\":{\"9\":1}}],[\"的不同是什么\",{\"0\":{\"54\":1}}],[\"的别名类型\",{\"1\":{\"49\":2}}],[\"的数据类型\",{\"1\":{\"33\":2}}],[\"的声明方式\",{\"1\":{\"33\":1}}],[\"的执行顺序是后进先出\",{\"1\":{\"23\":1}}],[\"的动作\",{\"1\":{\"18\":1}}],[\"的\",{\"1\":{\"14\":1}}],[\"空的\",{\"1\":{\"14\":1}}],[\"虽然\",{\"1\":{\"14\":1}}],[\"height\",{\"1\":{\"46\":4}}],[\"hello\",{\"1\":{\"5\":1,\"17\":1,\"18\":1,\"23\":2,\"42\":1}}],[\"hi\",{\"1\":{\"29\":1}}],[\"hash\",{\"1\":{\"14\":1}}],[\"底层为\",{\"1\":{\"14\":1}}],[\"带缓冲信道\",{\"1\":{\"12\":1}}],[\"2^8=256\",{\"1\":{\"52\":1}}],[\"2进制\",{\"1\":{\"44\":1}}],[\"21\",{\"1\":{\"44\":5}}],[\"2\",{\"1\":{\"18\":3,\"19\":3,\"20\":1,\"24\":2,\"29\":1,\"31\":1,\"32\":1}}],[\"20\",{\"1\":{\"12\":1}}],[\"255\",{\"1\":{\"50\":1}}],[\"25\",{\"1\":{\"3\":1}}],[\"<=\",{\"1\":{\"19\":1}}],[\"<\",{\"1\":{\"12\":1,\"19\":1,\"20\":1,\"21\":5,\"23\":1,\"32\":1}}],[\"自动推断类型并初始化\",{\"1\":{\"10\":1}}],[\"根据\",{\"1\":{\"10\":1}}],[\"私有变量\",{\"1\":{\"10\":1}}],[\"公开变量\",{\"1\":{\"10\":1}}],[\"仅定义别名\",{\"1\":{\"9\":1}}],[\"new\",{\"1\":{\"54\":1}}],[\"nb\",{\"1\":{\"51\":1}}],[\"nationality\",{\"1\":{\"46\":4}}],[\"name2\",{\"1\":{\"10\":4}}],[\"name1\",{\"1\":{\"10\":4}}],[\"name\",{\"1\":{\"9\":1,\"10\":2,\"15\":1,\"34\":3,\"40\":10}}],[\"n\",{\"1\":{\"35\":2,\"43\":1}}],[\"no\",{\"1\":{\"24\":4,\"54\":1}}],[\"num\",{\"1\":{\"9\":2,\"23\":3,\"35\":2,\"38\":3}}],[\"su\",{\"1\":{\"46\":4}}],[\"sunday\",{\"1\":{\"18\":1}}],[\"say\",{\"1\":{\"40\":2}}],[\"saturday\",{\"1\":{\"18\":2}}],[\"slices\",{\"0\":{\"32\":1}}],[\"sleep\",{\"1\":{\"24\":1}}],[\"s\",{\"1\":{\"29\":1,\"46\":1}}],[\"side\",{\"1\":{\"54\":1}}],[\"sizeof\",{\"1\":{\"51\":2,\"52\":2}}],[\"signed\",{\"1\":{\"26\":1}}],[\"sin\",{\"1\":{\"7\":3}}],[\"second\",{\"1\":{\"24\":1}}],[\"select\",{\"0\":{\"21\":1},\"1\":{\"21\":3}}],[\"start\",{\"1\":{\"24\":2}}],[\"str\",{\"1\":{\"29\":3}}],[\"string\",{\"0\":{\"29\":1},\"1\":{\"9\":1,\"14\":4,\"15\":1,\"29\":2,\"33\":2,\"34\":1,\"40\":5,\"42\":1,\"43\":1,\"45\":2,\"46\":5,\"52\":1}}],[\"struct\",{\"0\":{\"15\":1,\"34\":1},\"1\":{\"9\":1,\"15\":2,\"34\":1,\"40\":5,\"46\":2}}],[\"switch\",{\"0\":{\"18\":1},\"1\":{\"18\":3}}],[\"定义普通变量并打印\",{\"1\":{\"38\":1}}],[\"定义为指针\",{\"1\":{\"35\":1}}],[\"定义一个新的类型\",{\"1\":{\"9\":1}}],[\"定义等价类型\",{\"1\":{\"9\":1}}],[\"定义结构\",{\"1\":{\"9\":1}}],[\"定义接口\",{\"1\":{\"9\":1}}],[\"这种常量只有值\",{\"1\":{\"42\":1}}],[\"这样可以节省内存空间\",{\"1\":{\"39\":1}}],[\"这样只会执行导入包的初始化函数\",{\"1\":{\"7\":1}}],[\"这些关键字用于控制程序运行流程\",{\"1\":{\"3\":1}}],[\"这些关键字用于声明一些特殊的复合类型\",{\"1\":{\"3\":1}}],[\"这些关键字用于声明代码中的各种元素\",{\"1\":{\"3\":1}}],[\"这些关键字不能用作程序标识符\",{\"1\":{\"3\":1}}],[\"来修饰导入的包\",{\"1\":{\"7\":1}}],[\"导入本地可以直接使用函数\",{\"1\":{\"7\":1}}],[\"导入命令\",{\"1\":{\"7\":1}}],[\"monday\",{\"1\":{\"18\":1}}],[\"m\",{\"1\":{\"7\":2,\"14\":2,\"33\":4,\"46\":1}}],[\"man\",{\"1\":{\"46\":4}}],[\"main\",{\"1\":{\"18\":2,\"20\":2,\"21\":2,\"23\":4,\"24\":2,\"29\":2,\"32\":2,\"40\":3,\"43\":6,\"44\":1,\"45\":3,\"46\":2}}],[\"map用组合字面量方式的定义和初始化如下\",{\"1\":{\"46\":1}}],[\"map\",{\"0\":{\"14\":1,\"33\":2},\"1\":{\"14\":7,\"33\":7,\"46\":1}}],[\"make\",{\"1\":{\"12\":2,\"14\":2,\"21\":2,\"33\":2}}],[\"math\",{\"1\":{\"7\":4,\"46\":1}}],[\"male\",{\"1\":{\"5\":1}}],[\"解析\",{\"1\":{\"7\":1}}],[\"使用组合字面量会简单一些\",{\"1\":{\"46\":1}}],[\"使用括号\",{\"1\":{\"10\":1}}],[\"使用\",{\"1\":{\"7\":1,\"18\":1,\"19\":1,\"33\":1,\"35\":1}}],[\"使用方法\",{\"1\":{\"7\":1}}],[\"使用其公开的标识符\",{\"1\":{\"7\":1}}],[\"支持单行和多行导入\",{\"1\":{\"7\":1}}],[\"支持多个返回值\",{\"1\":{\"6\":1}}],[\"不能多次用\",{\"1\":{\"54\":1}}],[\"不能修改\",{\"1\":{\"29\":1}}],[\"不同字面量可能同值吗\",{\"0\":{\"44\":1}}],[\"不必像下面这样\",{\"1\":{\"40\":1}}],[\"不需要包名\",{\"1\":{\"7\":1}}],[\"不定参数\",{\"1\":{\"6\":1}}],[\"不支持默认参数\",{\"1\":{\"6\":1}}],[\"为什么使用指针\",{\"0\":{\"39\":1}}],[\"为\",{\"1\":{\"33\":2}}],[\"为类型\",{\"1\":{\"6\":1}}],[\"为参数\",{\"1\":{\"6\":1}}],[\"为数据类型\",{\"1\":{\"5\":1}}],[\"people\",{\"1\":{\"54\":3}}],[\"person\",{\"1\":{\"15\":1}}],[\"ptr\",{\"1\":{\"38\":3}}],[\"pointer\",{\"0\":{\"35\":1}}],[\"path\",{\"1\":{\"33\":2}}],[\"package\",{\"0\":{\"8\":1},\"1\":{\"8\":1,\"18\":1,\"20\":1,\"21\":1,\"23\":2,\"24\":1,\"29\":1,\"32\":1,\"43\":3}}],[\"printf\",{\"1\":{\"29\":1,\"43\":3,\"51\":1,\"52\":2}}],[\"println\",{\"1\":{\"17\":2,\"18\":11,\"19\":5,\"20\":2,\"21\":2,\"23\":3,\"24\":3,\"32\":1,\"33\":1,\"34\":1,\"38\":3,\"40\":5,\"44\":3,\"45\":2,\"52\":1}}],[\"p1\",{\"1\":{\"6\":1,\"40\":6}}],[\"p\",{\"1\":{\"6\":4,\"40\":4}}],[\"isnumber\",{\"1\":{\"30\":3}}],[\"i++\",{\"1\":{\"19\":1,\"21\":1}}],[\"i\",{\"1\":{\"19\":15,\"20\":5,\"21\":2,\"23\":4,\"32\":4}}],[\"ifelse\",{\"1\":{\"17\":1}}],[\"if\",{\"0\":{\"17\":1},\"1\":{\"17\":1,\"19\":2,\"20\":1}}],[\"in\",{\"1\":{\"43\":1}}],[\"invalid\",{\"1\":{\"18\":1}}],[\"int8\",{\"1\":{\"43\":3}}],[\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",{\"1\":{\"42\":1}}],[\"int8uint8\",{\"1\":{\"26\":1}}],[\"int16\",{\"1\":{\"43\":7}}],[\"int16uint16\",{\"1\":{\"26\":1}}],[\"intuint\",{\"1\":{\"26\":1}}],[\"int64uint64\",{\"1\":{\"26\":1}}],[\"interview\",{\"0\":{\"61\":1,\"64\":1}}],[\"interface\",{\"0\":{\"13\":1},\"1\":{\"9\":1,\"13\":2}}],[\"integers\",{\"1\":{\"26\":2}}],[\"int\",{\"0\":{\"26\":1},\"1\":{\"18\":1,\"19\":1,\"21\":3,\"26\":1,\"31\":1,\"32\":1,\"33\":2,\"35\":1,\"46\":3,\"54\":1}}],[\"int32uint32\",{\"1\":{\"26\":1}}],[\"int32\",{\"1\":{\"9\":2,\"26\":1,\"49\":1}}],[\"init\",{\"1\":{\"7\":1}}],[\"import\",{\"0\":{\"7\":1},\"1\":{\"7\":7,\"18\":1,\"20\":1,\"21\":1,\"23\":2,\"24\":1,\"29\":1,\"32\":1,\"43\":3,\"44\":1,\"51\":1}}],[\"iota\",{\"1\":{\"5\":2}}],[\"identifier2\",{\"1\":{\"5\":1}}],[\"identifier1\",{\"1\":{\"5\":1}}],[\"identifier\",{\"1\":{\"5\":1}}],[\"枚举\",{\"1\":{\"5\":1}}],[\"12\",{\"1\":{\"52\":1}}],[\"123\",{\"1\":{\"42\":1}}],[\"180\",{\"1\":{\"46\":2}}],[\"14\",{\"1\":{\"45\":1}}],[\"16进制\",{\"1\":{\"44\":1}}],[\"16\",{\"1\":{\"26\":1}}],[\"10进制\",{\"1\":{\"44\":1}}],[\"10\",{\"1\":{\"14\":2,\"19\":1,\"20\":1,\"21\":1,\"32\":1,\"35\":1,\"45\":1}}],[\"100\",{\"1\":{\"5\":1}}],[\"1\",{\"1\":{\"5\":1,\"18\":2,\"19\":2,\"20\":1,\"21\":1,\"23\":1,\"24\":2,\"31\":1,\"32\":1,\"51\":1,\"52\":1}}],[\"0x15\",{\"1\":{\"44\":2}}],[\"0xc000086020\",{\"1\":{\"38\":1}}],[\"0101\",{\"1\":{\"44\":2}}],[\"0b0001\",{\"1\":{\"44\":2}}],[\"0o25\",{\"1\":{\"44\":2}}],[\"0\",{\"1\":{\"5\":1,\"17\":1,\"20\":2,\"21\":3,\"23\":1,\"26\":2,\"32\":2,\"50\":1}}],[\"fast\",{\"1\":{\"45\":2}}],[\"false\",{\"1\":{\"30\":2}}],[\"fallthrough\",{\"0\":{\"18\":1},\"1\":{\"18\":7}}],[\"float64\",{\"1\":{\"27\":1}}],[\"float32float64\",{\"1\":{\"42\":1}}],[\"float32\",{\"1\":{\"27\":1}}],[\"float\",{\"0\":{\"27\":1}}],[\"flag\",{\"1\":{\"7\":2}}],[\"fibonacci\",{\"1\":{\"21\":2}}],[\"file\",{\"1\":{\"13\":1}}],[\"for\",{\"0\":{\"19\":1},\"1\":{\"19\":8,\"20\":1,\"21\":2,\"23\":1,\"32\":1}}],[\"friday\",{\"1\":{\"18\":2}}],[\"fmt\",{\"1\":{\"7\":1,\"17\":2,\"18\":12,\"19\":5,\"20\":3,\"21\":3,\"23\":5,\"24\":4,\"29\":2,\"32\":2,\"33\":1,\"34\":1,\"38\":3,\"40\":5,\"43\":6,\"44\":4,\"45\":2,\"51\":1,\"52\":3}}],[\"func\",{\"0\":{\"6\":1},\"1\":{\"6\":4,\"18\":1,\"20\":1,\"21\":3,\"23\":3,\"24\":3,\"29\":1,\"32\":1,\"40\":5,\"43\":3,\"44\":1,\"45\":4,\"46\":2}}],[\"function\",{\"1\":{\"3\":1}}],[\"female\",{\"1\":{\"5\":1}}],[\"basic\",{\"0\":{\"59\":1,\"62\":1}}],[\"black\",{\"1\":{\"46\":2}}],[\"byte\",{\"0\":{\"48\":1,\"51\":1},\"1\":{\"26\":1,\"48\":1,\"49\":1,\"50\":2,\"51\":1,\"52\":2}}],[\"break\",{\"0\":{\"19\":1},\"1\":{\"18\":1,\"19\":3}}],[\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",{\"1\":{\"3\":1}}],[\"bool\",{\"0\":{\"30\":1},\"1\":{\"13\":2,\"30\":2,\"42\":1}}],[\"buffer\",{\"1\":{\"13\":2}}],[\"b\",{\"1\":{\"5\":2,\"13\":2,\"50\":1,\"51\":3,\"52\":4}}],[\"address\",{\"1\":{\"45\":1}}],[\"assignment\",{\"1\":{\"43\":1}}],[\"as\",{\"1\":{\"43\":1}}],[\"ascii\",{\"1\":{\"26\":1,\"50\":2}}],[\"append\",{\"1\":{\"32\":1}}],[\"array\",{\"0\":{\"31\":1},\"1\":{\"19\":4}}],[\"animal\",{\"1\":{\"9\":1,\"34\":2,\"40\":10}}],[\"a\",{\"1\":{\"5\":2,\"17\":1,\"18\":2,\"34\":2,\"43\":8,\"50\":1,\"51\":4,\"52\":4}}],[\"如下十进制的数值\",{\"1\":{\"44\":1}}],[\"如下字符串都是字符串字面量\",{\"1\":{\"42\":1}}],[\"如链表\",{\"1\":{\"39\":1}}],[\"如果同时多个通道收到数据\",{\"1\":{\"21\":1}}],[\"如\",{\"1\":{\"5\":1}}],[\"编译器会自己推断\",{\"1\":{\"5\":1}}],[\"=声明会出现如下错误\",{\"1\":{\"54\":1}}],[\"=声明\",{\"1\":{\"54\":1}}],[\"=`\",{\"1\":{\"54\":1}}],[\"==\",{\"1\":{\"19\":1,\"20\":1,\"44\":3}}],[\"=range\",{\"1\":{\"19\":3}}],[\"=0\",{\"1\":{\"19\":1}}],[\"=\",{\"0\":{\"54\":2},\"1\":{\"5\":6,\"9\":1,\"10\":4,\"12\":2,\"14\":2,\"18\":2,\"19\":2,\"20\":1,\"21\":5,\"23\":2,\"28\":2,\"29\":2,\"30\":2,\"31\":1,\"32\":2,\"33\":2,\"34\":1,\"35\":2,\"38\":3,\"40\":3,\"43\":8,\"45\":1,\"46\":6,\"50\":2,\"51\":2,\"52\":3,\"54\":4}}],[\"用于表示\",{\"1\":{\"50\":2}}],[\"用于存储\",{\"1\":{\"26\":2}}],[\"用于创建协程\",{\"1\":{\"24\":1}}],[\"用于函数\",{\"1\":{\"23\":1}}],[\"用于终止函数的执行并返回0个或多个返回值\",{\"1\":{\"23\":1}}],[\"用于跳过当前循环的剩余语句\",{\"1\":{\"19\":1}}],[\"用于循环执行动作\",{\"1\":{\"19\":1}}],[\"用于根据不同条件执行不同的动作\",{\"1\":{\"18\":1}}],[\"用于条件判断\",{\"1\":{\"17\":1}}],[\"用于接收\",{\"1\":{\"12\":1}}],[\"用于发送\",{\"1\":{\"12\":1}}],[\"用于发送和接收\",{\"1\":{\"12\":1}}],[\"用于定义变量类型\",{\"1\":{\"9\":1}}],[\"用于定义包名\",{\"1\":{\"8\":1}}],[\"用于导入包\",{\"1\":{\"7\":1}}],[\"用于声明结构体\",{\"1\":{\"15\":1}}],[\"用于声明集合\",{\"1\":{\"14\":1}}],[\"用于声明接口\",{\"1\":{\"13\":1}}],[\"用于声明信道\",{\"1\":{\"12\":1}}],[\"用于声明公开或者私有变量\",{\"1\":{\"10\":1}}],[\"用于声明函数\",{\"1\":{\"6\":1}}],[\"用于声明常量\",{\"1\":{\"5\":1}}],[\"用于修饰特殊的\",{\"1\":{\"3\":1}}],[\"the\",{\"1\":{\"45\":1}}],[\"thursday\",{\"1\":{\"18\":2}}],[\"take\",{\"1\":{\"45\":1}}],[\"tamp\",{\"1\":{\"38\":2}}],[\"time\",{\"1\":{\"24\":3}}],[\"tiger\",{\"1\":{\"9\":1}}],[\"tuesday\",{\"1\":{\"18\":1}}],[\"type\",{\"0\":{\"9\":1},\"1\":{\"9\":5,\"13\":1,\"15\":1,\"34\":1,\"40\":5,\"43\":3,\"46\":2}}],[\"t5\",{\"1\":{\"6\":1}}],[\"t4\",{\"1\":{\"6\":1}}],[\"t3\",{\"1\":{\"6\":1}}],[\"t2\",{\"1\":{\"6\":1}}],[\"t1\",{\"1\":{\"6\":2}}],[\"test\",{\"1\":{\"6\":3}}],[\"true\",{\"1\":{\"5\":1,\"30\":2}}],[\"t\",{\"1\":{\"3\":1,\"5\":2,\"6\":4,\"10\":4,\"12\":8,\"43\":9,\"45\":2}}],[\"下面的例子中的\",{\"1\":{\"3\":1}}],[\"注意\",{\"1\":{\"3\":2,\"23\":1}}],[\"功能修饰\",{\"0\":{\"22\":1},\"1\":{\"3\":1}}],[\"流程控制\",{\"0\":{\"16\":1},\"1\":{\"3\":1}}],[\"cannot\",{\"1\":{\"43\":1,\"45\":1}}],[\"case\",{\"1\":{\"18\":13,\"21\":4}}],[\"colours\",{\"1\":{\"46\":1}}],[\"colour\",{\"1\":{\"43\":1}}],[\"complexdata2\",{\"1\":{\"28\":1}}],[\"complexdata\",{\"1\":{\"28\":1}}],[\"complex128\",{\"1\":{\"28\":1}}],[\"complex64complex128\",{\"1\":{\"42\":1}}],[\"complex64\",{\"1\":{\"28\":2}}],[\"complex\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"concepts\",{\"0\":{\"56\":1,\"58\":1}}],[\"continue\",{\"0\":{\"19\":1},\"1\":{\"19\":3}}],[\"const\",{\"0\":{\"5\":1},\"1\":{\"5\":6,\"43\":5}}],[\"constfuncimportpackagetypevar\",{\"1\":{\"3\":1}}],[\"close\",{\"1\":{\"13\":1}}],[\"chinese\",{\"1\":{\"46\":1}}],[\"china\",{\"1\":{\"46\":2}}],[\"ch\",{\"1\":{\"12\":2}}],[\"chan<\",{\"1\":{\"12\":1}}],[\"channel\",{\"1\":{\"12\":1}}],[\"chan\",{\"0\":{\"12\":1},\"1\":{\"12\":5,\"21\":3}}],[\"chaninterfacemapstruct\",{\"1\":{\"3\":1}}],[\"c\",{\"1\":{\"5\":2,\"21\":5,\"29\":1}}],[\"声明对象\",{\"1\":{\"46\":1}}],[\"声明和属性赋值\",{\"1\":{\"46\":1}}],[\"声明多个相同类型的变量\",{\"1\":{\"10\":2}}],[\"声明多个\",{\"1\":{\"5\":1}}],[\"声明常量必须指定初始值\",{\"1\":{\"5\":1}}],[\"声明类型关键字\",{\"0\":{\"4\":1}}],[\"声明\",{\"1\":{\"3\":1,\"33\":1}}],[\"关键字\",{\"1\":{\"3\":1}}],[\"类型能表示的值是有限的\",{\"1\":{\"52\":1}}],[\"类型不同\",{\"0\":{\"49\":1}}],[\"类型不同会报错\",{\"1\":{\"43\":1}}],[\"类型名称为\",{\"1\":{\"29\":1,\"30\":1}}],[\"类型的数据的信道\",{\"1\":{\"12\":3}}],[\"类型\",{\"1\":{\"3\":1,\"26\":2,\"27\":1,\"28\":1,\"52\":1}}],[\"有什么区别\",{\"0\":{\"48\":1}}],[\"有类型常量\",{\"1\":{\"43\":1}}],[\"有符号数包含正数和负数\",{\"1\":{\"26\":1}}],[\"有符号数\",{\"1\":{\"26\":1}}],[\"有\",{\"1\":{\"3\":1}}],[\"保留关键字\",{\"0\":{\"2\":1,\"3\":1}}],[\"面试常见问题\",{\"1\":{\"1\":1}}],[\"本栏目主要提供\",{\"1\":{\"1\":1}}],[\"介绍\",{\"0\":{\"1\":1},\"1\":{\"3\":1,\"26\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
