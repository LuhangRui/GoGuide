const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/en/\":{\"documentCount\":107,\"nextId\":107,\"documentIds\":{\"0\":\"v-e6412400\",\"1\":\"v-e6412400#introduce\",\"2\":\"v-519e79c4\",\"3\":\"v-519e79c4#keywords\",\"4\":\"v-519e79c4#declaration-types\",\"5\":\"v-519e79c4#const\",\"6\":\"v-519e79c4#func\",\"7\":\"v-519e79c4#import\",\"8\":\"v-519e79c4#package\",\"9\":\"v-519e79c4#type\",\"10\":\"v-519e79c4#var\",\"11\":\"v-519e79c4#composite-types\",\"12\":\"v-519e79c4#chan\",\"13\":\"v-519e79c4#interface\",\"14\":\"v-519e79c4#map\",\"15\":\"v-519e79c4#struct\",\"16\":\"v-519e79c4#control-flow\",\"17\":\"v-519e79c4#if-else\",\"18\":\"v-519e79c4#switch-fallthrough\",\"19\":\"v-519e79c4#for-break-continue-range\",\"20\":\"v-519e79c4#goto\",\"21\":\"v-519e79c4#select\",\"22\":\"v-519e79c4#function-modifiers\",\"23\":\"v-519e79c4#defer\",\"24\":\"v-519e79c4#go\",\"25\":\"v-7562f136\",\"26\":\"v-7562f136#integers-int\",\"27\":\"v-7562f136#floating-point-numbers-float\",\"28\":\"v-7562f136#complex-numbers-complex\",\"29\":\"v-7562f136#strings-string\",\"30\":\"v-7562f136#booleans-bool\",\"31\":\"v-7562f136#arrays-array\",\"32\":\"v-7562f136#slices-slices\",\"33\":\"v-7562f136#map-map\",\"34\":\"v-7562f136#structures-struct\",\"35\":\"v-7562f136#pointers-pointer\",\"36\":\"v-7562f136#zero-value-table\",\"37\":\"v-2a7c9ae6\",\"38\":\"v-2a7c9ae6#arithmetic-operators\",\"39\":\"v-2a7c9ae6#relational-operators\",\"40\":\"v-2a7c9ae6#logical-operators\",\"41\":\"v-2a7c9ae6#bitwise-operators\",\"42\":\"v-2a7c9ae6#assignment-operators\",\"43\":\"v-2a7c9ae6#other-symbols\",\"44\":\"v-2a7c9ae6#symbol-precedence\",\"45\":\"v-3b2d32da\",\"46\":\"v-3b2d32da#interface\",\"47\":\"v-3b2d32da#creating-errors\",\"48\":\"v-3b2d32da#errors-join\",\"49\":\"v-3b2d32da#errors-is\",\"50\":\"v-3b2d32da#errors-as\",\"51\":\"v-56a3206a\",\"52\":\"v-56a3206a#creating-a-map\",\"53\":\"v-56a3206a#traversing-a-map\",\"54\":\"v-56a3206a#deleting-key-value-pairs\",\"55\":\"v-56a3206a#check-if-a-key-exists\",\"56\":\"v-56a3206a#get-the-length-of-a-map\",\"57\":\"v-56a3206a#concurrency\",\"58\":\"v-6e3eb813\",\"59\":\"v-6e3eb813#creating-slices\",\"60\":\"v-6e3eb813#slicing-slices\",\"61\":\"v-6e3eb813#length-and-capacity\",\"62\":\"v-6e3eb813#appending-data\",\"63\":\"v-6e3eb813#cloning-slices\",\"64\":\"v-9ec1e43e\",\"65\":\"v-9ec1e43e#introduction\",\"66\":\"v-9ec1e43e#creating-a-channel\",\"67\":\"v-9ec1e43e#sending-and-receiving-data\",\"68\":\"v-9ec1e43e#closing-a-channel\",\"69\":\"v-9ec1e43e#select\",\"70\":\"v-9ec1e43e#example\",\"71\":\"v-9ec1e43e#precautions\",\"72\":\"v-4c34ab58\",\"73\":\"v-4c34ab58#introduction\",\"74\":\"v-4c34ab58#context-interface\",\"75\":\"v-4c34ab58#root-nodes-and-derived-nodes\",\"76\":\"v-4c34ab58#creating-root-nodes\",\"77\":\"v-4c34ab58#creating-derived-nodes\",\"78\":\"v-4c34ab58#withvalue\",\"79\":\"v-4c34ab58#withdeadline-withtimeout\",\"80\":\"v-4c34ab58#withcancel\",\"81\":\"v-d57bd0da\",\"82\":\"v-d57bd0da#pointer\",\"83\":\"v-d57bd0da#what-is-a-pointer-and-a-pointer-variable\",\"84\":\"v-d57bd0da#why-use-pointers\",\"85\":\"v-d57bd0da#which-objects-can-be-addressed-and-which-cannot\",\"86\":\"v-d57bd0da#literal\",\"87\":\"v-d57bd0da#what-does-literal-mean\",\"88\":\"v-d57bd0da#can-different-literals-have-the-same-value\",\"89\":\"v-d57bd0da#what-is-the-difference-between-a-literal-and-a-variable\",\"90\":\"v-d57bd0da#what-is-a-composite-literal\",\"91\":\"v-d57bd0da#others\",\"92\":\"v-d57bd0da#what-is-the-difference-between-rune-and-byte-in-go\",\"93\":\"v-d57bd0da#different-types\",\"94\":\"v-d57bd0da#different-stored-characters\",\"95\":\"v-d57bd0da#different-byte-sizes-occupied-byte-occupies-1-byte-rune-occupies-4-bytes\",\"96\":\"v-d57bd0da#different-character-ranges-represented\",\"97\":\"v-d57bd0da#what-are-deep-copy-and-shallow-copy-in-golang\",\"98\":\"v-d57bd0da#what-s-the-difference-between-make-and-new\",\"99\":\"v-d57bd0da#what-s-the-difference-between-arrays-and-slices\",\"100\":\"v-d57bd0da#if-for-range-adds-data-at-the-same-time-will-for-range-execute-indefinitely\",\"101\":\"v-d57bd0da#what-is-the-execution-order-of-multiple-defers\",\"102\":\"v-d57bd0da#what-is-data-overflow\",\"103\":\"v-d57bd0da#should-function-parameters-use-value-or-pointer\",\"104\":\"v-ae14c046\",\"105\":\"v-ae14c046#have-you-used-context-what-are-the-use-cases-for-context\",\"106\":\"v-ae14c046#is-channel-thread-safe\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,13],\"2\":[1],\"3\":[1,47],\"4\":[2],\"5\":[1,55],\"6\":[1,32],\"7\":[1,57],\"8\":[1,8],\"9\":[1,27],\"10\":[1,33],\"11\":[2],\"12\":[1,26],\"13\":[1,16],\"14\":[1,36],\"15\":[1,17],\"16\":[2],\"17\":[2,21],\"18\":[2,76],\"19\":[4,50],\"20\":[1,38],\"21\":[1,54],\"22\":[2],\"23\":[1,62],\"24\":[1,33],\"25\":[2],\"26\":[3,60],\"27\":[5,14],\"28\":[4,39],\"29\":[3,44],\"30\":[3,18],\"31\":[3,30],\"32\":[3,43],\"33\":[3,42],\"34\":[3,24],\"35\":[3,34],\"36\":[3,41],\"37\":[1],\"38\":[2,25],\"39\":[2,35],\"40\":[2,21],\"41\":[2,39],\"42\":[2,30],\"43\":[2,5],\"44\":[2,29],\"45\":[2],\"46\":[1,17],\"47\":[2,31],\"48\":[2,37],\"49\":[2,45],\"50\":[2,48],\"51\":[1],\"52\":[3,44],\"53\":[3,45],\"54\":[4,36],\"55\":[5,30],\"56\":[6,11],\"57\":[1,20],\"58\":[1],\"59\":[2,39],\"60\":[2,23],\"61\":[3,30],\"62\":[2,32],\"63\":[2,64],\"64\":[1],\"65\":[1,16],\"66\":[3,34],\"67\":[4,19],\"68\":[3,44],\"69\":[1,40],\"70\":[1,28],\"71\":[1,16],\"72\":[1],\"73\":[1,49],\"74\":[2,38],\"75\":[4,32],\"76\":[3,12],\"77\":[3,29],\"78\":[2,21],\"79\":[3,47],\"80\":[2,40],\"81\":[1],\"82\":[1],\"83\":[7,45],\"84\":[4,88],\"85\":[9,36],\"86\":[1],\"87\":[5,66],\"88\":[8,42],\"89\":[10,60],\"90\":[6,105],\"91\":[1],\"92\":[11,22],\"93\":[3,10],\"94\":[4,28],\"95\":[10,21],\"96\":[5,29],\"97\":[9,112],\"98\":[9,44],\"99\":[9,47],\"100\":[13,37],\"101\":[9,26],\"102\":[5,62],\"103\":[8,77],\"104\":[1],\"105\":[11,37],\"106\":[5,17]},\"averageFieldLength\":[3.121495327102804,35.56214483990067],\"storedFields\":{\"0\":{\"h\":\"Guide\"},\"1\":{\"h\":\"introduce\",\"t\":[\"This website mainly provides Golang interview frequently asked questions and basic knowledge.\"]},\"2\":{\"h\":\"Keywords\"},\"3\":{\"h\":\"Keywords\",\"t\":[\"Golang has 25 reserved keywords that cannot be used as program identifiers.\",\"Type\",\"Keywords\",\"Introduction\",\"Declaration\",\"constfuncimportpackagetypevar\",\"These keywords are used to declare various elements in the code.\",\"Composite Types\",\"chaninterfacemapstruct\",\"These keywords are used to declare some special compound types.\",\"Control Flow\",\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",\"These keywords are used to control the flow of program execution.\",\"Function Modifiers\",\"defergo\",\"Used to modify special functions.\"]},\"4\":{\"h\":\"Declaration Types\"},\"5\":{\"h\":\"const\",\"t\":[\"const is used to declare constants, which once declared cannot be changed, and must specify an initial value when declaring a constant.\",\"Example\",\"const identifier T = value // T is the data type, which can be omitted, and the compiler will infer it. const identifier1, identifier2 = value1, value2 // Declare multiple, such as const a, b, c = \\\"hello\\\", 100, true const ( FeMale = 0 Male = 1 ) // Enumeration const ( a = iota b c ) // iota \"]},\"6\":{\"h\":\"func\",\"t\":[\"func is used to declare functions, supports multiple return values, and does not support default parameters.\",\"Example\",\"// p is the parameter, T is the type func Test(p T) {} func Test(p T) (T1, T2) {} func Test(p T, p1 T1, list ...T3) (T4, T5) {} // variadic parameters \"]},\"7\":{\"h\":\"import\",\"t\":[\"import is used to import packages to use their public identifiers.\",\"import supports single-line and multi-line imports.\",\"Example\",\"import \\\"flag\\\" // single import import ( \\\"flag\\\" \\\"fmt\\\" ) // multiple imports \",\"We can also use ., _, and aliases to modify imported packages.\",\"Import Command\",\"Usage\",\"Explanation\",\"import \\\"lib/math\\\"\",\"math.Sin\",\"Normal import requires the package name\",\"import m \\\"lib/math\\\"\",\"m.Sin\",\"Aliases can be set during import\",\"import . \\\"lib/math\\\"\",\"Sin\",\"Using . allows direct use of functions without the package name\",\"We can also use _ to modify imported packages, which will only execute the package's initialization function init().\"]},\"8\":{\"h\":\"package\",\"t\":[\"package is used to define the package name.\"]},\"9\":{\"h\":\"type\",\"t\":[\"type is used to define variable types.\",\"Example\",\"// Define an interface type Animal interface { eat() } // Define a structure type Tiger struct { Name string } // Define equivalent types type Num int32 // Define a new type type Num = int32 // Only define an alias \"]},\"10\":{\"h\":\"var\",\"t\":[\"var is used to declare public or private variables.\",\"Example\",\"var Name T // public variable var name T // private variable var name1, name2 T // declare multiple variables of the same type var name1, name2 T = val1, val2 // declare and initialize multiple variables of the same type var name1, name2 = val1, val2 // infer types and initialize based on val1, val2 // Using parentheses var ( name1 = val1 name2 = val2 ) \"]},\"11\":{\"h\":\"Composite Types\"},\"12\":{\"h\":\"chan\",\"t\":[\"chan (Channel) is used to declare channels.\",\"Example\",\"// Channel for sending and receiving data of type T chan T // Channel for sending data of type T <-chan T // Channel for receiving data of type T chan<- T \",\"ch := make(chan T) // unbuffered channel ch := make(chan T, 20) // buffered channel \"]},\"13\":{\"h\":\"interface\",\"t\":[\"interface is used to declare interfaces.\",\"Example\",\"type File interface { Read(b Buffer) bool Write(b Buffer) bool Close() } \"]},\"14\":{\"h\":\"map\",\"t\":[\"map is used to declare collections, consisting of unordered key-value pairs, with an underlying hash map. Although map will automatically expand, it is recommended to configure the capacity at initialization.\",\"Example\",\"m := make(map[string]string) // empty map m := make(map[string]string, 10) // map with an initial capacity of 10 \"]},\"15\":{\"h\":\"struct\",\"t\":[\"struct is used to declare structures.\",\"Example\",\"type Person struct { Name string } \",\"Here is the translation into English:\"]},\"16\":{\"h\":\"Control Flow\"},\"17\":{\"h\":\"if else\",\"t\":[\"ifelse is used for conditional judgments and can be nested.\",\"Example\",\"if a > 0 { fmt.Println(\\\"hello\\\") } else { fmt.Println(\\\"world\\\") } \"]},\"18\":{\"h\":\"switch fallthrough\",\"t\":[\"switch is used to perform different actions based on different conditions. By default, each case comes with a break, and after executing one case, it will automatically exit. If you want to continue executing the following statements, you need to use fallthrough.\",\"Example\",\"a := \\\"2\\\" switch a { case \\\"1\\\": fmt.Println(\\\"hello\\\") case \\\"2\\\": fmt.Println(\\\"world\\\") default: // default action fmt.Println(\\\"default\\\") } // Result: world \",\"Using fallthrough, you can directly execute the action of the next case after completing the corresponding case.\",\"package main import \\\"fmt\\\" func main() { var dayOfWeek int = 4 switch dayOfWeek { case 1: fmt.Println(\\\"Monday\\\") fallthrough case 2: fmt.Println(\\\"Tuesday\\\") fallthrough case 3: fmt.Println(\\\"Wednesday\\\") fallthrough case 4: fmt.Println(\\\"Thursday\\\") fallthrough case 5: fmt.Println(\\\"Friday\\\") fallthrough case 6: fmt.Println(\\\"Saturday\\\") case 7: fmt.Println(\\\"Sunday\\\") default: fmt.Println(\\\"Invalid Day\\\") } } // Result: // Thursday // Friday // Saturday \"]},\"19\":{\"h\":\"for break continue range\",\"t\":[\"for is used to loop actions, using break to interrupt the current for loop, and continue to skip the remaining statements of the current loop and continue with the next round.\",\"Example\",\"// Single condition for i <= 10 { fmt.Println(i) i = i + 1 } // Initialization and judgment for i:=0; i < 3; i++ { fmt.Println(i) } // for range iteration array :=[]int{1, 2, 3, 4, 5} for i, v :=range array{ fmt.Println(i,v) } // break for i, v :=range array{ if i >= 2 { break } fmt.Println(i,v) } // continue for i, v :=range array{ if i == 2 { continue } fmt.Println(i,v) } \"]},\"20\":{\"h\":\"goto\",\"t\":[\"goto can jump to a specified location to continue executing actions.\",\"Example\",\"package main import \\\"fmt\\\" func main() { for i := 0; i < 10; i ++ { if i == 5 { goto end // Jump to the end position to execute } fmt.Println(i) } end: fmt.Println(\\\"end\\\") } // Result: // 0 // 1 // 2 // 3 // 4 // end \"]},\"21\":{\"h\":\"select\",\"t\":[\"select allows goroutine to wait for multiple communication operations. select will block until one case receives information. If multiple channels receive data at the same time, a random case will be executed.\",\"Example\",\"package main import \\\"fmt\\\" func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c <- x: x, y = y, x+y case <-quit: fmt.Println(\\\"quit\\\") return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i < 10; i++ { fmt.Println(<-c) } quit <- 0 }() fibonacci(c, quit) } \"]},\"22\":{\"h\":\"Function Modifiers\"},\"23\":{\"h\":\"defer\",\"t\":[\"return is used to terminate the execution of a function and return zero or more return values. defer is used to perform actions before the function's return or after it has finished executing.\",\"Example\",\"package main import \\\"fmt\\\" func main() { defer fmt.Println(\\\"world\\\") fmt.Println(\\\"hello\\\") } // Result // hello // world \",\"Note:\",\"The execution order of defer is last-in-first-out.\",\"defer executing before return means you can use defer to get the final result of variables before return.\",\"package main import \\\"fmt\\\" func main() { num := 1 defer func() { fmt.Println(num) }() for i := 0; i < 4; i ++ { num += i } } // Result: // 7 \"]},\"24\":{\"h\":\"go\",\"t\":[\"go is used to create a coroutine (goroutine) and perform actions in the background of the program.\",\"Example\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { go func(){ fmt.Println(\\\"no.1\\\") }() go func(){ fmt.Println(\\\"no.2\\\") }() fmt.Println(\\\"start goroutine\\\") time.Sleep(5*time.Second) } // Result: // start goroutine // no.1 // no.2 \"]},\"25\":{\"h\":\"Data Type\"},\"26\":{\"h\":\"Integers (int)\",\"t\":[\"Integers come in two types:\",\"Type\",\"Range\",\"Description\",\"Signed integers\",\"-∞ ~ +∞\",\"Signed integers include positive and negative numbers\",\"Unsigned integers\",\"0 ~ +∞\",\"Unsigned integers include 0 and all positive numbers\",\"In Golang, types starting with int are signed integers, and those starting with uint are unsigned integers.\",\"Integer types in Golang:\",\"Bits\",\"Type\",\"8\",\"int8uint8\",\"16\",\"int16uint16\",\"32\",\"int32uint32\",\"64\",\"int64uint64\",\"32 or 64 (based on system architecture)\",\"intuint\",\"There are also two equivalent types:\",\"rune: equivalent to int32 , used to store Unicode characters\",\"byte: equivalent to uint8 , used to store ASCII characters\"]},\"27\":{\"h\":\"Floating-point Numbers (float)\",\"t\":[\"Floating-point numbers are numbers that contain a decimal point.\",\"Bits\",\"Type\",\"32\",\"float32\",\"64\",\"float64\"]},\"28\":{\"h\":\"Complex Numbers (complex)\",\"t\":[\"Complex numbers contain imaginary and real numbers, with the real part being a floating-point number.\",\"Bits\",\"Type\",\"32-bit float + imaginary\",\"complex64\",\"64-bit float + imaginary\",\"complex128\",\"Example\",\"// Initialize a complex number var complexData complex64 = complex(5, 3) // Equals: 5 + 3i // Another way to initialize complexData2 := 5 + 3i \"]},\"29\":{\"h\":\"Strings (string)\",\"t\":[\"Strings are composed of a sequence of characters, and the type name is string.\",\"Once a string is created, it cannot be modified.\",\"Example\",\"package main import \\\"fmt\\\" func main() { var str string := \\\"Hi! Jack\\\" // Cannot modify, the following commented code will cause an error // str[2] = 'c' fmt.Printf(\\\"%s\\\",str) } \"]},\"30\":{\"h\":\"Booleans (bool)\",\"t\":[\"The boolean type values are true or false, and the type name is bool.\",\"Example\",\"var isNumber bool isNumber = true isNumber = false \"]},\"31\":{\"h\":\"Arrays (array)\",\"t\":[\"Arrays are composed of a series of data, which can be accessed by index.\",\"The capacity of an array cannot be modified once created.\",\"Example\",\"data := [5]int{1, 2, 3, 4, 5} \"]},\"32\":{\"h\":\"Slices (slices)\",\"t\":[\"Slices are dynamic arrays that can automatically adjust their capacity size based on the data.\",\"Example\",\"package main import \\\"fmt\\\" func main() { var data []int for i := 0; i < 10; i ++ { data = append(data, i) } fmt.Println(data) } // Result // [0 1 2 3 4 5 6 7 8 9] \"]},\"33\":{\"h\":\"Map (map)\",\"t\":[\"A map is a key-value mapping table, where you can get the corresponding value through the key.\",\"The declaration of a map is as follows:\",\"map[KeyType]ValueType \",\"KeyType is the data type of the key, and ValueType is the data type of the value.\",\"Example\",\"// Declare a map var m map[string]int // Initialize the map using make m = make(map[string]int) // Set the value m[\\\"path\\\"] = 66 // Output the value fmt.Println(m[\\\"path\\\"]) \"]},\"34\":{\"h\":\"Structures (struct)\",\"t\":[\"Structures are composed of a series of custom fields, which can be accessed using ..\",\"Example\",\"type Animal struct { Name string } a := Animal{ Name: \\\"Lucky\\\" } fmt.Println(a.Name) \"]},\"35\":{\"h\":\"Pointers (pointer)\",\"t\":[\"Pointers store the memory address of a variable. Use * in front of a variable to define it as a pointer, and & to get the variable's address. Pointers allow you to modify data outside of a function within the function.\",\"Example\",\"var num *int n := 10 num = &n \"]},\"36\":{\"h\":\"Zero Value Table\",\"t\":[\"Type\",\"Zero Value\",\"uint/uint8/uint16/uint32/uint64\",\"0\",\"int/int8/int16/int32/int64\",\"0\",\"float32/float64\",\"0\",\"complex64/complex128\",\"0+0i\",\"bool\",\"false\",\"uintptr\",\"0\",\"byte\",\"0\",\"rune\",\"0\",\"string\",\"\\\"\\\"\",\"struct\",\"All internal attributes are their corresponding zero values\",\"interface\",\"nil\",\"slice\",\"nil\",\"map\",\"nil\",\"chan\",\"nil\",\"func\",\"nil\",\"pointer\",\"nil\"]},\"37\":{\"h\":\"Operators\"},\"38\":{\"h\":\"Arithmetic Operators\",\"t\":[\"A\",\"B\",\"50\",\"20\",\"Operator\",\"Operation\",\"Result\",\"Description\",\"+\",\"A + B\",\"70\",\"Addition\",\"-\",\"A - B\",\"30\",\"Subtraction\",\"*\",\"A * B\",\"1000\",\"Multiplication\",\"/\",\"A / B\",\"2\",\"Division\",\"%\",\"A % B\",\"10\",\"Modulus\",\"++\",\"A++\",\"51\",\"Increment\",\"--\",\"A--\",\"49\",\"Decrement\"]},\"39\":{\"h\":\"Relational Operators\",\"t\":[\"A\",\"B\",\"50\",\"20\",\"Operator\",\"Operation\",\"Result\",\"Description\",\"==\",\"A == B\",\"false\",\"Check if two numbers are equal, if yes then true, otherwise false\",\"!=\",\"A != B\",\"true\",\"Check if two numbers are not equal, if yes then true, otherwise false\",\">\",\"A > B\",\"true\",\"Check if left side is greater than right side, if yes then true, otherwise false\",\"<\",\"A < B\",\"false\",\"Check if left side is less than right side, if yes then true, otherwise false\",\">=\",\"A >= B\",\"true\",\"Check if left side is greater than or equal to right side, if yes then true, otherwise false\",\"<=\",\"A <= B\",\"false\",\"Check if left side is less than or equal to right side, if yes then true, otherwise false\"]},\"40\":{\"h\":\"Logical Operators\",\"t\":[\"A\",\"B\",\"true\",\"false\",\"Operator\",\"Operation\",\"Result\",\"Description\",\"&&\",\"A && B\",\"false\",\"If both sides are true, then true, otherwise false\",\"!=\",\"A != B\",\"true\",\"If either side is true, then true, if both sides are false, then false\",\"!\",\"!A\",\"false\",\"If the condition is true, then false, otherwise true\"]},\"41\":{\"h\":\"Bitwise Operators\",\"t\":[\"Truth Table\",\"p\",\"q\",\"p & q\",\"p | q\",\"p ^ q\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"0\",\"0\",\"1\",\"1\",\"Assuming\",\"Variable\",\"Value\",\"A\",\"0110 1000\",\"B\",\"0111 0011\",\"Operator\",\"Operation\",\"Result\",\"Description\",\"&\",\"A & B\",\"0110 0000\",\"Bitwise AND\",\"|\",\"A | B\",\"0111 1011\",\"Bitwise OR\",\"^\",\"A ^ B\",\"0001 1011\",\"Bitwise XOR\",\"<<\",\"A << 2\",\"1010 0000\",\"Left shift by 2 bits, padded with 0\",\">>\",\"A >> 2\",\"0001 1010\",\"Right shift by 2 bits, padded with 0\"]},\"42\":{\"h\":\"Assignment Operators\",\"t\":[\"We can use = to assign the result on the right to the left, such as C = A + B\",\"Operator\",\"Operation\",\"Equivalent to\",\"+=\",\"A += B\",\"A = A + B\",\"-=\",\"A -= B\",\"A = A - B\",\"*=\",\"A *= B\",\"A = A * B\",\"/=\",\"A /= B\",\"A = A / B\",\"%=\",\"A %= B\",\"A = A % B\",\"<<=\",\"A <<= 2\",\"A = A << 2\",\">>=\",\"A >>= 2\",\"A = A >> 2\",\"&=\",\"A &= 2\",\"A = A & 2\",\"|=\",\"A |= 2\",\"A = A | 2\",\"^=\",\"A ^= 2\",\"A = A ^ 2\"]},\"43\":{\"h\":\"Other Symbols\",\"t\":[\"Operator\",\"Description\",\"&\",\"Address of\",\"*\",\"Pointer\"]},\"44\":{\"h\":\"Symbol Precedence\",\"t\":[\"From high to low:\",\"Precedence\",\"Operator\",\"5\",\"* / % << >> & &^\",\"4\",\"+ - | ^\",\"3\",\"== != < <= > >=\",\"2\",\"&&\",\"1\",\"||\",\"Parentheses can be used to increase precedence\"]},\"45\":{\"h\":\"Error Handling\"},\"46\":{\"h\":\"Interface\",\"t\":[\"Golang provides an interface type error:\",\"type error interface { Error() string } \",\"Any structure that implements the Error() method belongs to the error type.\"]},\"47\":{\"h\":\"Creating Errors\",\"t\":[\"Golang provides several ways to create an error.\",\"We can use errors.New() or fmt.Errorf() to create errors.\",\"Example\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // Create error using New err1 := errors.New(\\\"first error\\\") // Create error using fmt err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") fmt.Println(err1, err2) } \"]},\"48\":{\"h\":\"errors.Join\",\"t\":[\"In Go 1.20, errors.Join was introduced to combine multiple errors into one array.\",\"Example\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // Create error using New err1 := errors.New(\\\"first error\\\") // Create error using fmt err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") // Use join to combine multiple errors err3 := errors.Join(err1, err2) fmt.Println(err1, err2) // Output: first error second error fmt.Println(err3) // Output: // first error // second error } \"]},\"49\":{\"h\":\"errors.Is\",\"t\":[\"We can use errors.Is() to determine whether the current error contains the target type of error.\",\"Example\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // Create error using New err1 := errors.New(\\\"first error\\\") // Create error using fmt err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") // Use join to combine multiple errors err3 := errors.Join(err1, err2) fmt.Println(err1, err2) // Output: first error second error fmt.Println(err3) // Output: // first error // second error // Use errors.Is() to determine whether the error is the target error. Since err3 contains err1, it is true. fmt.Println(errors.Is(err1, err2)) // Output: false fmt.Println(errors.Is(err3, err1)) // Output: true } \"]},\"50\":{\"h\":\"errors.As\",\"t\":[\"We can use errors.As() to assign the first error in the error that matches the target type to the target object.\",\"Example\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) type NormalErr struct { e string } func (t NormalErr) Error() string { return t.e } func main() { // Create error using New err1 := errors.New(\\\"first error\\\") // Create T err2 := NormalErr{\\\"second error\\\"} // Use join to combine multiple errors err3 := errors.Join(err1, err2) var err4 NormalErr errors.As(err3, &err4) fmt.Println(err4) // Output： second error } \"]},\"51\":{\"h\":\"Map\"},\"52\":{\"h\":\"Creating a Map\",\"t\":[\"map is a key-value mapping table, where you can get the corresponding value by using the key.\",\"The declaration of map is as follows:\",\"map[KeyType]ValueType \",\"KeyType is the data type of the key, and ValueType is the data type of the value.\",\"Example\",\"// Declare a map var m map[string]int // Initialize the map using make m = make(map[string]int) // Initialize the map using make and set capacity // m = make(map[string]int, 10) // Set the value m[\\\"path\\\"] = 66 // Print the value fmt.Println(m[\\\"path\\\"]) \"]},\"53\":{\"h\":\"Traversing a Map\",\"t\":[\"Use range to traverse a map.\",\"Example\",\"package main import \\\"fmt\\\" func main() { // Initialize the map var dataMap map[string]string dataMap = make(map[string]string) // Alternatively, you can initialize like this //dataMap := map[string]string{} // Add key-value pairs dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" fmt.Println(\\\"print key and value: \\\") // Use range to traverse key-value pairs for key, val := range dataMap { fmt.Printf(\\\"key: %s - value: %s \\\\n\\\", key, val) } fmt.Println(\\\"print key: \\\") // Use range to traverse keys for key := range dataMap { fmt.Printf(\\\"key: %s \\\\n\\\", key) } fmt.Println(\\\"print value: \\\") // Use range to traverse values for _, val := range dataMap { fmt.Printf(\\\"Value: %s \\\\n\\\", val) } } // Result // print key and value: // key: third - value: third value // key: first - value: first value // key: second - value: second value // print key: // key: first // key: second // key: third // print value: // Value: first value // Value: second value // Value: third value \"]},\"54\":{\"h\":\"Deleting Key-Value Pairs\",\"t\":[\"To delete a key-value pair in a map, use the delete() method.\",\"Example\",\"package main import \\\"fmt\\\" func main() { // Initialize the map var dataMap map[string]string dataMap = make(map[string]string) // Alternatively, you can initialize like this //dataMap := map[string]string{} dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" fmt.Println(dataMap) // Delete a key-value pair delete(dataMap, \\\"first\\\") fmt.Println(dataMap) } // Result: // map[first:first value second:second value third:third value] // map[second:second value third:third value] \"]},\"55\":{\"h\":\"Check if a key exists\",\"t\":[\"Example\",\"package main import \\\"fmt\\\" func main() { // Initialize Map var dataMap map[string]string dataMap = make(map[string]string) dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" // Check if a key exists if val, ok := dataMap[\\\"first\\\"]; ok { fmt.Println(val) } else { fmt.Println(\\\"key not exists\\\") } if val, ok := dataMap[\\\"fourth\\\"]; ok { fmt.Println(val) } else { fmt.Println(\\\"key not exists\\\") } } \"]},\"56\":{\"h\":\"Get the length of a Map\",\"t\":[\"Use len() to get the length of a Map\",\"len(dataMap) \"]},\"57\":{\"h\":\"Concurrency\",\"t\":[\"Maps are not thread-safe in concurrent operations. You can use the official sync.Map{} to solve this problem.\"]},\"58\":{\"h\":\"Slices\"},\"59\":{\"h\":\"Creating Slices\",\"t\":[\"There are three ways to create slices.\",\"package main import \\\"fmt\\\" func main() { // First way: Declare directly var dataSlice []string // Second way: Initialize directly dataSlice1 := []string{} // Third way: Use make dataSlice2 := make([]string, 10) fmt.Println(dataSlice, dataSlice1, dataSlice2) } \",\"You can initialize data directly when creating it.\",\"dataSlice1 := []string{\\\"Jack\\\", \\\"Mike\\\"} \"]},\"60\":{\"h\":\"Slicing Slices\",\"t\":[\"arr[beginIndex:endIndex] can slice the slice, including the data of the beginIndex and excluding the data of the endIndex.\",\"data := []int{0,1,2,3,4,5} fmt.Println(data[2:4]) // Result // [2 3] \"]},\"61\":{\"h\":\"Length and Capacity\",\"t\":[\"Use len() to get the length of the slice and cap() to get the capacity of the slice.\",\"Example\",\"package main import \\\"fmt\\\" func main() { // Create a slice with a length of 5 and a capacity of 9 data := make([]int, 5, 9) fmt.Println(data, len(data), cap(data)) } // Result: // [0 0 0 0 0] 5 9 \"]},\"62\":{\"h\":\"Appending Data\",\"t\":[\"Use the append() function to append data.\",\"Example\",\"package main import \\\"fmt\\\" func main() { data := []int{0,1,2} // Append one piece of data data1 := append(data, 3) // Append multiple pieces of data data2 := append(data, 4, 5, 6) fmt.Println(data) fmt.Println(data1) fmt.Println(data2) } // Result: // [0 1 2] // [0 1 2 3] // [0 1 2 4 5 6] \"]},\"63\":{\"h\":\"Cloning Slices\",\"t\":[\"We know that slices are reference types. If you assign a slice to another variable, the data sharing the same memory address is actually shared. If you want to create two slices with the same data, you can use the copy() method.\",\"Example\",\"package main import \\\"fmt\\\" func main() { data := []int{0,1,2} // Create a slice with the same length data1 := make([]int, len(data)) // Copy data to data1 copy(data1, data) // Add data to data1 data1 = append(data1, 3, 4, 5) fmt.Println(data) fmt.Println(data1) // You will find that data has not been changed. } // Result: // [0 1 2] // [0 1 2 3 4 5] \"]},\"64\":{\"h\":\"Channel\"},\"65\":{\"h\":\"Introduction\",\"t\":[\"A channel is a conduit for end-to-end data communication, often used for data sharing between goroutines.\"]},\"66\":{\"h\":\"Creating a channel\",\"t\":[\"We use make to create a channel\",\"ch1 := make(chan T) // Unbuffered ch2 := make(chan T, 2) // Buffered \",\"T is the data type.\",\"Warning\",\"An unbuffered channel will be blocked until the data is received\",\"A buffered channel will be blocked when the sent data reaches the buffer size\"]},\"67\":{\"h\":\"Sending and receiving data\",\"t\":[\"Using <- pointing to the channel means sending data to that channel, such as ch <- 10\",\"Using <- on the left side of the channel means receiving data, such as <-ch\"]},\"68\":{\"h\":\"Closing a channel\",\"t\":[\"Use close() to close a channel\",\"close(ch) \",\"Warning\",\"If you send a message to a channel that has already been close(), it will cause a panic\",\"Reading from a closed channel can get a zero value, if using range to read channel, then close will terminate the loop\",\"We can use val, ok := <- ch to determine whether it is a zero value, if ok is false then the channel is already close\"]},\"69\":{\"h\":\"Select\",\"t\":[\"We usually use select to receive channel data, you can also use default to set the default action, select can receive multiple channel at the same time, if multiple channel send data at the same time, it will randomly select a channel to complete the operation\",\"select { case <-ch1: // Receive ch1 data fmt.Println(\\\"ch1\\\") case <-ch2: // Receive ch2 data fmt.Println(\\\"ch2\\\") case val := <-ch3: fmt.Println(ch3) //Receive ch3 data and print default: fmt.Println(\\\"default\\\") } \"]},\"70\":{\"h\":\"Example\",\"t\":[\"The timer is implemented through channel to return the timing result\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { t := time.NewTicker(3*time.Second) fmt.Println(\\\"start\\\") <-t.C fmt.Println(\\\"finish\\\") } \"]},\"71\":{\"h\":\"Precautions\",\"t\":[\"When using channel, be aware that there must be a data receiving end to avoid deadlock problems\"]},\"72\":{\"h\":\"Context\"},\"73\":{\"h\":\"Introduction\",\"t\":[\"Context is a very important interface in Golang, used to define the context information in goroutine. Context is commonly used in the following situations:\",\"Data transfer: Transfer data among multiple goroutines.\",\"Timeout management: By setting a timeout, the termination time of the coroutine can be conveniently configured.\",\"Terminate coroutine: By using the cancel() method, the coroutine can be easily terminated, and multiple coroutines can be managed in batches.\"]},\"74\":{\"h\":\"Context Interface\",\"t\":[\"// A Context carries a deadline, a cancelation signal, and other values across // API boundaries. // // Context's methods may be called by multiple goroutines simultaneously. type Context interface { Done() <-chan struct{} Deadline() (deadline time.Time, ok bool) Err() error Value(key interface{}) interface{} } \"]},\"75\":{\"h\":\"Root Nodes and Derived Nodes\",\"t\":[\"We can create root nodes and derived nodes for context, forming a tree structure. When the root node is cancel() or terminated due to timeout, all its derived nodes will also be terminated, and the data of the root node will be shared by all derived nodes.\",\"context structure\"]},\"76\":{\"h\":\"Creating Root Nodes\",\"t\":[\"ctx := context.Background() // Create a blank context ctx2 := context.TODO() // TODO is also a blank context \"]},\"77\":{\"h\":\"Creating Derived Nodes\",\"t\":[\"Use context.WithXXX() to create derived context\",\"package main import ( \\\"context\\\" \\\"fmt\\\" ) func main() { ctx := context.WithValue(context.Background(), \\\"base\\\", \\\"baseVal\\\") ctx1 := context.WithValue(ctx, \\\"ctx1\\\", \\\"ctx1Val\\\") ctx2 := context.WithValue(ctx, \\\"ctx2\\\", \\\"ctx2Val\\\") ctx3 := context.WithValue(ctx, \\\"ctx3\\\", \\\"ctx3Val\\\") fmt.Println(ctx) fmt.Println(ctx1) fmt.Println(ctx2) fmt.Println(ctx3) } // Results： // context.Background.WithValue(type string, val baseVal) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx1Val) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx2Val) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx3Val) \"]},\"78\":{\"h\":\"WithValue()\",\"t\":[\"context.WithValue() can be used to create derived nodes and add key-value data, while retaining all data of the parent context.\"]},\"79\":{\"h\":\"WithDeadline() WithTimeout()\",\"t\":[\"context.WithDeadline() and context.WithTimeout() can be used to create a context with timeout control.\",\"Warning\",\"WithTimeout(1*time.Second) is equivalent to WithDeadline(time.Now().Add(1*time.Second))\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func main() { ctx, _ := context.WithTimeout(context.Background(), 3*time.Second) go func(ctx1 context.Context) { for { select { case <-ctx1.Done(): fmt.Println(\\\"time out\\\") return default: fmt.Println(\\\"running...\\\") time.Sleep(time.Second) } } }(ctx) time.Sleep(5 * time.Second) } // Results： // running... // running... // running... // time out \"]},\"80\":{\"h\":\"WithCancel()\",\"t\":[\"Using WithCancel() can create a manually terminated context. Executing cancel() can manually terminate it.\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func main() { ctx, cancel := context.WithCancel(context.Background()) go func(ctx1 context.Context) { for { select { case <-ctx1.Done(): fmt.Println(\\\"canceled\\\") return default: fmt.Println(\\\"running...\\\") time.Sleep(time.Second) } } }(ctx) time.Sleep(3*time.Second) cancel() time.Sleep(5 * time.Second) } // Results： // running... // running... // running... // canceled \"]},\"81\":{\"h\":\"Basic\"},\"82\":{\"h\":\"Pointer\"},\"83\":{\"h\":\"What is a pointer and a pointer variable?\",\"t\":[\"Click to expand Ordinary variables store data, while pointer variables store the address of the data. \",\"Learning about pointers mainly involves two operators & and *.\",\"&: Address operator, used to get the address from a variable\",\"// Define an ordinary variable and print it num := 99 fmt.Println(num) //output: 99 ptr := &num fmt.Println(ptr) //output: for example: 0xc000086020 \",\"*: Dereference operator, used to get data from an address\",\"tamp := *ptr fmt.Println(tamp) //output: 99 \"]},\"84\":{\"h\":\"Why use pointers?\",\"t\":[\"Click to expand\",\"Significance One: Easy Coding\",\"Pointers play an important role in data structures. Through pointers, we can create complex data structures such as linked lists, trees, and graphs. Pointers can easily access and manipulate relationships between nodes in data structures, thereby achieving efficient data storage and retrieval.\",\"Pointers can pass references of data between functions, instead of copying the entire data. This can save memory space and improve the execution efficiency of the program. By passing pointers, functions can directly modify the original data without needing to return a value.\",\"Significance Two: Save Memory\",\"Pointers can directly access and modify data in memory. Through pointers, we can dynamically allocate memory at runtime to meet the needs of the program, and release memory when it is not needed, avoiding memory leaks.\",\"Pointers can dynamically allocate memory during program execution. Through dynamic memory allocation, we can allocate and release memory as needed, thereby improving the flexibility and efficiency of the program.\"]},\"85\":{\"h\":\"Which objects can be addressed and which cannot?\",\"t\":[\"Click to expand\",\"The following objects can be addressed using & to obtain their memory addresses:\",\"Variables\",\"Pointers\",\"Arrays, slices, and their internal data\",\"Struct pointers\",\"Map\",\"The following objects cannot be addressed:\",\"Structs\",\"Constants\",\"Literals\",\"Functions\",\"Non-pointer elements of maps\",\"Array literals\"]},\"86\":{\"h\":\"Literal\"},\"87\":{\"h\":\"What does literal mean?\",\"t\":[\"Click to expand - The text of these basic type values below is a basic type literal. \",\"Basic Type\",\"Collection\",\"Boolean Type\",\"bool\",\"String Type\",\"string\",\"Complex Type\",\"complex64complex128\",\"Float Type\",\"float32float64\",\"Integer Type\",\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",\"For example:\",\"s := \\\"hello world\\\" // \\\"hello world\\\" is the literal value n := 10 // 10 is the literal value \",\"An unnamed constant is a special kind of constant that doesn't have a specific name. This kind of constant only has a value, and there is no variable name associated with it. The following strings are string literals, which are unnamed constants.\",\"\\\"hello，world\\\" \\\"123\\\" \"]},\"88\":{\"h\":\"Can different literals have the same value?\",\"t\":[\"Click to expand\",\"A value can be represented by multiple literals. For example, the decimal value 21 can be represented by three different literals\",\"Decimal\",\"Octal\",\"Binary\",\"Hexadecimal\",\"21\",\"0o25\",\"0b0001 0101\",\"0x15\",\"import \\\"fmt\\\" func main() { fmt.Println(21 == 0o25) fmt.Println(21 == 0x15 ) fmt.Println(21 == 0b0001 0101) }// The result of the run shows that they are equal \"]},\"89\":{\"h\":\"What is the difference between a literal and a variable?\",\"t\":[\"Click to expand\",\"A literal is an unnamed constant, just like a constant, it is not addressable.\",\"For example\",\"func run() string { return \\\"fast\\\" } func main() { fmt.Println(&run()) } \",\"./main.go:10:14: cannot take the address of run() \",\"If you do not use a variable name to hold it, the text value of a string returned by a function, which is a string literal, and this kind of literal is not addressable, an error will occur. To use & to address, you must use a variable name to hold it.\",\"But the following is correct\",\"func run() string { return \\\"fast\\\" } func main() { t := run() fmt.Println(&t) } \"]},\"90\":{\"h\":\"What is a composite literal?\",\"t\":[\"Click to expand\",\"A composite literal is a way to define and initialize an object together. In other words, a composite literal is used to construct values for structures, arrays, slices, and maps, and each time a new value is created. They are followed by the type of the literal, curly braces, and a list of elements. Each element can optionally be preceded by a related key.\",\"Using composite literals can be simpler, and the composite literal methods for structures, arrays, slices, and maps are as follows.\",\"Structures use composite literals to define and initialize\",\"type man struct { nationality string height int } func main() { // Declare and assign properties su := man{ nationality: \\\"China\\\", height: 180, } } \",\"Structures use the cumbersome conventional method as follows\",\"type man struct { nationality string height int } func main() { // Declare object var su man // Assign properties su.nationality = \\\"China\\\" su.height = 180 } \",\"Map uses composite literal method for definition and initialization as follows\",\"m := map[string]int { \\\"math\\\": 96, \\\"Chinese\\\": 90, } \",\"Similarly, arrays use composite literal method for definition and initialization as follows\",\"colours := [3]string{\\\"black\\\", \\\"red\\\", \\\"white\\\"} \",\"Slices use composite literal method as follows\",\"s := []string{\\\"red\\\", \\\"black\\\"} // The capacity and length of the slice will be automatically filled in \"]},\"91\":{\"h\":\"Others\"},\"92\":{\"h\":\"What is the difference between rune and byte in Go?\",\"t\":[\"Click to expand\",\"In Go language, byte and rune are both types used to represent characters, but there are some differences between them:\"]},\"93\":{\"h\":\"Different types:\",\"t\":[\"byte: byte, is an alias type of uint8\",\"rune: character, is an alias type of int32\"]},\"94\":{\"h\":\"Different stored characters:\",\"t\":[\"//byte is used to represent ASCII code characters, can only store characters within the range of 0-255. var a byte = 'Y' // ASCII code character //rune is used to represent Unicode characters, can store any Unicode character. var b rune = '酥' // Unicode character \"]},\"95\":{\"h\":\"Different byte sizes occupied: byte occupies 1 byte, rune occupies 4 bytes.\",\"t\":[\"import \\\"unsafe\\\" var a byte = 'Y' var b rune = '酥' fmt.Printf(\\\"a occupies %d bytes\\\\nb occupies %d bytes\\\", unsafe.Sizeof(a), unsafe.Sizeof(b)) // Output: a occupies 1 byte b occupies 4 bytes \"]},\"96\":{\"h\":\"Different character ranges represented:\",\"t\":[\"Since the value that the byte type can represent is limited, there are only 2^8=256. So if you want to represent Chinese, you can only use the rune type.\",\"Here is the English translation of your text:\"]},\"97\":{\"h\":\"What are deep copy and shallow copy in golang?\",\"t\":[\"Click to expand\",\"What is copying?\",\"The simplest form of copying is as follows\",\"a := 648 b := a //copy a to b \",\"So what are deep copy and shallow copy?\",\"Deep and shallow copying also depend on the type.\",\"Type\",\"Details\",\"Reference type\",\"SliceMapChannelsInterfacesFunctions\",\"Value type\",\"StringArrayIntStructFloatBool\",\"The effects of copying two types are different. Let's first talk about the value type that we are more familiar with. As can be seen from the question of what is copying, if it is a value type, a new space will be allocated to store the value every time it is copied, and the two copied value types are independent and do not affect each other.\",\"Take the reference type slice as an example to talk about deep copy and shallow copy\",\"Type\",\"Example\",\"Deep copy\",\"copy(slice1, slice2)\",\"Shallow copy\",\"slice1 = slice2\",\"Shallow copy only changes the pointer, as follows\",\"package main import \\\"fmt\\\" func main() { var slice1 = []int{7, 8, 9} var slice2 = make([]int, 3) //slice initialization slice2 = slice1 //shallow copy changes the pointer of slice2 fmt.Println(slice1) slice2[0] = 648 // change slice2[0], slice1[0] also changes fmt.Println(slice2) fmt.Println(slice1) } \",\"The output is as follows\",\"[7 8 9] [648 8 9] [648 8 9] \",\"So for slices, shallow copy changes its address.\",\"And deep copy will change the array value in the memory of the address, as follows\",\"package main import \\\"fmt\\\" func main() { var slice1 = []int{7, 8, 9} var slice2 = make([]int, 3) //slice initialization copy(slice2, slice1) //deep copy will change the array value in the memory of the address fmt.Println(slice2) slice2[0] = 648 // change slice2[0], slice1[0] remains unchanged fmt.Println(slice2) fmt.Println(slice1) } \",\"[7 8 9] [648 8 9] [7 8 9] \"]},\"98\":{\"h\":\"What's the difference between make and new ?\",\"t\":[\"Click to expand\",\"new is used to allocate memory for any type and return a pointer to that type, initializing the value to zero.\",\"new is not commonly used\",\"package main import \\\"fmt\\\" func main() { s := new(string) n := new(int) fmt.Println(s) // 0xc00008a030 fmt.Println(*s) // \\\"\\\" fmt.Println(n) // 0xc00000a0d8 fmt.Println(*n) // 0 } \",\"make is mainly used for initializing slices, map, and channel.\",\"package main import \\\"fmt\\\" func main() { m := make(map[string]int, 10) fmt.Println(m) // map[] } \"]},\"99\":{\"h\":\"What's the difference between arrays and slices?\",\"t\":[\"Click to expand\",\"The length of an array is fixed, determined at creation, and cannot be changed. The length of a slice is dynamic and will automatically expand based on the data added.\",\"When passing parameters in functions, data is passed by value, while slices are passed by reference.\",\"Slices have a capacity (capacity) parameter, arrays do not.\"]},\"100\":{\"h\":\"If for range adds data at the same time, will for range execute indefinitely?\",\"t\":[\"Click to expand\",\"No, when executing for range, the actual traversal is a copy of the variable, so changing the traversed variable is not nutritious.\",\"package main import \\\"fmt\\\" func main() { n := []int{1, 2, 3} for _, v := range n { n = append(n, v) } fmt.Println(n) // Result: [1 2 3 1 2 3] } \"]},\"101\":{\"h\":\"What is the execution order of multiple defers?\",\"t\":[\"Click to expand\",\"The execution order is similar to a stack, first in, last out.\",\"package main import \\\"fmt\\\" func main() { defer func() { fmt.Println(1) }() defer func() { fmt.Println(2) }() defer func() { fmt.Println(3) }() } // Result: // 3 // 2 // 1 \"]},\"102\":{\"h\":\"What is data overflow?\",\"t\":[\"Click to expand\",\"When using numeric types, if the data reaches the maximum value, the next data will overflow, such as uint will start from 0 after overflow, int will become negative after overflow.\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { var n int8 = math.MaxInt8 var m uint8 = math.MaxUint8 n += 2 m += 1 fmt.Println(n) // -127 fmt.Println(m) // 0 } \",\"How to avoid?\",\"Use uint for positive numbers first, the range is larger\",\"Add judgment code to determine whether it overflows\"]},\"103\":{\"h\":\"Should function parameters use value or pointer?\",\"t\":[\"Click to expand\",\"Value transfer\",\"Generally speaking, value transfer can be used for common types. The advantage of value transfer is that modifications to the value within the function will not affect the original variable and will not cause concurrency problems. The disadvantage is that value transfer will copy a copy of the corresponding variable, which will occupy more memory. If the input structure is very large, it is not suitable to use value transfer.\",\"Pointer and reference transfer\",\"The advantage of using pointer transfer is that it directly transfers the address of the variable, without the need for extra space. The disadvantage is that data modification during concurrent operations will affect the original data. Passing in a slice is actually passing the pointer of the slice to avoid repeated copying. If an array is passed in, it is value transfer, and a copy will be made.\"]},\"104\":{\"h\":\"Medium\"},\"105\":{\"h\":\"Have you used context ? What are the use cases for context ?\",\"t\":[\"Click to expand\",\"Scenario\",\"Introduction\",\"Timeout handling\",\"By using context, you can easily set a timeout, and the coroutine will automatically terminate after the timeout\",\"Terminate coroutine\",\"By using the cancel() method, coroutines can be easily terminated\",\"Data transfer\",\"We can write data into context to transfer data between different coroutines\"]},\"106\":{\"h\":\"Is channel thread-safe?\",\"t\":[\"Click to expand\",\"channel is thread-safe, the reason is that channel has implemented a lock mechanism internally,\"]}},\"dirtCount\":0,\"index\":[[\"酥\",{\"1\":{\"94\":1,\"95\":1}}],[\"^=\",{\"1\":{\"42\":2}}],[\"^\",{\"1\":{\"41\":3,\"42\":1,\"44\":2}}],[\"||\",{\"1\":{\"44\":1}}],[\"|=\",{\"1\":{\"42\":2}}],[\"|\",{\"1\":{\"41\":3,\"42\":1,\"44\":1}}],[\"q\",{\"1\":{\"41\":4}}],[\"question\",{\"1\":{\"97\":1}}],[\"questions\",{\"1\":{\"1\":1}}],[\"quit\",{\"1\":{\"21\":6}}],[\"90\",{\"1\":{\"90\":1}}],[\"96\",{\"1\":{\"90\":1}}],[\"99\",{\"1\":{\"83\":3}}],[\"9\",{\"1\":{\"32\":1,\"61\":3,\"97\":8}}],[\"join\",{\"0\":{\"48\":1},\"1\":{\"48\":3,\"49\":2,\"50\":2}}],[\"jack\",{\"1\":{\"29\":1,\"59\":1}}],[\"just\",{\"1\":{\"89\":1}}],[\"jump\",{\"1\":{\"20\":2}}],[\"judgment\",{\"1\":{\"19\":1,\"102\":1}}],[\"judgments\",{\"1\":{\"17\":1}}],[\"8\",{\"1\":{\"26\":1,\"32\":1,\"97\":8}}],[\"~\",{\"1\":{\"26\":2}}],[\"∞\",{\"1\":{\"26\":1}}],[\"zero\",{\"0\":{\"36\":1},\"1\":{\"23\":1,\"36\":2,\"68\":2,\"98\":1}}],[\"yes\",{\"1\":{\"39\":6}}],[\"y\",{\"1\":{\"21\":3,\"94\":1,\"95\":1}}],[\"your\",{\"1\":{\"96\":1}}],[\"you\",{\"0\":{\"105\":1},\"1\":{\"18\":3,\"23\":1,\"33\":1,\"35\":1,\"52\":1,\"53\":1,\"54\":1,\"57\":1,\"59\":1,\"63\":4,\"68\":1,\"69\":1,\"89\":2,\"96\":2,\"105\":1}}],[\"xor\",{\"1\":{\"41\":1}}],[\"x+y\",{\"1\":{\"21\":1}}],[\"x\",{\"1\":{\"21\":3}}],[\"very\",{\"1\":{\"73\":1,\"103\":1}}],[\"v\",{\"1\":{\"19\":6,\"100\":2}}],[\"val\",{\"1\":{\"53\":4,\"55\":4,\"68\":1,\"69\":1,\"77\":7}}],[\"val2\",{\"1\":{\"10\":4}}],[\"val1\",{\"1\":{\"10\":4}}],[\"valuetype\",{\"1\":{\"33\":2,\"52\":2}}],[\"values\",{\"1\":{\"6\":1,\"23\":1,\"30\":1,\"36\":1,\"53\":1,\"74\":1,\"87\":1,\"90\":1}}],[\"value2\",{\"1\":{\"5\":1}}],[\"value1\",{\"1\":{\"5\":1}}],[\"value\",{\"0\":{\"36\":1,\"54\":1,\"88\":1,\"103\":1},\"1\":{\"5\":2,\"14\":1,\"33\":5,\"36\":1,\"41\":1,\"52\":5,\"53\":23,\"54\":10,\"55\":3,\"68\":2,\"74\":1,\"78\":1,\"84\":1,\"87\":3,\"88\":2,\"89\":1,\"90\":1,\"96\":1,\"97\":7,\"98\":1,\"99\":1,\"102\":1,\"103\":7}}],[\"var\",{\"0\":{\"10\":1},\"1\":{\"10\":7,\"18\":1,\"28\":1,\"29\":1,\"30\":1,\"32\":1,\"33\":1,\"35\":1,\"50\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"59\":1,\"90\":1,\"94\":2,\"95\":2,\"97\":4,\"102\":2}}],[\"variables\",{\"1\":{\"10\":3,\"23\":1,\"83\":2,\"85\":1}}],[\"variable\",{\"0\":{\"83\":1,\"89\":1},\"1\":{\"9\":1,\"10\":2,\"35\":3,\"41\":1,\"63\":1,\"83\":2,\"87\":1,\"89\":2,\"100\":2,\"103\":3}}],[\"variadic\",{\"1\":{\"6\":1}}],[\"various\",{\"1\":{\"3\":1}}],[\"+∞\",{\"1\":{\"26\":2}}],[\"+=\",{\"1\":{\"23\":1,\"42\":2,\"102\":2}}],[\"++\",{\"1\":{\"20\":1,\"23\":1,\"32\":1,\"38\":1}}],[\"+\",{\"1\":{\"19\":1,\"28\":4,\"38\":2,\"42\":2,\"44\":1}}],[\"large\",{\"1\":{\"103\":1}}],[\"larger\",{\"1\":{\"102\":1}}],[\"language\",{\"1\":{\"92\":1}}],[\"last\",{\"1\":{\"23\":1,\"101\":1}}],[\"let\",{\"1\":{\"97\":1}}],[\"leaks\",{\"1\":{\"84\":1}}],[\"learning\",{\"1\":{\"83\":1}}],[\"len\",{\"1\":{\"56\":2,\"61\":2,\"63\":1}}],[\"length\",{\"0\":{\"56\":1,\"61\":1},\"1\":{\"56\":1,\"61\":2,\"63\":1,\"90\":1,\"99\":2}}],[\"less\",{\"1\":{\"39\":2}}],[\"left\",{\"1\":{\"39\":4,\"41\":1,\"42\":1,\"67\":1}}],[\"lucky\",{\"1\":{\"34\":1}}],[\"lock\",{\"1\":{\"106\":1}}],[\"location\",{\"1\":{\"20\":1}}],[\"low\",{\"1\":{\"44\":1}}],[\"logical\",{\"0\":{\"40\":1}}],[\"loop\",{\"1\":{\"19\":3,\"68\":1}}],[\"limited\",{\"1\":{\"96\":1}}],[\"literal\",{\"0\":{\"86\":1,\"87\":1,\"89\":1,\"90\":1},\"1\":{\"87\":3,\"89\":3,\"90\":7}}],[\"literals\",{\"0\":{\"88\":1},\"1\":{\"85\":2,\"87\":1,\"88\":2,\"90\":2}}],[\"linked\",{\"1\":{\"84\":1}}],[\"line\",{\"1\":{\"7\":2}}],[\"like\",{\"1\":{\"53\":1,\"54\":1,\"89\":1}}],[\"lib\",{\"1\":{\"7\":3}}],[\"lists\",{\"1\":{\"84\":1}}],[\"list\",{\"1\":{\"6\":1,\"90\":1}}],[\"run\",{\"1\":{\"88\":1,\"89\":5}}],[\"runtime\",{\"1\":{\"84\":1}}],[\"running\",{\"1\":{\"79\":4,\"80\":4}}],[\"rune\",{\"0\":{\"92\":1,\"95\":1},\"1\":{\"26\":1,\"36\":1,\"92\":1,\"93\":1,\"94\":2,\"95\":1,\"96\":1}}],[\"role\",{\"1\":{\"84\":1}}],[\"root\",{\"0\":{\"75\":1,\"76\":1},\"1\":{\"75\":3}}],[\"round\",{\"1\":{\"19\":1}}],[\"right\",{\"1\":{\"39\":4,\"41\":1,\"42\":1}}],[\"randomly\",{\"1\":{\"69\":1}}],[\"random\",{\"1\":{\"21\":1}}],[\"ranges\",{\"0\":{\"96\":1}}],[\"range\",{\"0\":{\"19\":1,\"100\":2},\"1\":{\"19\":1,\"26\":1,\"53\":7,\"68\":1,\"94\":1,\"100\":2,\"102\":1}}],[\"repeated\",{\"1\":{\"103\":1}}],[\"represent\",{\"1\":{\"92\":1,\"94\":2,\"96\":2}}],[\"represented\",{\"0\":{\"96\":1},\"1\":{\"88\":2}}],[\"remains\",{\"1\":{\"97\":1}}],[\"remaining\",{\"1\":{\"19\":1}}],[\"red\",{\"1\":{\"90\":2}}],[\"related\",{\"1\":{\"90\":1}}],[\"relationships\",{\"1\":{\"84\":1}}],[\"relational\",{\"0\":{\"39\":1}}],[\"release\",{\"1\":{\"84\":2}}],[\"retrieval\",{\"1\":{\"84\":1}}],[\"retaining\",{\"1\":{\"78\":1}}],[\"returned\",{\"1\":{\"89\":1}}],[\"return\",{\"1\":{\"6\":1,\"21\":1,\"23\":6,\"50\":1,\"70\":1,\"79\":1,\"80\":1,\"84\":1,\"89\":2,\"98\":1}}],[\"references\",{\"1\":{\"84\":1}}],[\"reference\",{\"1\":{\"63\":1,\"97\":2,\"99\":1,\"103\":1}}],[\"reason\",{\"1\":{\"106\":1}}],[\"reaches\",{\"1\":{\"66\":1,\"102\":1}}],[\"real\",{\"1\":{\"28\":2}}],[\"reading\",{\"1\":{\"68\":1}}],[\"read\",{\"1\":{\"13\":1,\"68\":1}}],[\"results\",{\"1\":{\"77\":1,\"79\":1,\"80\":1}}],[\"result\",{\"1\":{\"18\":2,\"20\":1,\"23\":3,\"24\":1,\"32\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"53\":1,\"54\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"70\":1,\"88\":1,\"100\":1,\"101\":1}}],[\"reserved\",{\"1\":{\"3\":1}}],[\"received\",{\"1\":{\"66\":1}}],[\"receive\",{\"1\":{\"21\":1,\"69\":5}}],[\"receives\",{\"1\":{\"21\":1}}],[\"receiving\",{\"0\":{\"67\":1},\"1\":{\"12\":2,\"67\":1,\"71\":1}}],[\"recommended\",{\"1\":{\"14\":1}}],[\"requires\",{\"1\":{\"7\":1}}],[\"70\",{\"1\":{\"38\":1}}],[\"7\",{\"1\":{\"18\":1,\"23\":1,\"32\":1,\"97\":5}}],[\"66\",{\"1\":{\"33\":1,\"52\":1}}],[\"648\",{\"1\":{\"97\":6}}],[\"64\",{\"1\":{\"26\":2,\"27\":1,\"28\":1}}],[\"6\",{\"1\":{\"18\":1,\"32\":1,\"62\":2}}],[\"51\",{\"1\":{\"38\":1}}],[\"50\",{\"1\":{\"38\":1,\"39\":1}}],[\"5\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"24\":1,\"28\":3,\"31\":2,\"32\":1,\"44\":1,\"60\":1,\"61\":3,\"62\":2,\"63\":2,\"79\":1,\"80\":1}}],[\"30\",{\"1\":{\"38\":1}}],[\"3i\",{\"1\":{\"28\":2}}],[\"32\",{\"1\":{\"26\":2,\"27\":1,\"28\":1}}],[\"3\",{\"1\":{\"18\":1,\"19\":2,\"20\":1,\"28\":1,\"31\":1,\"32\":1,\"44\":1,\"60\":2,\"62\":2,\"63\":2,\"70\":1,\"79\":1,\"80\":1,\"90\":1,\"97\":2,\"100\":3,\"101\":2}}],[\"49\",{\"1\":{\"38\":1}}],[\"4\",{\"0\":{\"95\":1},\"1\":{\"18\":2,\"19\":1,\"20\":1,\"23\":1,\"31\":1,\"32\":1,\"44\":1,\"60\":2,\"62\":2,\"63\":2,\"95\":1}}],[\">>=\",{\"1\":{\"42\":2}}],[\">>\",{\"1\":{\"41\":2,\"42\":1,\"44\":1}}],[\">=\",{\"1\":{\"19\":1,\"39\":2,\"44\":1}}],[\">\",{\"1\":{\"17\":1,\"39\":2,\"44\":1}}],[\"2^8=256\",{\"1\":{\"96\":1}}],[\"21\",{\"1\":{\"88\":5}}],[\"2\",{\"1\":{\"18\":3,\"19\":3,\"20\":1,\"24\":2,\"29\":1,\"31\":1,\"32\":1,\"38\":1,\"41\":4,\"42\":10,\"44\":1,\"60\":3,\"62\":4,\"63\":3,\"66\":1,\"100\":3,\"101\":2,\"102\":1}}],[\"20\",{\"1\":{\"12\":1,\"38\":1,\"39\":1,\"48\":1}}],[\"255\",{\"1\":{\"94\":1}}],[\"25\",{\"1\":{\"3\":1}}],[\"uintptr\",{\"1\":{\"36\":1}}],[\"uint64\",{\"1\":{\"36\":1}}],[\"uint32\",{\"1\":{\"36\":1}}],[\"uint16\",{\"1\":{\"36\":1}}],[\"uint8\",{\"1\":{\"26\":1,\"36\":1,\"93\":1,\"102\":1}}],[\"uint\",{\"1\":{\"26\":1,\"36\":1,\"102\":2}}],[\"unchanged\",{\"1\":{\"97\":1}}],[\"unsafe\",{\"1\":{\"95\":3}}],[\"unsigned\",{\"1\":{\"26\":3}}],[\"unnamed\",{\"1\":{\"87\":2,\"89\":1}}],[\"unicode\",{\"1\":{\"26\":1,\"94\":3}}],[\"until\",{\"1\":{\"21\":1,\"66\":1}}],[\"underlying\",{\"1\":{\"14\":1}}],[\"unordered\",{\"1\":{\"14\":1}}],[\"unbuffered\",{\"1\":{\"12\":1,\"66\":2}}],[\"usually\",{\"1\":{\"69\":1}}],[\"using\",{\"1\":{\"7\":1,\"10\":1,\"18\":1,\"19\":1,\"33\":1,\"34\":1,\"47\":2,\"48\":2,\"49\":2,\"50\":1,\"52\":3,\"67\":2,\"68\":1,\"71\":1,\"73\":1,\"80\":1,\"85\":1,\"90\":1,\"102\":1,\"103\":1,\"105\":2}}],[\"usage\",{\"1\":{\"7\":1}}],[\"uses\",{\"1\":{\"90\":1}}],[\"use\",{\"0\":{\"84\":1,\"103\":1,\"105\":1},\"1\":{\"7\":4,\"18\":1,\"23\":1,\"35\":1,\"42\":1,\"47\":1,\"48\":1,\"49\":3,\"50\":2,\"53\":4,\"54\":1,\"56\":1,\"57\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":1,\"66\":1,\"68\":2,\"69\":2,\"77\":1,\"89\":3,\"90\":4,\"96\":1,\"102\":1,\"103\":1}}],[\"used\",{\"0\":{\"105\":1},\"1\":{\"3\":5,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":1,\"18\":1,\"19\":1,\"23\":2,\"24\":1,\"26\":2,\"44\":1,\"65\":1,\"73\":2,\"78\":1,\"79\":1,\"83\":2,\"90\":1,\"92\":1,\"94\":2,\"98\":3,\"103\":1}}],[\"<<=\",{\"1\":{\"42\":2}}],[\"<<\",{\"1\":{\"41\":2,\"42\":1,\"44\":1}}],[\"<=\",{\"1\":{\"19\":1,\"39\":2,\"44\":1}}],[\"<\",{\"1\":{\"12\":1,\"19\":1,\"20\":1,\"21\":5,\"23\":1,\"32\":1,\"39\":2,\"44\":1,\"67\":4,\"68\":1,\"69\":3,\"70\":1,\"74\":1,\"79\":1,\"80\":1}}],[\"nutritious\",{\"1\":{\"100\":1}}],[\"numeric\",{\"1\":{\"102\":1}}],[\"number\",{\"1\":{\"28\":2}}],[\"numbers\",{\"0\":{\"27\":1,\"28\":1},\"1\":{\"26\":2,\"27\":2,\"28\":2,\"39\":2,\"102\":1}}],[\"num\",{\"1\":{\"9\":2,\"23\":3,\"35\":2,\"83\":3}}],[\"nb\",{\"1\":{\"95\":1}}],[\"nationality\",{\"1\":{\"90\":4}}],[\"name2\",{\"1\":{\"10\":4}}],[\"name1\",{\"1\":{\"10\":4}}],[\"name\",{\"1\":{\"7\":2,\"8\":1,\"9\":1,\"10\":2,\"15\":1,\"29\":1,\"30\":1,\"34\":3,\"87\":2,\"89\":2}}],[\"nil\",{\"1\":{\"36\":6}}],[\"n\",{\"1\":{\"35\":2,\"53\":3,\"87\":1,\"98\":3,\"100\":5,\"102\":3}}],[\"negative\",{\"1\":{\"26\":1,\"102\":1}}],[\"next\",{\"1\":{\"18\":1,\"19\":1,\"102\":1}}],[\"needed\",{\"1\":{\"84\":2}}],[\"needs\",{\"1\":{\"84\":1}}],[\"needing\",{\"1\":{\"84\":1}}],[\"need\",{\"1\":{\"18\":1,\"103\":1}}],[\"nested\",{\"1\":{\"17\":1}}],[\"newticker\",{\"1\":{\"70\":1}}],[\"new\",{\"0\":{\"98\":1},\"1\":{\"9\":1,\"47\":3,\"48\":2,\"49\":2,\"50\":2,\"90\":1,\"97\":1,\"98\":4}}],[\"non\",{\"1\":{\"85\":1}}],[\"now\",{\"1\":{\"79\":1}}],[\"node\",{\"1\":{\"75\":2}}],[\"nodes\",{\"0\":{\"75\":2,\"76\":1,\"77\":1},\"1\":{\"75\":4,\"78\":1,\"84\":1}}],[\"no\",{\"1\":{\"24\":4,\"87\":1,\"100\":1}}],[\"normalerr\",{\"1\":{\"50\":4}}],[\"normal\",{\"1\":{\"7\":1}}],[\"note\",{\"1\":{\"23\":1}}],[\"not\",{\"1\":{\"6\":1,\"39\":1,\"55\":2,\"57\":1,\"63\":1,\"84\":1,\"89\":3,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"103\":3}}],[\"play\",{\"1\":{\"84\":1}}],[\"ptr\",{\"1\":{\"83\":3}}],[\"pieces\",{\"1\":{\"62\":1}}],[\"piece\",{\"1\":{\"62\":1}}],[\"pointing\",{\"1\":{\"67\":1}}],[\"pointer\",{\"0\":{\"35\":1,\"82\":1,\"83\":2,\"103\":1},\"1\":{\"35\":1,\"36\":1,\"43\":1,\"83\":1,\"85\":1,\"97\":2,\"98\":1,\"103\":3}}],[\"pointers\",{\"0\":{\"35\":1,\"84\":1},\"1\":{\"35\":2,\"83\":1,\"84\":8,\"85\":2}}],[\"point\",{\"0\":{\"27\":1},\"1\":{\"27\":2,\"28\":1}}],[\"positive\",{\"1\":{\"26\":2,\"102\":1}}],[\"position\",{\"1\":{\"20\":1}}],[\"perform\",{\"1\":{\"18\":1,\"23\":1,\"24\":1}}],[\"person\",{\"1\":{\"15\":1}}],[\"preceded\",{\"1\":{\"90\":1}}],[\"precedence\",{\"0\":{\"44\":1},\"1\":{\"44\":2}}],[\"precautions\",{\"0\":{\"71\":1}}],[\"print\",{\"1\":{\"52\":1,\"53\":6,\"69\":1,\"83\":1}}],[\"printf\",{\"1\":{\"29\":1,\"53\":3,\"95\":1}}],[\"println\",{\"1\":{\"17\":2,\"18\":11,\"19\":5,\"20\":2,\"21\":2,\"23\":3,\"24\":3,\"32\":1,\"33\":1,\"34\":1,\"47\":1,\"48\":2,\"49\":4,\"50\":1,\"52\":1,\"53\":3,\"54\":2,\"55\":4,\"59\":1,\"60\":1,\"61\":1,\"62\":3,\"63\":2,\"69\":4,\"70\":2,\"77\":4,\"79\":2,\"80\":2,\"83\":3,\"88\":3,\"89\":2,\"97\":6,\"98\":5,\"100\":1,\"101\":3,\"102\":2}}],[\"private\",{\"1\":{\"10\":2}}],[\"properties\",{\"1\":{\"90\":2}}],[\"problems\",{\"1\":{\"71\":1,\"103\":1}}],[\"problem\",{\"1\":{\"57\":1}}],[\"program\",{\"1\":{\"3\":2,\"24\":1,\"84\":4}}],[\"provides\",{\"1\":{\"1\":1,\"46\":1,\"47\":1}}],[\"public\",{\"1\":{\"7\":1,\"10\":2}}],[\"passed\",{\"1\":{\"99\":2,\"103\":1}}],[\"passing\",{\"1\":{\"84\":1,\"99\":1,\"103\":2}}],[\"pass\",{\"1\":{\"84\":1}}],[\"panic\",{\"1\":{\"68\":1}}],[\"pair\",{\"1\":{\"54\":2}}],[\"pairs\",{\"0\":{\"54\":1},\"1\":{\"14\":1,\"53\":2}}],[\"padded\",{\"1\":{\"41\":2}}],[\"path\",{\"1\":{\"33\":2,\"52\":2}}],[\"parent\",{\"1\":{\"78\":1}}],[\"parentheses\",{\"1\":{\"10\":1,\"44\":1}}],[\"part\",{\"1\":{\"28\":1}}],[\"parameter\",{\"1\":{\"6\":1,\"99\":1}}],[\"parameters\",{\"0\":{\"103\":1},\"1\":{\"6\":2,\"99\":1}}],[\"package\",{\"0\":{\"8\":1},\"1\":{\"7\":3,\"8\":2,\"18\":1,\"20\":1,\"21\":1,\"23\":2,\"24\":1,\"29\":1,\"32\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"53\":1,\"54\":1,\"55\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":1,\"70\":1,\"77\":1,\"79\":1,\"80\":1,\"97\":2,\"98\":2,\"100\":1,\"101\":1,\"102\":1}}],[\"packages\",{\"1\":{\"7\":3}}],[\"p1\",{\"1\":{\"6\":1}}],[\"p\",{\"1\":{\"6\":4,\"41\":4}}],[\"127\",{\"1\":{\"102\":1}}],[\"123\",{\"1\":{\"87\":1}}],[\"180\",{\"1\":{\"90\":2}}],[\"14\",{\"1\":{\"89\":1}}],[\"16\",{\"1\":{\"26\":1}}],[\"1010\",{\"1\":{\"41\":2}}],[\"1011\",{\"1\":{\"41\":2}}],[\"10\",{\"1\":{\"14\":2,\"19\":1,\"20\":1,\"21\":1,\"32\":1,\"35\":1,\"38\":1,\"52\":1,\"59\":1,\"67\":1,\"87\":2,\"89\":1,\"98\":1}}],[\"1000\",{\"1\":{\"38\":1,\"41\":1}}],[\"100\",{\"1\":{\"5\":1}}],[\"1\",{\"0\":{\"95\":1},\"1\":{\"5\":1,\"18\":2,\"19\":2,\"20\":1,\"21\":1,\"23\":1,\"24\":2,\"31\":1,\"32\":1,\"41\":10,\"44\":1,\"48\":1,\"60\":1,\"62\":4,\"63\":3,\"79\":2,\"95\":1,\"100\":3,\"101\":2,\"102\":1}}],[\"0xc00000a0d8\",{\"1\":{\"98\":1}}],[\"0xc00008a030\",{\"1\":{\"98\":1}}],[\"0xc000086020\",{\"1\":{\"83\":1}}],[\"0x15\",{\"1\":{\"88\":2}}],[\"0101\",{\"1\":{\"88\":2}}],[\"0111\",{\"1\":{\"41\":2}}],[\"0110\",{\"1\":{\"41\":2}}],[\"0b0001\",{\"1\":{\"88\":2}}],[\"0o25\",{\"1\":{\"88\":2}}],[\"0001\",{\"1\":{\"41\":2}}],[\"0000\",{\"1\":{\"41\":2}}],[\"0011\",{\"1\":{\"41\":1}}],[\"0+0i\",{\"1\":{\"36\":1}}],[\"0\",{\"1\":{\"5\":1,\"17\":1,\"20\":2,\"21\":3,\"23\":1,\"26\":2,\"32\":2,\"36\":6,\"41\":12,\"60\":1,\"61\":5,\"62\":4,\"63\":3,\"94\":1,\"97\":6,\"98\":1,\"102\":2}}],[\"how\",{\"1\":{\"102\":1}}],[\"hold\",{\"1\":{\"89\":2}}],[\"have\",{\"0\":{\"88\":1,\"105\":1},\"1\":{\"87\":1,\"99\":1}}],[\"handling\",{\"0\":{\"45\":1},\"1\":{\"105\":1}}],[\"hash\",{\"1\":{\"14\":1}}],[\"has\",{\"1\":{\"3\":1,\"23\":1,\"63\":1,\"68\":1,\"87\":1,\"106\":1}}],[\"high\",{\"1\":{\"44\":1}}],[\"hi\",{\"1\":{\"29\":1}}],[\"height\",{\"1\":{\"90\":4}}],[\"hexadecimal\",{\"1\":{\"88\":1}}],[\"here\",{\"1\":{\"15\":1,\"96\":1}}],[\"hello\",{\"1\":{\"5\":1,\"17\":1,\"18\":1,\"23\":2,\"87\":3}}],[\"d\",{\"1\":{\"95\":2}}],[\"due\",{\"1\":{\"75\":1}}],[\"during\",{\"1\":{\"7\":1,\"84\":1,\"103\":1}}],[\"do\",{\"1\":{\"89\":1,\"97\":1,\"99\":1}}],[\"done\",{\"1\":{\"74\":1,\"79\":1,\"80\":1}}],[\"doesn\",{\"1\":{\"87\":1}}],[\"does\",{\"0\":{\"87\":1},\"1\":{\"6\":1}}],[\"dynamically\",{\"1\":{\"84\":2}}],[\"dynamic\",{\"1\":{\"32\":1,\"84\":1,\"99\":1}}],[\"day\",{\"1\":{\"18\":1}}],[\"dayofweek\",{\"1\":{\"18\":2}}],[\"data2\",{\"1\":{\"62\":2}}],[\"data1\",{\"1\":{\"62\":2,\"63\":7}}],[\"dataslice2\",{\"1\":{\"59\":2}}],[\"dataslice1\",{\"1\":{\"59\":3}}],[\"dataslice\",{\"1\":{\"59\":2}}],[\"datamap\",{\"1\":{\"53\":9,\"54\":9,\"55\":7,\"56\":1}}],[\"data\",{\"0\":{\"25\":1,\"62\":1,\"67\":1,\"100\":1,\"102\":1},\"1\":{\"5\":1,\"12\":3,\"21\":1,\"31\":2,\"32\":5,\"33\":2,\"35\":1,\"52\":2,\"59\":1,\"60\":4,\"61\":4,\"62\":7,\"63\":9,\"65\":2,\"66\":3,\"67\":2,\"69\":5,\"71\":1,\"73\":2,\"75\":1,\"78\":2,\"83\":3,\"84\":8,\"85\":1,\"99\":2,\"102\":2,\"103\":2,\"105\":3}}],[\"disadvantage\",{\"1\":{\"103\":2}}],[\"differences\",{\"1\":{\"92\":1}}],[\"difference\",{\"0\":{\"89\":1,\"92\":1,\"98\":1,\"99\":1}}],[\"different\",{\"0\":{\"88\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1},\"1\":{\"18\":2,\"88\":1,\"97\":1,\"105\":1}}],[\"division\",{\"1\":{\"38\":1}}],[\"directly\",{\"1\":{\"18\":1,\"59\":3,\"84\":2,\"103\":1}}],[\"direct\",{\"1\":{\"7\":1}}],[\"details\",{\"1\":{\"97\":1}}],[\"determined\",{\"1\":{\"99\":1}}],[\"determine\",{\"1\":{\"49\":2,\"68\":1,\"102\":1}}],[\"depend\",{\"1\":{\"97\":1}}],[\"deep\",{\"0\":{\"97\":1},\"1\":{\"97\":6}}],[\"dereference\",{\"1\":{\"83\":1}}],[\"derived\",{\"0\":{\"75\":1,\"77\":1},\"1\":{\"75\":3,\"77\":1,\"78\":1}}],[\"deadline\",{\"1\":{\"74\":3}}],[\"deadlock\",{\"1\":{\"71\":1}}],[\"delete\",{\"1\":{\"54\":4}}],[\"deleting\",{\"0\":{\"54\":1}}],[\"decrement\",{\"1\":{\"38\":1}}],[\"decimal\",{\"1\":{\"27\":1,\"88\":2}}],[\"declaring\",{\"1\":{\"5\":1}}],[\"declared\",{\"1\":{\"5\":1}}],[\"declare\",{\"1\":{\"3\":2,\"5\":2,\"6\":1,\"10\":3,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"33\":1,\"52\":1,\"59\":1,\"90\":2}}],[\"declaration\",{\"0\":{\"4\":1},\"1\":{\"3\":1,\"33\":1,\"52\":1}}],[\"description\",{\"1\":{\"26\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"43\":1}}],[\"definition\",{\"1\":{\"90\":2}}],[\"define\",{\"1\":{\"8\":1,\"9\":6,\"35\":1,\"73\":1,\"83\":1,\"90\":2}}],[\"defers\",{\"0\":{\"101\":1}}],[\"defer\",{\"0\":{\"23\":1},\"1\":{\"23\":6,\"101\":3}}],[\"defergo\",{\"1\":{\"3\":1}}],[\"default\",{\"1\":{\"6\":1,\"18\":5,\"69\":4,\"79\":1,\"80\":1}}],[\"==\",{\"1\":{\"19\":1,\"20\":1,\"39\":2,\"44\":1,\"88\":3}}],[\"=range\",{\"1\":{\"19\":3}}],[\"=0\",{\"1\":{\"19\":1}}],[\"=\",{\"1\":{\"5\":6,\"9\":1,\"10\":4,\"12\":2,\"14\":2,\"18\":2,\"19\":2,\"20\":1,\"21\":5,\"23\":2,\"28\":2,\"29\":2,\"30\":2,\"31\":1,\"32\":2,\"33\":2,\"34\":1,\"35\":2,\"39\":2,\"40\":2,\"42\":22,\"44\":1,\"47\":2,\"48\":3,\"49\":3,\"50\":3,\"52\":3,\"53\":8,\"54\":5,\"55\":6,\"59\":3,\"60\":1,\"61\":1,\"62\":3,\"63\":3,\"66\":2,\"68\":1,\"69\":1,\"70\":1,\"76\":2,\"77\":4,\"79\":1,\"80\":1,\"83\":3,\"87\":2,\"89\":1,\"90\":6,\"94\":2,\"95\":2,\"97\":10,\"98\":3,\"100\":3,\"102\":2}}],[\"overflows\",{\"1\":{\"102\":1}}],[\"overflow\",{\"0\":{\"102\":1},\"1\":{\"102\":3}}],[\"optionally\",{\"1\":{\"90\":1}}],[\"operation\",{\"1\":{\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"69\":1}}],[\"operations\",{\"1\":{\"21\":1,\"57\":1,\"103\":1}}],[\"operator\",{\"1\":{\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"83\":2}}],[\"operators\",{\"0\":{\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1},\"1\":{\"83\":1}}],[\"occupy\",{\"1\":{\"103\":1}}],[\"occupies\",{\"0\":{\"95\":2},\"1\":{\"95\":4}}],[\"occupied\",{\"0\":{\"95\":1}}],[\"occur\",{\"1\":{\"89\":1}}],[\"octal\",{\"1\":{\"88\":1}}],[\"obtain\",{\"1\":{\"85\":1}}],[\"objects\",{\"0\":{\"85\":1},\"1\":{\"85\":2}}],[\"object\",{\"1\":{\"50\":1,\"90\":2}}],[\"ok\",{\"1\":{\"55\":4,\"68\":2,\"74\":1}}],[\"others\",{\"0\":{\"91\":1}}],[\"other\",{\"0\":{\"43\":1},\"1\":{\"74\":1,\"90\":1,\"97\":1}}],[\"otherwise\",{\"1\":{\"39\":6,\"40\":2}}],[\"outside\",{\"1\":{\"35\":1}}],[\"output\",{\"1\":{\"33\":1,\"48\":2,\"49\":4,\"50\":1,\"83\":3,\"95\":1,\"97\":1}}],[\"out\",{\"1\":{\"23\":1,\"79\":2,\"101\":1}}],[\"original\",{\"1\":{\"84\":1,\"103\":2}}],[\"ordinary\",{\"1\":{\"83\":2}}],[\"order\",{\"0\":{\"101\":1},\"1\":{\"23\":1,\"101\":1}}],[\"or\",{\"0\":{\"103\":1},\"1\":{\"10\":1,\"23\":2,\"26\":1,\"30\":1,\"39\":2,\"41\":1,\"47\":1,\"75\":1}}],[\"one\",{\"1\":{\"18\":1,\"21\":1,\"48\":1,\"62\":1,\"84\":1}}],[\"on\",{\"1\":{\"10\":1,\"18\":1,\"26\":1,\"32\":1,\"42\":1,\"67\":1,\"97\":1,\"99\":1}}],[\"only\",{\"1\":{\"7\":1,\"9\":1,\"87\":1,\"94\":1,\"96\":2,\"97\":1}}],[\"once\",{\"1\":{\"5\":1,\"29\":1,\"31\":1}}],[\"omitted\",{\"1\":{\"5\":1}}],[\"often\",{\"1\":{\"65\":1}}],[\"official\",{\"1\":{\"57\":1}}],[\"of\",{\"0\":{\"56\":1,\"101\":1},\"1\":{\"3\":1,\"7\":1,\"10\":2,\"12\":3,\"14\":2,\"18\":1,\"19\":1,\"23\":3,\"24\":1,\"29\":2,\"31\":3,\"33\":3,\"34\":2,\"35\":3,\"43\":1,\"49\":1,\"52\":3,\"56\":1,\"60\":2,\"61\":4,\"62\":2,\"67\":1,\"73\":1,\"75\":1,\"78\":1,\"83\":1,\"84\":5,\"85\":1,\"87\":3,\"88\":1,\"89\":3,\"90\":3,\"93\":2,\"94\":1,\"96\":1,\"97\":6,\"99\":2,\"100\":1,\"103\":5}}],[\"words\",{\"1\":{\"90\":1}}],[\"world\",{\"1\":{\"17\":1,\"18\":2,\"23\":2,\"87\":3}}],[\"warning\",{\"1\":{\"66\":1,\"68\":1,\"79\":1}}],[\"was\",{\"1\":{\"48\":1}}],[\"ways\",{\"1\":{\"47\":1,\"59\":1}}],[\"way\",{\"1\":{\"28\":1,\"59\":3,\"90\":1}}],[\"wait\",{\"1\":{\"21\":1}}],[\"want\",{\"1\":{\"18\":1,\"63\":1,\"96\":1}}],[\"write\",{\"1\":{\"13\":1,\"105\":1}}],[\"withcancel\",{\"0\":{\"80\":1},\"1\":{\"80\":2}}],[\"withtimeout\",{\"0\":{\"79\":1},\"1\":{\"79\":3}}],[\"withdeadline\",{\"0\":{\"79\":1},\"1\":{\"79\":2}}],[\"withvalue\",{\"0\":{\"78\":1},\"1\":{\"77\":11,\"78\":1}}],[\"withxxx\",{\"1\":{\"77\":1}}],[\"within\",{\"1\":{\"35\":1,\"94\":1,\"103\":1}}],[\"with\",{\"1\":{\"14\":2,\"18\":1,\"19\":1,\"26\":2,\"28\":1,\"41\":2,\"61\":1,\"63\":2,\"79\":1,\"87\":1,\"97\":1}}],[\"without\",{\"1\":{\"7\":1,\"84\":1,\"103\":1}}],[\"will\",{\"0\":{\"100\":1},\"1\":{\"5\":1,\"7\":1,\"14\":1,\"18\":1,\"21\":2,\"29\":1,\"63\":1,\"66\":2,\"68\":2,\"69\":1,\"75\":2,\"89\":1,\"90\":1,\"97\":3,\"99\":1,\"102\":3,\"103\":6,\"105\":1}}],[\"wednesday\",{\"1\":{\"18\":1}}],[\"we\",{\"1\":{\"7\":2,\"42\":1,\"47\":1,\"49\":1,\"50\":1,\"63\":1,\"66\":1,\"68\":1,\"69\":1,\"75\":1,\"84\":3,\"97\":1,\"105\":1}}],[\"website\",{\"1\":{\"1\":1}}],[\"why\",{\"0\":{\"84\":1}}],[\"what\",{\"0\":{\"83\":1,\"87\":1,\"89\":1,\"90\":1,\"92\":1,\"97\":1,\"98\":1,\"99\":1,\"101\":1,\"102\":1,\"105\":1},\"1\":{\"97\":3}}],[\"white\",{\"1\":{\"90\":1}}],[\"while\",{\"1\":{\"78\":1,\"83\":1,\"99\":1}}],[\"which\",{\"0\":{\"85\":2},\"1\":{\"5\":2,\"7\":1,\"31\":1,\"34\":1,\"87\":1,\"89\":1,\"103\":1}}],[\"whether\",{\"1\":{\"49\":2,\"68\":1,\"102\":1}}],[\"where\",{\"1\":{\"33\":1,\"52\":1}}],[\"when\",{\"1\":{\"5\":1,\"59\":1,\"66\":1,\"71\":1,\"75\":1,\"84\":1,\"99\":1,\"100\":1,\"102\":1}}],[\"mike\",{\"1\":{\"59\":1}}],[\"mechanism\",{\"1\":{\"106\":1}}],[\"medium\",{\"0\":{\"104\":1}}],[\"mean\",{\"0\":{\"87\":1}}],[\"means\",{\"1\":{\"23\":1,\"67\":2}}],[\"meet\",{\"1\":{\"84\":1}}],[\"message\",{\"1\":{\"68\":1}}],[\"methods\",{\"1\":{\"74\":1,\"90\":1}}],[\"method\",{\"1\":{\"46\":1,\"54\":1,\"63\":1,\"73\":1,\"90\":4,\"105\":1}}],[\"memory\",{\"1\":{\"35\":1,\"63\":1,\"84\":9,\"85\":1,\"97\":2,\"98\":1,\"103\":1}}],[\"modulus\",{\"1\":{\"38\":1}}],[\"modification\",{\"1\":{\"103\":1}}],[\"modifications\",{\"1\":{\"103\":1}}],[\"modified\",{\"1\":{\"29\":1,\"31\":1}}],[\"modifiers\",{\"0\":{\"22\":1},\"1\":{\"3\":1}}],[\"modify\",{\"1\":{\"3\":1,\"7\":2,\"29\":1,\"35\":1,\"84\":2}}],[\"more\",{\"1\":{\"23\":1,\"97\":1,\"103\":1}}],[\"monday\",{\"1\":{\"18\":1}}],[\"m\",{\"1\":{\"7\":2,\"14\":2,\"33\":4,\"52\":5,\"90\":1,\"98\":2,\"102\":3}}],[\"made\",{\"1\":{\"103\":1}}],[\"maxuint8\",{\"1\":{\"102\":1}}],[\"maxint8\",{\"1\":{\"102\":1}}],[\"maximum\",{\"1\":{\"102\":1}}],[\"man\",{\"1\":{\"90\":4}}],[\"manipulate\",{\"1\":{\"84\":1}}],[\"manually\",{\"1\":{\"80\":2}}],[\"managed\",{\"1\":{\"73\":1}}],[\"management\",{\"1\":{\"73\":1}}],[\"may\",{\"1\":{\"74\":1}}],[\"matches\",{\"1\":{\"50\":1}}],[\"math\",{\"1\":{\"7\":4,\"90\":1,\"102\":3}}],[\"main\",{\"1\":{\"18\":2,\"20\":2,\"21\":2,\"23\":4,\"24\":2,\"29\":2,\"32\":2,\"47\":2,\"48\":2,\"49\":2,\"50\":2,\"53\":2,\"54\":2,\"55\":2,\"59\":2,\"61\":2,\"62\":2,\"63\":2,\"70\":2,\"77\":2,\"79\":2,\"80\":2,\"88\":1,\"89\":3,\"90\":2,\"97\":4,\"98\":4,\"100\":2,\"101\":2,\"102\":2}}],[\"mainly\",{\"1\":{\"1\":1,\"83\":1,\"98\":1}}],[\"maps\",{\"1\":{\"57\":1,\"85\":1,\"90\":2}}],[\"mapping\",{\"1\":{\"33\":1,\"52\":1}}],[\"map\",{\"0\":{\"14\":1,\"33\":2,\"51\":1,\"52\":1,\"53\":1,\"56\":1},\"1\":{\"14\":7,\"33\":7,\"36\":1,\"52\":9,\"53\":5,\"54\":7,\"55\":3,\"56\":1,\"57\":1,\"85\":1,\"90\":2,\"98\":3}}],[\"make\",{\"0\":{\"98\":1},\"1\":{\"12\":2,\"14\":2,\"21\":2,\"33\":2,\"52\":4,\"53\":1,\"54\":1,\"55\":1,\"59\":2,\"61\":1,\"63\":1,\"66\":3,\"97\":2,\"98\":2}}],[\"male\",{\"1\":{\"5\":1}}],[\"multiplication\",{\"1\":{\"38\":1}}],[\"multiple\",{\"0\":{\"101\":1},\"1\":{\"5\":1,\"6\":1,\"7\":1,\"10\":2,\"21\":2,\"48\":2,\"49\":1,\"50\":1,\"62\":1,\"69\":2,\"73\":2,\"74\":1,\"88\":1}}],[\"multi\",{\"1\":{\"7\":1}}],[\"must\",{\"1\":{\"5\":1,\"71\":1,\"89\":1}}],[\"every\",{\"1\":{\"97\":1}}],[\"effects\",{\"1\":{\"97\":1}}],[\"efficiency\",{\"1\":{\"84\":2}}],[\"efficient\",{\"1\":{\"84\":1}}],[\"e\",{\"1\":{\"50\":2}}],[\"err\",{\"1\":{\"74\":1}}],[\"err4\",{\"1\":{\"50\":3}}],[\"err3\",{\"1\":{\"48\":2,\"49\":4,\"50\":2}}],[\"err2\",{\"1\":{\"47\":2,\"48\":3,\"49\":4,\"50\":2}}],[\"err1\",{\"1\":{\"47\":2,\"48\":3,\"49\":6,\"50\":2}}],[\"errorf\",{\"1\":{\"47\":2,\"48\":1,\"49\":1}}],[\"errors\",{\"0\":{\"47\":1,\"48\":1,\"49\":1,\"50\":1},\"1\":{\"47\":4,\"48\":6,\"49\":8,\"50\":6}}],[\"error\",{\"0\":{\"45\":1},\"1\":{\"29\":1,\"46\":5,\"47\":5,\"48\":8,\"49\":12,\"50\":7,\"74\":1,\"89\":1}}],[\"either\",{\"1\":{\"40\":1}}],[\"equal\",{\"1\":{\"39\":4,\"88\":1}}],[\"equals\",{\"1\":{\"28\":1}}],[\"equivalent\",{\"1\":{\"9\":1,\"26\":3,\"42\":1,\"79\":1}}],[\"easy\",{\"1\":{\"84\":1}}],[\"easily\",{\"1\":{\"73\":1,\"84\":1,\"105\":2}}],[\"each\",{\"1\":{\"18\":1,\"90\":2,\"97\":1}}],[\"eat\",{\"1\":{\"9\":1}}],[\"element\",{\"1\":{\"90\":1}}],[\"elements\",{\"1\":{\"3\":1,\"85\":1,\"90\":1}}],[\"else\",{\"0\":{\"17\":1},\"1\":{\"17\":1,\"55\":2}}],[\"entire\",{\"1\":{\"84\":1}}],[\"endindex\",{\"1\":{\"60\":2}}],[\"end\",{\"1\":{\"20\":5,\"65\":2,\"71\":1}}],[\"english\",{\"1\":{\"15\":1,\"96\":1}}],[\"enumeration\",{\"1\":{\"5\":1}}],[\"empty\",{\"1\":{\"14\":1}}],[\"extra\",{\"1\":{\"103\":1}}],[\"excluding\",{\"1\":{\"60\":1}}],[\"exists\",{\"0\":{\"55\":1},\"1\":{\"55\":3}}],[\"exit\",{\"1\":{\"18\":1}}],[\"expand\",{\"1\":{\"14\":1,\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"92\":1,\"97\":1,\"98\":1,\"99\":2,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"105\":1,\"106\":1}}],[\"explanation\",{\"1\":{\"7\":1}}],[\"executing\",{\"1\":{\"18\":2,\"20\":1,\"23\":2,\"80\":1,\"100\":1}}],[\"execution\",{\"0\":{\"101\":1},\"1\":{\"3\":1,\"23\":2,\"84\":2,\"101\":1}}],[\"executed\",{\"1\":{\"21\":1}}],[\"execute\",{\"0\":{\"100\":1},\"1\":{\"7\":1,\"18\":1,\"20\":1}}],[\"example\",{\"0\":{\"70\":1},\"1\":{\"5\":1,\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"61\":1,\"62\":1,\"63\":1,\"83\":1,\"87\":1,\"88\":1,\"89\":1,\"97\":2}}],[\"familiar\",{\"1\":{\"97\":1}}],[\"fast\",{\"1\":{\"89\":2}}],[\"false\",{\"1\":{\"30\":2,\"36\":1,\"39\":9,\"40\":7,\"49\":1,\"68\":1}}],[\"fallthrough\",{\"0\":{\"18\":1},\"1\":{\"18\":7}}],[\"fixed\",{\"1\":{\"99\":1}}],[\"filled\",{\"1\":{\"90\":1}}],[\"file\",{\"1\":{\"13\":1}}],[\"fields\",{\"1\":{\"34\":1}}],[\"finish\",{\"1\":{\"70\":1}}],[\"finished\",{\"1\":{\"23\":1}}],[\"find\",{\"1\":{\"63\":1}}],[\"final\",{\"1\":{\"23\":1}}],[\"first\",{\"1\":{\"23\":1,\"47\":1,\"48\":3,\"49\":3,\"50\":2,\"53\":6,\"54\":5,\"55\":3,\"59\":1,\"97\":1,\"101\":1,\"102\":1}}],[\"fibonacci\",{\"1\":{\"21\":2}}],[\"from\",{\"1\":{\"44\":1,\"68\":1,\"83\":2,\"97\":1,\"102\":1}}],[\"front\",{\"1\":{\"35\":1}}],[\"friday\",{\"1\":{\"18\":2}}],[\"frequently\",{\"1\":{\"1\":1}}],[\"fourth\",{\"1\":{\"55\":1}}],[\"followed\",{\"1\":{\"90\":1}}],[\"follows\",{\"1\":{\"33\":1,\"52\":1,\"90\":5,\"97\":4}}],[\"following\",{\"1\":{\"18\":1,\"29\":1,\"73\":1,\"85\":2,\"87\":1,\"89\":1}}],[\"form\",{\"1\":{\"97\":1}}],[\"forming\",{\"1\":{\"75\":1}}],[\"for\",{\"0\":{\"19\":1,\"100\":2,\"105\":1},\"1\":{\"12\":3,\"17\":1,\"19\":8,\"20\":1,\"21\":3,\"23\":1,\"32\":1,\"53\":3,\"65\":2,\"75\":1,\"79\":1,\"80\":1,\"83\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":4,\"97\":1,\"98\":2,\"100\":2,\"102\":1,\"103\":2}}],[\"fmt\",{\"1\":{\"7\":1,\"17\":2,\"18\":12,\"19\":5,\"20\":3,\"21\":3,\"23\":5,\"24\":4,\"29\":2,\"32\":2,\"33\":1,\"34\":1,\"47\":5,\"48\":5,\"49\":7,\"50\":2,\"52\":1,\"53\":7,\"54\":3,\"55\":5,\"59\":2,\"60\":1,\"61\":2,\"62\":4,\"63\":3,\"69\":4,\"70\":3,\"77\":5,\"79\":3,\"80\":3,\"83\":3,\"88\":4,\"89\":2,\"95\":1,\"97\":8,\"98\":7,\"100\":2,\"101\":4,\"102\":3}}],[\"flexibility\",{\"1\":{\"84\":1}}],[\"float64\",{\"1\":{\"27\":1,\"36\":1}}],[\"float32float64\",{\"1\":{\"87\":1}}],[\"float32\",{\"1\":{\"27\":1,\"36\":1}}],[\"float\",{\"0\":{\"27\":1},\"1\":{\"28\":2,\"87\":1}}],[\"floating\",{\"0\":{\"27\":1},\"1\":{\"27\":1,\"28\":1}}],[\"flow\",{\"0\":{\"16\":1},\"1\":{\"3\":2}}],[\"flag\",{\"1\":{\"7\":2}}],[\"func\",{\"0\":{\"6\":1},\"1\":{\"6\":4,\"18\":1,\"20\":1,\"21\":3,\"23\":3,\"24\":3,\"29\":1,\"32\":1,\"36\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":2,\"53\":1,\"54\":1,\"55\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":1,\"70\":1,\"77\":1,\"79\":2,\"80\":2,\"88\":1,\"89\":4,\"90\":2,\"97\":2,\"98\":2,\"100\":1,\"101\":4,\"102\":1}}],[\"functions\",{\"1\":{\"3\":1,\"6\":1,\"7\":1,\"84\":2,\"85\":1,\"99\":1}}],[\"function\",{\"0\":{\"22\":1,\"103\":1},\"1\":{\"3\":1,\"7\":1,\"23\":2,\"35\":2,\"62\":1,\"89\":1,\"103\":1}}],[\"female\",{\"1\":{\"5\":1}}],[\"scenario\",{\"1\":{\"105\":1}}],[\"speaking\",{\"1\":{\"103\":1}}],[\"specific\",{\"1\":{\"87\":1}}],[\"specified\",{\"1\":{\"20\":1}}],[\"specify\",{\"1\":{\"5\":1}}],[\"special\",{\"1\":{\"3\":2,\"87\":1}}],[\"space\",{\"1\":{\"84\":1,\"97\":1,\"103\":1}}],[\"should\",{\"0\":{\"103\":1}}],[\"shows\",{\"1\":{\"88\":1}}],[\"shallow\",{\"0\":{\"97\":1},\"1\":{\"97\":7}}],[\"shared\",{\"1\":{\"63\":1,\"75\":1}}],[\"sharing\",{\"1\":{\"63\":1,\"65\":1}}],[\"shift\",{\"1\":{\"41\":2}}],[\"so\",{\"1\":{\"96\":1,\"97\":2,\"100\":1}}],[\"solve\",{\"1\":{\"57\":1}}],[\"some\",{\"1\":{\"3\":1,\"92\":1}}],[\"sync\",{\"1\":{\"57\":1}}],[\"symbol\",{\"0\":{\"44\":1}}],[\"symbols\",{\"0\":{\"43\":1}}],[\"system\",{\"1\":{\"26\":1}}],[\"slicing\",{\"0\":{\"60\":1}}],[\"slice2\",{\"1\":{\"97\":14}}],[\"slice1\",{\"1\":{\"97\":11}}],[\"slicemapchannelsinterfacesfunctions\",{\"1\":{\"97\":1}}],[\"slice\",{\"1\":{\"36\":1,\"60\":2,\"61\":3,\"63\":2,\"90\":1,\"97\":3,\"99\":1,\"103\":2}}],[\"slices\",{\"0\":{\"32\":2,\"58\":1,\"59\":1,\"60\":1,\"63\":1,\"99\":1},\"1\":{\"32\":1,\"59\":1,\"63\":2,\"85\":1,\"90\":3,\"97\":1,\"98\":1,\"99\":2}}],[\"sleep\",{\"1\":{\"24\":1,\"79\":2,\"80\":3}}],[\"similar\",{\"1\":{\"101\":1}}],[\"similarly\",{\"1\":{\"90\":1}}],[\"simplest\",{\"1\":{\"97\":1}}],[\"simpler\",{\"1\":{\"90\":1}}],[\"simultaneously\",{\"1\":{\"74\":1}}],[\"significance\",{\"1\":{\"84\":2}}],[\"signal\",{\"1\":{\"74\":1}}],[\"signed\",{\"1\":{\"26\":3}}],[\"situations\",{\"1\":{\"73\":1}}],[\"sides\",{\"1\":{\"40\":2}}],[\"side\",{\"1\":{\"39\":8,\"40\":1,\"67\":1}}],[\"sizeof\",{\"1\":{\"95\":2}}],[\"sizes\",{\"0\":{\"95\":1}}],[\"size\",{\"1\":{\"32\":1,\"66\":1}}],[\"since\",{\"1\":{\"49\":1,\"96\":1}}],[\"sin\",{\"1\":{\"7\":3}}],[\"single\",{\"1\":{\"7\":2,\"19\":1}}],[\"skip\",{\"1\":{\"19\":1}}],[\"save\",{\"1\":{\"84\":2}}],[\"safe\",{\"0\":{\"106\":1},\"1\":{\"57\":1,\"106\":1}}],[\"saturday\",{\"1\":{\"18\":2}}],[\"same\",{\"0\":{\"88\":1,\"100\":1},\"1\":{\"10\":2,\"21\":1,\"63\":3,\"69\":2}}],[\"storage\",{\"1\":{\"84\":1}}],[\"stored\",{\"0\":{\"94\":1}}],[\"store\",{\"1\":{\"26\":2,\"35\":1,\"83\":2,\"94\":2,\"97\":1}}],[\"stack\",{\"1\":{\"101\":1}}],[\"starting\",{\"1\":{\"26\":2}}],[\"start\",{\"1\":{\"24\":2,\"70\":1,\"102\":1}}],[\"statements\",{\"1\":{\"18\":1,\"19\":1}}],[\"str\",{\"1\":{\"29\":3}}],[\"stringarrayintstructfloatbool\",{\"1\":{\"97\":1}}],[\"strings\",{\"0\":{\"29\":1},\"1\":{\"29\":1,\"87\":1}}],[\"string\",{\"0\":{\"29\":1},\"1\":{\"9\":1,\"14\":4,\"15\":1,\"29\":3,\"33\":2,\"34\":1,\"36\":1,\"46\":1,\"50\":2,\"52\":3,\"53\":6,\"54\":6,\"55\":4,\"59\":4,\"77\":7,\"87\":3,\"89\":4,\"90\":5,\"98\":2}}],[\"structs\",{\"1\":{\"85\":1}}],[\"struct\",{\"0\":{\"15\":1,\"34\":1},\"1\":{\"9\":1,\"15\":2,\"34\":1,\"36\":1,\"50\":1,\"74\":1,\"85\":1,\"90\":2}}],[\"structures\",{\"0\":{\"34\":1},\"1\":{\"15\":1,\"34\":1,\"84\":3,\"90\":4}}],[\"structure\",{\"1\":{\"9\":1,\"46\":1,\"75\":2,\"103\":1}}],[\"switch\",{\"0\":{\"18\":1},\"1\":{\"18\":3}}],[\"seen\",{\"1\":{\"97\":1}}],[\"send\",{\"1\":{\"68\":1,\"69\":1}}],[\"sending\",{\"0\":{\"67\":1},\"1\":{\"12\":2,\"67\":1}}],[\"sent\",{\"1\":{\"66\":1}}],[\"several\",{\"1\":{\"47\":1}}],[\"series\",{\"1\":{\"31\":1,\"34\":1}}],[\"sequence\",{\"1\":{\"29\":1}}],[\"second\",{\"1\":{\"24\":1,\"47\":1,\"48\":3,\"49\":3,\"50\":2,\"53\":6,\"54\":6,\"55\":2,\"59\":1,\"70\":1,\"79\":5,\"80\":3}}],[\"select\",{\"0\":{\"21\":1,\"69\":1},\"1\":{\"21\":3,\"69\":4,\"79\":1,\"80\":1}}],[\"setting\",{\"1\":{\"73\":1}}],[\"set\",{\"1\":{\"7\":1,\"33\":1,\"52\":2,\"69\":1,\"105\":1}}],[\"s\",{\"0\":{\"98\":1,\"99\":1},\"1\":{\"7\":1,\"23\":1,\"29\":1,\"35\":1,\"47\":1,\"48\":1,\"49\":1,\"53\":4,\"74\":1,\"87\":1,\"90\":1,\"97\":1,\"98\":3}}],[\"suitable\",{\"1\":{\"103\":1}}],[\"su\",{\"1\":{\"90\":4}}],[\"subtraction\",{\"1\":{\"38\":1}}],[\"sunday\",{\"1\":{\"18\":1}}],[\"support\",{\"1\":{\"6\":1}}],[\"supports\",{\"1\":{\"6\":1,\"7\":1}}],[\"such\",{\"1\":{\"5\":1,\"42\":1,\"67\":2,\"84\":1,\"102\":1}}],[\"click\",{\"1\":{\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"92\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"105\":1,\"106\":1}}],[\"closing\",{\"0\":{\"68\":1}}],[\"closed\",{\"1\":{\"68\":1}}],[\"close\",{\"1\":{\"13\":1,\"68\":6}}],[\"cloning\",{\"0\":{\"63\":1}}],[\"ctx3val\",{\"1\":{\"77\":2}}],[\"ctx3\",{\"1\":{\"77\":3}}],[\"ctx1val\",{\"1\":{\"77\":2}}],[\"ctx1\",{\"1\":{\"77\":3,\"79\":2,\"80\":2}}],[\"ctx2val\",{\"1\":{\"77\":2}}],[\"ctx2\",{\"1\":{\"76\":1,\"77\":3}}],[\"ctx\",{\"1\":{\"76\":1,\"77\":5,\"79\":2,\"80\":2}}],[\"creation\",{\"1\":{\"99\":1}}],[\"creating\",{\"0\":{\"47\":1,\"52\":1,\"59\":1,\"66\":1,\"76\":1,\"77\":1},\"1\":{\"59\":1}}],[\"created\",{\"1\":{\"29\":1,\"31\":1,\"90\":1}}],[\"create\",{\"1\":{\"24\":1,\"47\":4,\"48\":2,\"49\":2,\"50\":2,\"59\":1,\"61\":1,\"63\":2,\"66\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"84\":1}}],[\"cumbersome\",{\"1\":{\"90\":1}}],[\"curly\",{\"1\":{\"90\":1}}],[\"current\",{\"1\":{\"19\":2,\"49\":1}}],[\"custom\",{\"1\":{\"34\":1}}],[\"called\",{\"1\":{\"74\":1}}],[\"carries\",{\"1\":{\"74\":1}}],[\"cap\",{\"1\":{\"61\":2}}],[\"capacity\",{\"0\":{\"61\":1},\"1\":{\"14\":2,\"31\":1,\"32\":1,\"52\":1,\"61\":2,\"90\":1,\"99\":2}}],[\"cause\",{\"1\":{\"29\":1,\"68\":1,\"103\":1}}],[\"cases\",{\"0\":{\"105\":1}}],[\"case\",{\"1\":{\"18\":13,\"21\":4,\"69\":3,\"79\":1,\"80\":1}}],[\"canceled\",{\"1\":{\"80\":2}}],[\"cancelation\",{\"1\":{\"74\":1}}],[\"cancel\",{\"1\":{\"73\":1,\"75\":1,\"80\":3,\"105\":1}}],[\"can\",{\"0\":{\"85\":1,\"88\":1},\"1\":{\"5\":1,\"7\":3,\"17\":1,\"18\":1,\"20\":1,\"23\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"42\":1,\"44\":1,\"47\":1,\"49\":1,\"50\":1,\"52\":1,\"53\":1,\"54\":1,\"57\":1,\"59\":1,\"60\":1,\"63\":1,\"68\":2,\"69\":2,\"73\":3,\"75\":1,\"78\":1,\"79\":1,\"80\":2,\"84\":9,\"85\":1,\"88\":2,\"90\":2,\"94\":2,\"96\":2,\"97\":1,\"103\":1,\"105\":3}}],[\"cannot\",{\"0\":{\"85\":1},\"1\":{\"3\":1,\"5\":1,\"29\":2,\"31\":1,\"85\":1,\"89\":1,\"99\":1}}],[\"chinese\",{\"1\":{\"90\":1,\"96\":1}}],[\"china\",{\"1\":{\"90\":2}}],[\"ch3\",{\"1\":{\"69\":3}}],[\"ch2\",{\"1\":{\"66\":1,\"69\":3}}],[\"ch1\",{\"1\":{\"66\":1,\"69\":3}}],[\"check\",{\"0\":{\"55\":1},\"1\":{\"39\":6,\"55\":1}}],[\"character\",{\"0\":{\"96\":1},\"1\":{\"93\":1,\"94\":3}}],[\"characters\",{\"0\":{\"94\":1},\"1\":{\"26\":2,\"29\":1,\"92\":1,\"94\":3}}],[\"changing\",{\"1\":{\"100\":1}}],[\"change\",{\"1\":{\"97\":4}}],[\"changes\",{\"1\":{\"97\":4}}],[\"changed\",{\"1\":{\"5\":1,\"63\":1,\"99\":1}}],[\"chan<\",{\"1\":{\"12\":1}}],[\"channels\",{\"1\":{\"12\":1,\"21\":1}}],[\"channel\",{\"0\":{\"64\":1,\"66\":1,\"68\":1,\"106\":1},\"1\":{\"12\":6,\"65\":1,\"66\":3,\"67\":3,\"68\":5,\"69\":4,\"70\":1,\"71\":1,\"98\":1,\"106\":2}}],[\"chan\",{\"0\":{\"12\":1},\"1\":{\"12\":5,\"21\":3,\"36\":1,\"66\":2,\"74\":1}}],[\"chaninterfacemapstruct\",{\"1\":{\"3\":1}}],[\"ch\",{\"1\":{\"12\":2,\"67\":2,\"68\":2}}],[\"c\",{\"1\":{\"5\":2,\"21\":5,\"29\":1,\"42\":1,\"70\":1}}],[\"copied\",{\"1\":{\"97\":2}}],[\"copying\",{\"1\":{\"84\":1,\"97\":5,\"103\":1}}],[\"copy\",{\"0\":{\"97\":2},\"1\":{\"63\":3,\"97\":14,\"100\":1,\"103\":3}}],[\"colours\",{\"1\":{\"90\":1}}],[\"collection\",{\"1\":{\"87\":1}}],[\"collections\",{\"1\":{\"14\":1}}],[\"coding\",{\"1\":{\"84\":1}}],[\"code\",{\"1\":{\"3\":1,\"29\":1,\"94\":2,\"102\":1}}],[\"correct\",{\"1\":{\"89\":1}}],[\"corresponding\",{\"1\":{\"18\":1,\"33\":1,\"36\":1,\"52\":1,\"103\":1}}],[\"coroutines\",{\"1\":{\"73\":1,\"105\":2}}],[\"coroutine\",{\"1\":{\"24\":1,\"73\":3,\"105\":2}}],[\"combine\",{\"1\":{\"48\":2,\"49\":1,\"50\":1}}],[\"come\",{\"1\":{\"26\":1}}],[\"comes\",{\"1\":{\"18\":1}}],[\"common\",{\"1\":{\"103\":1}}],[\"commonly\",{\"1\":{\"73\":1,\"98\":1}}],[\"commented\",{\"1\":{\"29\":1}}],[\"communication\",{\"1\":{\"21\":1,\"65\":1}}],[\"command\",{\"1\":{\"7\":1}}],[\"complete\",{\"1\":{\"69\":1}}],[\"completing\",{\"1\":{\"18\":1}}],[\"complexdata2\",{\"1\":{\"28\":1}}],[\"complexdata\",{\"1\":{\"28\":1}}],[\"complex128\",{\"1\":{\"28\":1,\"36\":1}}],[\"complex64complex128\",{\"1\":{\"87\":1}}],[\"complex64\",{\"1\":{\"28\":2,\"36\":1}}],[\"complex\",{\"0\":{\"28\":2},\"1\":{\"28\":3,\"84\":1,\"87\":1}}],[\"compiler\",{\"1\":{\"5\":1}}],[\"composed\",{\"1\":{\"29\":1,\"31\":1,\"34\":1}}],[\"composite\",{\"0\":{\"11\":1,\"90\":1},\"1\":{\"3\":1,\"90\":8}}],[\"compound\",{\"1\":{\"3\":1}}],[\"conventional\",{\"1\":{\"90\":1}}],[\"conveniently\",{\"1\":{\"73\":1}}],[\"conduit\",{\"1\":{\"65\":1}}],[\"condition\",{\"1\":{\"19\":1,\"40\":1}}],[\"conditions\",{\"1\":{\"18\":1}}],[\"conditional\",{\"1\":{\"17\":1}}],[\"concurrent\",{\"1\":{\"57\":1,\"103\":1}}],[\"concurrency\",{\"0\":{\"57\":1},\"1\":{\"103\":1}}],[\"context\",{\"0\":{\"72\":1,\"74\":1,\"105\":2},\"1\":{\"73\":3,\"74\":3,\"75\":2,\"76\":4,\"77\":12,\"78\":2,\"79\":8,\"80\":6,\"105\":2}}],[\"contains\",{\"1\":{\"49\":2}}],[\"contain\",{\"1\":{\"27\":1,\"28\":1}}],[\"continue\",{\"0\":{\"19\":1},\"1\":{\"18\":1,\"19\":4,\"20\":1}}],[\"control\",{\"0\":{\"16\":1},\"1\":{\"3\":2,\"79\":1}}],[\"configured\",{\"1\":{\"73\":1}}],[\"configure\",{\"1\":{\"14\":1}}],[\"consisting\",{\"1\":{\"14\":1}}],[\"construct\",{\"1\":{\"90\":1}}],[\"constant\",{\"1\":{\"5\":1,\"87\":3,\"89\":2}}],[\"constants\",{\"1\":{\"5\":1,\"85\":1,\"87\":1}}],[\"const\",{\"0\":{\"5\":1},\"1\":{\"5\":6}}],[\"constfuncimportpackagetypevar\",{\"1\":{\"3\":1}}],[\"talk\",{\"1\":{\"97\":2}}],[\"take\",{\"1\":{\"89\":1,\"97\":1}}],[\"tamp\",{\"1\":{\"83\":2}}],[\"target\",{\"1\":{\"49\":2,\"50\":2}}],[\"table\",{\"0\":{\"36\":1},\"1\":{\"33\":1,\"41\":1,\"52\":1}}],[\"two\",{\"1\":{\"26\":2,\"39\":2,\"63\":1,\"83\":1,\"84\":1,\"97\":2}}],[\"text\",{\"1\":{\"87\":1,\"89\":1,\"96\":1}}],[\"termination\",{\"1\":{\"73\":1}}],[\"terminated\",{\"1\":{\"73\":1,\"75\":2,\"80\":1,\"105\":1}}],[\"terminate\",{\"1\":{\"23\":1,\"68\":1,\"73\":1,\"80\":1,\"105\":2}}],[\"test\",{\"1\":{\"6\":3}}],[\"timing\",{\"1\":{\"70\":1}}],[\"timeout\",{\"1\":{\"73\":2,\"75\":1,\"79\":1,\"105\":3}}],[\"timer\",{\"1\":{\"70\":1}}],[\"time\",{\"0\":{\"100\":1},\"1\":{\"21\":1,\"24\":3,\"69\":2,\"70\":3,\"73\":1,\"74\":2,\"79\":11,\"80\":7,\"90\":1,\"97\":1}}],[\"tiger\",{\"1\":{\"9\":1}}],[\"tuesday\",{\"1\":{\"18\":1}}],[\"trees\",{\"1\":{\"84\":1}}],[\"tree\",{\"1\":{\"75\":1}}],[\"transfers\",{\"1\":{\"103\":1}}],[\"transfer\",{\"1\":{\"73\":2,\"103\":8,\"105\":2}}],[\"translation\",{\"1\":{\"15\":1,\"96\":1}}],[\"traversal\",{\"1\":{\"100\":1}}],[\"traversed\",{\"1\":{\"100\":1}}],[\"traverse\",{\"1\":{\"53\":4}}],[\"traversing\",{\"0\":{\"53\":1}}],[\"truth\",{\"1\":{\"41\":1}}],[\"true\",{\"1\":{\"5\":1,\"30\":2,\"39\":9,\"40\":8,\"49\":2}}],[\"t5\",{\"1\":{\"6\":1}}],[\"t4\",{\"1\":{\"6\":1}}],[\"t3\",{\"1\":{\"6\":1}}],[\"t2\",{\"1\":{\"6\":1}}],[\"t1\",{\"1\":{\"6\":2}}],[\"t\",{\"1\":{\"5\":2,\"6\":4,\"10\":4,\"12\":8,\"50\":3,\"66\":3,\"70\":2,\"87\":1,\"89\":2}}],[\"together\",{\"1\":{\"90\":1}}],[\"todo\",{\"1\":{\"76\":2}}],[\"to\",{\"1\":{\"3\":4,\"5\":1,\"6\":1,\"7\":4,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":2,\"15\":1,\"18\":3,\"19\":3,\"20\":4,\"21\":1,\"23\":3,\"24\":1,\"26\":4,\"28\":1,\"35\":3,\"39\":2,\"42\":3,\"44\":2,\"46\":1,\"47\":2,\"48\":2,\"49\":3,\"50\":3,\"53\":4,\"54\":1,\"56\":1,\"57\":1,\"59\":1,\"61\":2,\"62\":1,\"63\":4,\"65\":1,\"66\":1,\"67\":2,\"68\":4,\"69\":3,\"70\":1,\"71\":1,\"73\":1,\"75\":1,\"77\":1,\"78\":1,\"79\":2,\"83\":3,\"84\":3,\"85\":2,\"87\":1,\"88\":1,\"89\":5,\"90\":4,\"92\":2,\"94\":2,\"96\":1,\"97\":4,\"98\":4,\"99\":1,\"100\":1,\"101\":2,\"102\":3,\"103\":4,\"105\":2,\"106\":1}}],[\"types\",{\"0\":{\"4\":1,\"11\":1,\"93\":1},\"1\":{\"3\":2,\"9\":2,\"10\":1,\"26\":4,\"63\":1,\"92\":1,\"97\":2,\"102\":1,\"103\":1}}],[\"type\",{\"0\":{\"9\":1,\"25\":1},\"1\":{\"3\":1,\"5\":1,\"6\":1,\"9\":6,\"10\":2,\"12\":3,\"13\":1,\"15\":1,\"26\":2,\"27\":1,\"28\":1,\"29\":1,\"30\":2,\"33\":2,\"34\":1,\"36\":1,\"46\":3,\"49\":1,\"50\":2,\"52\":2,\"66\":1,\"74\":1,\"77\":7,\"87\":8,\"90\":3,\"93\":2,\"96\":2,\"97\":8,\"98\":2}}],[\"three\",{\"1\":{\"59\":1,\"88\":1}}],[\"thread\",{\"0\":{\"106\":1},\"1\":{\"57\":1,\"106\":1}}],[\"through\",{\"1\":{\"33\":1,\"70\":1,\"84\":3}}],[\"third\",{\"1\":{\"53\":6,\"54\":6,\"55\":2,\"59\":1}}],[\"this\",{\"1\":{\"1\":1,\"53\":1,\"54\":1,\"57\":1,\"84\":1,\"87\":1,\"89\":1}}],[\"than\",{\"1\":{\"39\":4}}],[\"that\",{\"1\":{\"3\":1,\"27\":1,\"32\":1,\"46\":1,\"50\":1,\"63\":2,\"67\":1,\"68\":1,\"71\":1,\"87\":1,\"88\":1,\"96\":1,\"97\":1,\"98\":1,\"103\":4,\"106\":1}}],[\"those\",{\"1\":{\"26\":1}}],[\"thursday\",{\"1\":{\"18\":2}}],[\"them\",{\"1\":{\"92\":1}}],[\"they\",{\"1\":{\"88\":1,\"90\":1}}],[\"then\",{\"1\":{\"39\":6,\"40\":4,\"68\":2}}],[\"thereby\",{\"1\":{\"84\":2}}],[\"there\",{\"1\":{\"26\":1,\"59\":1,\"71\":1,\"87\":1,\"92\":1,\"96\":1}}],[\"their\",{\"1\":{\"7\":1,\"32\":1,\"36\":1,\"85\":2}}],[\"the\",{\"0\":{\"56\":1,\"88\":1,\"89\":1,\"92\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"105\":1},\"1\":{\"3\":2,\"5\":2,\"6\":2,\"7\":3,\"8\":1,\"10\":2,\"14\":1,\"15\":1,\"18\":4,\"19\":4,\"20\":1,\"21\":1,\"23\":4,\"24\":2,\"28\":1,\"29\":2,\"30\":2,\"31\":1,\"32\":1,\"33\":10,\"35\":3,\"40\":1,\"42\":3,\"46\":2,\"49\":4,\"50\":4,\"52\":11,\"53\":1,\"54\":2,\"56\":1,\"57\":1,\"60\":5,\"61\":4,\"62\":1,\"63\":5,\"66\":4,\"67\":3,\"68\":2,\"69\":4,\"70\":2,\"73\":6,\"75\":3,\"78\":1,\"83\":3,\"84\":8,\"85\":2,\"87\":4,\"88\":3,\"89\":3,\"90\":6,\"94\":1,\"96\":4,\"97\":17,\"98\":1,\"99\":3,\"100\":3,\"101\":1,\"102\":4,\"103\":15,\"105\":3,\"106\":1}}],[\"these\",{\"1\":{\"3\":3,\"87\":1}}],[\"improving\",{\"1\":{\"84\":1}}],[\"improve\",{\"1\":{\"84\":1}}],[\"implemented\",{\"1\":{\"70\":1,\"106\":1}}],[\"implements\",{\"1\":{\"46\":1}}],[\"important\",{\"1\":{\"73\":1,\"84\":1}}],[\"imported\",{\"1\":{\"7\":2}}],[\"imports\",{\"1\":{\"7\":2}}],[\"import\",{\"0\":{\"7\":1},\"1\":{\"7\":12,\"18\":1,\"20\":1,\"21\":1,\"23\":2,\"24\":1,\"29\":1,\"32\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"53\":1,\"54\":1,\"55\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":1,\"70\":1,\"77\":1,\"79\":1,\"80\":1,\"88\":1,\"95\":1,\"97\":2,\"98\":2,\"100\":1,\"101\":1,\"102\":1}}],[\"imaginary\",{\"1\":{\"28\":3}}],[\"i++\",{\"1\":{\"19\":1,\"21\":1}}],[\"i\",{\"1\":{\"19\":15,\"20\":5,\"21\":2,\"23\":4,\"32\":4}}],[\"ifelse\",{\"1\":{\"17\":1}}],[\"if\",{\"0\":{\"17\":1,\"55\":1,\"100\":1},\"1\":{\"17\":1,\"18\":1,\"19\":2,\"20\":1,\"21\":1,\"39\":12,\"40\":4,\"55\":3,\"63\":2,\"68\":3,\"69\":1,\"89\":1,\"96\":1,\"97\":1,\"102\":1,\"103\":2}}],[\"iota\",{\"1\":{\"5\":2}}],[\"its\",{\"1\":{\"75\":1,\"97\":1}}],[\"iteration\",{\"1\":{\"19\":1}}],[\"it\",{\"1\":{\"5\":1,\"14\":1,\"18\":1,\"23\":1,\"29\":1,\"35\":1,\"49\":1,\"59\":1,\"68\":2,\"69\":1,\"80\":1,\"83\":1,\"84\":1,\"87\":1,\"89\":3,\"97\":2,\"102\":1,\"103\":3}}],[\"identifier2\",{\"1\":{\"5\":1}}],[\"identifier1\",{\"1\":{\"5\":1}}],[\"identifier\",{\"1\":{\"5\":1}}],[\"identifiers\",{\"1\":{\"3\":1,\"7\":1}}],[\"isnumber\",{\"1\":{\"30\":3}}],[\"is\",{\"0\":{\"49\":1,\"83\":1,\"89\":1,\"90\":1,\"92\":1,\"101\":1,\"102\":1,\"106\":1},\"1\":{\"5\":2,\"6\":3,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":2,\"15\":2,\"17\":1,\"18\":1,\"19\":1,\"23\":3,\"24\":1,\"29\":2,\"30\":1,\"33\":4,\"39\":4,\"40\":2,\"49\":6,\"52\":4,\"63\":1,\"65\":1,\"66\":2,\"68\":3,\"70\":1,\"73\":2,\"75\":1,\"76\":1,\"79\":1,\"84\":1,\"87\":5,\"89\":5,\"90\":3,\"93\":2,\"94\":2,\"96\":2,\"97\":6,\"98\":3,\"99\":3,\"100\":2,\"101\":1,\"102\":1,\"103\":9,\"106\":2}}],[\"input\",{\"1\":{\"103\":1}}],[\"indefinitely\",{\"0\":{\"100\":1}}],[\"independent\",{\"1\":{\"97\":1}}],[\"index\",{\"1\":{\"31\":1}}],[\"instead\",{\"1\":{\"84\":1}}],[\"involves\",{\"1\":{\"83\":1}}],[\"invalid\",{\"1\":{\"18\":1}}],[\"including\",{\"1\":{\"60\":1}}],[\"include\",{\"1\":{\"26\":2}}],[\"increase\",{\"1\":{\"44\":1}}],[\"increment\",{\"1\":{\"38\":1}}],[\"information\",{\"1\":{\"21\":1,\"73\":1}}],[\"infer\",{\"1\":{\"5\":1,\"10\":1}}],[\"init\",{\"1\":{\"7\":1}}],[\"initializing\",{\"1\":{\"98\":2}}],[\"initialize\",{\"1\":{\"10\":2,\"28\":2,\"33\":1,\"52\":2,\"53\":2,\"54\":2,\"55\":1,\"59\":2,\"90\":2}}],[\"initialization\",{\"1\":{\"7\":1,\"14\":1,\"19\":1,\"90\":2,\"97\":2}}],[\"initial\",{\"1\":{\"5\":1,\"14\":1}}],[\"in\",{\"0\":{\"92\":1,\"97\":1},\"1\":{\"3\":1,\"23\":1,\"24\":1,\"26\":3,\"35\":1,\"48\":1,\"50\":1,\"54\":1,\"57\":1,\"73\":4,\"84\":3,\"90\":2,\"92\":1,\"97\":2,\"99\":1,\"101\":1,\"103\":2}}],[\"int64\",{\"1\":{\"36\":1}}],[\"int64uint64\",{\"1\":{\"26\":1}}],[\"int16\",{\"1\":{\"36\":1}}],[\"int16uint16\",{\"1\":{\"26\":1}}],[\"int8\",{\"1\":{\"36\":1,\"102\":1}}],[\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",{\"1\":{\"87\":1}}],[\"int8uint8\",{\"1\":{\"26\":1}}],[\"intuint\",{\"1\":{\"26\":1}}],[\"integer\",{\"1\":{\"26\":1,\"87\":1}}],[\"integers\",{\"0\":{\"26\":1},\"1\":{\"26\":7}}],[\"internally\",{\"1\":{\"106\":1}}],[\"internal\",{\"1\":{\"36\":1,\"85\":1}}],[\"interrupt\",{\"1\":{\"19\":1}}],[\"interfaces\",{\"1\":{\"13\":1}}],[\"interface\",{\"0\":{\"13\":1,\"46\":1,\"74\":1},\"1\":{\"9\":2,\"13\":2,\"36\":1,\"46\":2,\"73\":1,\"74\":3}}],[\"interview\",{\"1\":{\"1\":1}}],[\"int\",{\"0\":{\"26\":1},\"1\":{\"18\":1,\"19\":1,\"21\":3,\"26\":1,\"31\":1,\"32\":1,\"33\":2,\"35\":1,\"36\":1,\"52\":3,\"60\":1,\"61\":1,\"62\":1,\"63\":2,\"90\":3,\"97\":4,\"98\":2,\"100\":1,\"102\":1}}],[\"into\",{\"1\":{\"15\":1,\"48\":1,\"105\":1}}],[\"int32uint32\",{\"1\":{\"26\":1}}],[\"int32\",{\"1\":{\"9\":2,\"26\":1,\"36\":1,\"93\":1}}],[\"introduction\",{\"0\":{\"65\":1,\"73\":1},\"1\":{\"3\":1,\"105\":1}}],[\"introduced\",{\"1\":{\"48\":1}}],[\"introduce\",{\"0\":{\"1\":1}}],[\"braces\",{\"1\":{\"90\":1}}],[\"break\",{\"0\":{\"19\":1},\"1\":{\"18\":1,\"19\":3}}],[\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",{\"1\":{\"3\":1}}],[\"but\",{\"1\":{\"89\":1,\"92\":1}}],[\"buffer\",{\"1\":{\"13\":2,\"66\":1}}],[\"buffered\",{\"1\":{\"12\":1,\"66\":2}}],[\"binary\",{\"1\":{\"88\":1}}],[\"bitwise\",{\"0\":{\"41\":1},\"1\":{\"41\":3}}],[\"bit\",{\"1\":{\"28\":2}}],[\"bits\",{\"1\":{\"26\":1,\"27\":1,\"28\":1,\"41\":2}}],[\"black\",{\"1\":{\"90\":2}}],[\"blank\",{\"1\":{\"76\":2}}],[\"blocked\",{\"1\":{\"66\":2}}],[\"block\",{\"1\":{\"21\":1}}],[\"boundaries\",{\"1\":{\"74\":1}}],[\"both\",{\"1\":{\"40\":2,\"92\":1}}],[\"boolean\",{\"1\":{\"30\":1,\"87\":1}}],[\"booleans\",{\"0\":{\"30\":1}}],[\"bool\",{\"0\":{\"30\":1},\"1\":{\"13\":2,\"30\":2,\"36\":1,\"74\":1,\"87\":1}}],[\"batches\",{\"1\":{\"73\":1}}],[\"background\",{\"1\":{\"24\":1,\"76\":1,\"77\":5,\"79\":1,\"80\":1}}],[\"baseval\",{\"1\":{\"77\":5}}],[\"base\",{\"1\":{\"77\":1}}],[\"based\",{\"1\":{\"10\":1,\"18\":1,\"26\":1,\"32\":1,\"99\":1}}],[\"basic\",{\"0\":{\"81\":1},\"1\":{\"1\":1,\"87\":3}}],[\"bytes\",{\"0\":{\"95\":1},\"1\":{\"95\":3}}],[\"byte\",{\"0\":{\"92\":1,\"95\":3},\"1\":{\"26\":1,\"36\":1,\"92\":1,\"93\":2,\"94\":2,\"95\":2,\"96\":1}}],[\"by\",{\"1\":{\"18\":1,\"31\":1,\"41\":2,\"52\":1,\"73\":2,\"74\":1,\"75\":1,\"84\":1,\"88\":2,\"89\":1,\"90\":2,\"99\":2,\"105\":2}}],[\"b\",{\"1\":{\"5\":2,\"13\":2,\"38\":6,\"39\":7,\"40\":3,\"41\":4,\"42\":11,\"94\":1,\"95\":3,\"97\":2}}],[\"become\",{\"1\":{\"102\":1}}],[\"below\",{\"1\":{\"87\":1}}],[\"belongs\",{\"1\":{\"46\":1}}],[\"between\",{\"0\":{\"89\":1,\"92\":1,\"98\":1,\"99\":1},\"1\":{\"65\":1,\"84\":2,\"92\":1,\"105\":1}}],[\"been\",{\"1\":{\"63\":1,\"68\":1}}],[\"beginindex\",{\"1\":{\"60\":2}}],[\"being\",{\"1\":{\"28\":1}}],[\"before\",{\"1\":{\"23\":3}}],[\"be\",{\"0\":{\"85\":1},\"1\":{\"3\":1,\"5\":2,\"7\":1,\"17\":1,\"21\":1,\"29\":1,\"31\":2,\"34\":1,\"44\":1,\"66\":2,\"71\":2,\"73\":3,\"74\":1,\"75\":2,\"78\":1,\"79\":1,\"85\":2,\"88\":2,\"90\":3,\"97\":2,\"99\":1,\"103\":2,\"105\":1}}],[\"kind\",{\"1\":{\"87\":2,\"89\":1}}],[\"know\",{\"1\":{\"63\":1}}],[\"knowledge\",{\"1\":{\"1\":1}}],[\"keys\",{\"1\":{\"53\":1}}],[\"keytype\",{\"1\":{\"33\":2,\"52\":2}}],[\"key\",{\"0\":{\"54\":1,\"55\":1},\"1\":{\"14\":1,\"33\":3,\"52\":3,\"53\":18,\"54\":2,\"55\":3,\"74\":1,\"78\":1,\"90\":1}}],[\"keywords\",{\"0\":{\"2\":1,\"3\":1},\"1\":{\"3\":5}}],[\"affect\",{\"1\":{\"97\":1,\"103\":2}}],[\"after\",{\"1\":{\"18\":2,\"23\":1,\"102\":2,\"105\":1}}],[\"about\",{\"1\":{\"83\":1,\"97\":2}}],[\"api\",{\"1\":{\"74\":1}}],[\"appending\",{\"0\":{\"62\":1}}],[\"append\",{\"1\":{\"32\":1,\"62\":6,\"63\":1,\"100\":1}}],[\"among\",{\"1\":{\"73\":1}}],[\"avoiding\",{\"1\":{\"84\":1}}],[\"avoid\",{\"1\":{\"71\":1,\"102\":1,\"103\":1}}],[\"aware\",{\"1\":{\"71\":1}}],[\"a++\",{\"1\":{\"38\":1}}],[\"advantage\",{\"1\":{\"103\":2}}],[\"adds\",{\"0\":{\"100\":1}}],[\"added\",{\"1\":{\"99\":1}}],[\"add\",{\"1\":{\"53\":1,\"63\":1,\"78\":1,\"79\":1,\"102\":1}}],[\"addition\",{\"1\":{\"38\":1}}],[\"addressable\",{\"1\":{\"89\":2}}],[\"addresses\",{\"1\":{\"85\":1}}],[\"addressed\",{\"0\":{\"85\":1},\"1\":{\"85\":2}}],[\"address\",{\"1\":{\"35\":2,\"43\":1,\"63\":1,\"83\":4,\"89\":2,\"97\":3,\"103\":1}}],[\"adjust\",{\"1\":{\"32\":1}}],[\"achieving\",{\"1\":{\"84\":1}}],[\"access\",{\"1\":{\"84\":2}}],[\"accessed\",{\"1\":{\"31\":1,\"34\":1}}],[\"across\",{\"1\":{\"74\":1}}],[\"actual\",{\"1\":{\"100\":1}}],[\"actually\",{\"1\":{\"63\":1,\"103\":1}}],[\"action\",{\"1\":{\"18\":2,\"69\":1}}],[\"actions\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"23\":1,\"24\":1}}],[\"arr\",{\"1\":{\"60\":1}}],[\"arrays\",{\"0\":{\"31\":1,\"99\":1},\"1\":{\"31\":1,\"32\":1,\"85\":1,\"90\":3,\"99\":1}}],[\"array\",{\"0\":{\"31\":1},\"1\":{\"19\":4,\"31\":1,\"48\":1,\"85\":1,\"97\":2,\"99\":1,\"103\":1}}],[\"arithmetic\",{\"0\":{\"38\":1}}],[\"architecture\",{\"1\":{\"26\":1}}],[\"are\",{\"0\":{\"97\":1,\"105\":1},\"1\":{\"3\":3,\"26\":3,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"34\":1,\"36\":1,\"39\":2,\"40\":2,\"57\":1,\"59\":1,\"63\":1,\"87\":2,\"88\":1,\"90\":2,\"92\":2,\"96\":1,\"97\":4,\"99\":1}}],[\"attributes\",{\"1\":{\"36\":1}}],[\"at\",{\"0\":{\"100\":1},\"1\":{\"14\":1,\"21\":1,\"69\":2,\"84\":1,\"99\":1}}],[\"automatically\",{\"1\":{\"14\":1,\"18\":1,\"32\":1,\"90\":1,\"99\":1,\"105\":1}}],[\"already\",{\"1\":{\"68\":2}}],[\"alternatively\",{\"1\":{\"53\":1,\"54\":1}}],[\"although\",{\"1\":{\"14\":1}}],[\"allocation\",{\"1\":{\"84\":1}}],[\"allocated\",{\"1\":{\"97\":1}}],[\"allocate\",{\"1\":{\"84\":3,\"98\":1}}],[\"allow\",{\"1\":{\"35\":1}}],[\"allows\",{\"1\":{\"7\":1,\"21\":1}}],[\"all\",{\"1\":{\"26\":1,\"36\":1,\"75\":2,\"78\":1}}],[\"alias\",{\"1\":{\"9\":1,\"93\":2}}],[\"aliases\",{\"1\":{\"7\":2}}],[\"also\",{\"1\":{\"7\":2,\"26\":1,\"69\":1,\"75\":1,\"76\":1,\"97\":2}}],[\"a\",{\"0\":{\"52\":1,\"53\":1,\"55\":1,\"56\":1,\"66\":1,\"68\":1,\"83\":2,\"89\":2,\"90\":1},\"1\":{\"5\":3,\"9\":2,\"17\":1,\"18\":3,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"27\":1,\"28\":2,\"29\":2,\"31\":1,\"33\":4,\"34\":3,\"35\":4,\"38\":7,\"39\":7,\"40\":4,\"41\":6,\"42\":31,\"52\":2,\"53\":1,\"54\":3,\"55\":1,\"56\":1,\"61\":3,\"63\":2,\"65\":2,\"66\":2,\"68\":7,\"69\":1,\"71\":1,\"73\":2,\"74\":3,\"75\":1,\"76\":2,\"79\":1,\"80\":1,\"83\":1,\"84\":1,\"87\":4,\"88\":1,\"89\":7,\"90\":6,\"94\":1,\"95\":4,\"97\":5,\"98\":1,\"99\":2,\"100\":1,\"101\":1,\"103\":3,\"105\":1,\"106\":1}}],[\"any\",{\"1\":{\"46\":1,\"94\":1,\"98\":1}}],[\"another\",{\"1\":{\"28\":1,\"63\":1}}],[\"animal\",{\"1\":{\"9\":1,\"34\":2}}],[\"an\",{\"1\":{\"5\":1,\"9\":2,\"14\":2,\"29\":1,\"31\":1,\"46\":1,\"47\":1,\"66\":1,\"83\":2,\"84\":1,\"87\":1,\"89\":2,\"90\":1,\"93\":2,\"97\":1,\"99\":1,\"103\":1}}],[\"and\",{\"0\":{\"61\":1,\"67\":1,\"75\":1,\"83\":1,\"85\":1,\"89\":1,\"92\":1,\"97\":1,\"98\":1,\"99\":1},\"1\":{\"1\":1,\"5\":2,\"6\":1,\"7\":2,\"10\":2,\"12\":1,\"17\":1,\"18\":1,\"19\":3,\"23\":1,\"24\":1,\"26\":3,\"28\":1,\"29\":1,\"30\":1,\"33\":1,\"35\":1,\"41\":1,\"52\":2,\"53\":2,\"60\":1,\"61\":2,\"69\":1,\"73\":1,\"74\":1,\"75\":2,\"78\":1,\"79\":1,\"83\":2,\"84\":8,\"85\":1,\"87\":1,\"89\":1,\"90\":11,\"92\":1,\"97\":6,\"98\":2,\"99\":2,\"103\":3,\"105\":1}}],[\"associated\",{\"1\":{\"87\":1}}],[\"assign\",{\"1\":{\"42\":1,\"50\":1,\"63\":1,\"90\":2}}],[\"assignment\",{\"0\":{\"42\":1}}],[\"assuming\",{\"1\":{\"41\":1}}],[\"ascii\",{\"1\":{\"26\":1,\"94\":2}}],[\"as\",{\"0\":{\"50\":1},\"1\":{\"3\":1,\"5\":1,\"33\":1,\"35\":1,\"42\":1,\"50\":2,\"52\":1,\"67\":2,\"84\":2,\"90\":5,\"97\":6,\"102\":1}}],[\"asked\",{\"1\":{\"1\":1}}],[\"generally\",{\"1\":{\"103\":1}}],[\"get\",{\"0\":{\"56\":1},\"1\":{\"23\":1,\"33\":1,\"35\":1,\"52\":1,\"56\":1,\"61\":2,\"68\":1,\"83\":2}}],[\"graphs\",{\"1\":{\"84\":1}}],[\"greater\",{\"1\":{\"39\":2}}],[\"go\",{\"0\":{\"24\":1,\"92\":1},\"1\":{\"21\":1,\"24\":3,\"48\":1,\"79\":1,\"80\":1,\"89\":1,\"92\":1}}],[\"goroutines\",{\"1\":{\"65\":1,\"73\":1,\"74\":1}}],[\"goroutine\",{\"1\":{\"21\":1,\"24\":3,\"73\":1}}],[\"goto\",{\"0\":{\"20\":1},\"1\":{\"20\":2}}],[\"golang\",{\"0\":{\"97\":1},\"1\":{\"1\":1,\"3\":1,\"26\":2,\"46\":1,\"47\":1,\"73\":1}}],[\"guide\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2},\"/\":{\"documentCount\":118,\"nextId\":118,\"documentIds\":{\"0\":\"v-fffb8e28\",\"1\":\"v-fffb8e28#介绍\",\"2\":\"v-c2a0ca9c\",\"3\":\"v-c2a0ca9c#保留关键字\",\"4\":\"v-c2a0ca9c#声明类型关键字\",\"5\":\"v-c2a0ca9c#const\",\"6\":\"v-c2a0ca9c#func\",\"7\":\"v-c2a0ca9c#import\",\"8\":\"v-c2a0ca9c#package\",\"9\":\"v-c2a0ca9c#type\",\"10\":\"v-c2a0ca9c#var\",\"11\":\"v-c2a0ca9c#复合类型\",\"12\":\"v-c2a0ca9c#chan\",\"13\":\"v-c2a0ca9c#interface\",\"14\":\"v-c2a0ca9c#map\",\"15\":\"v-c2a0ca9c#struct\",\"16\":\"v-c2a0ca9c#流程控制\",\"17\":\"v-c2a0ca9c#if-else\",\"18\":\"v-c2a0ca9c#switch-fallthrough\",\"19\":\"v-c2a0ca9c#for-break-continue-range\",\"20\":\"v-c2a0ca9c#goto\",\"21\":\"v-c2a0ca9c#select\",\"22\":\"v-c2a0ca9c#功能修饰\",\"23\":\"v-c2a0ca9c#defer\",\"24\":\"v-c2a0ca9c#go\",\"25\":\"v-e665420e\",\"26\":\"v-e665420e#整数-int\",\"27\":\"v-e665420e#浮点数-float\",\"28\":\"v-e665420e#复数-complex\",\"29\":\"v-e665420e#字符串-string\",\"30\":\"v-e665420e#布尔类型-bool\",\"31\":\"v-e665420e#数组-array\",\"32\":\"v-e665420e#切片-slices\",\"33\":\"v-e665420e#map-map\",\"34\":\"v-e665420e#结构体-struct\",\"35\":\"v-e665420e#指针-pointer\",\"36\":\"v-e665420e#零值表\",\"37\":\"v-1c091b0c\",\"38\":\"v-1c091b0c#算术运算符\",\"39\":\"v-1c091b0c#关系运算符\",\"40\":\"v-1c091b0c#逻辑运算符\",\"41\":\"v-1c091b0c#位运算符\",\"42\":\"v-1c091b0c#赋值运算符\",\"43\":\"v-1c091b0c#其他符号\",\"44\":\"v-1c091b0c#符号优先级\",\"45\":\"v-50e9f7c6\",\"46\":\"v-50e9f7c6#接口\",\"47\":\"v-50e9f7c6#创建错误\",\"48\":\"v-50e9f7c6#errors-join\",\"49\":\"v-50e9f7c6#errors-is\",\"50\":\"v-50e9f7c6#errors-as\",\"51\":\"v-dd8e4754\",\"52\":\"v-dd8e4754#创建-map\",\"53\":\"v-dd8e4754#遍历-map\",\"54\":\"v-dd8e4754#删除键值\",\"55\":\"v-dd8e4754#判断-key-是否存在\",\"56\":\"v-dd8e4754#获取-map-长度\",\"57\":\"v-dd8e4754#并发\",\"58\":\"v-5a5528ff\",\"59\":\"v-5a5528ff#创建切片\",\"60\":\"v-5a5528ff#切片截取\",\"61\":\"v-5a5528ff#长度及容量\",\"62\":\"v-5a5528ff#追加数据\",\"63\":\"v-5a5528ff#克隆切片\",\"64\":\"v-1e461866\",\"65\":\"v-1e461866#介绍\",\"66\":\"v-1e461866#创建-channel\",\"67\":\"v-1e461866#发送接收数据\",\"68\":\"v-1e461866#关闭-channel\",\"69\":\"v-1e461866#select\",\"70\":\"v-1e461866#例子\",\"71\":\"v-1e461866#注意事项\",\"72\":\"v-1a239040\",\"73\":\"v-1a239040#介绍\",\"74\":\"v-1a239040#context-接口\",\"75\":\"v-1a239040#根节点和派生节点\",\"76\":\"v-1a239040#创建根节点\",\"77\":\"v-1a239040#创建派生节点\",\"78\":\"v-1a239040#withvalue\",\"79\":\"v-1a239040#withdeadline-withtimeout\",\"80\":\"v-1a239040#withcancel\",\"81\":\"v-4ba30527\",\"82\":\"v-4ba30527#指针\",\"83\":\"v-4ba30527#什么是指针和指针变量\",\"84\":\"v-4ba30527#为什么使用指针\",\"85\":\"v-4ba30527#哪些对象可以获取地址-哪些不行\",\"86\":\"v-4ba30527#字面量\",\"87\":\"v-4ba30527#字面量是什么意思\",\"88\":\"v-4ba30527#什么是有类型常量和无类型常量\",\"89\":\"v-4ba30527#不同字面量可能同值吗\",\"90\":\"v-4ba30527#字面量和变量的区别是什么\",\"91\":\"v-4ba30527#什么是组合字面量\",\"92\":\"v-4ba30527#其他\",\"93\":\"v-4ba30527#go-中的-rune-和-byte-有什么区别\",\"94\":\"v-4ba30527#类型不同\",\"95\":\"v-4ba30527#存储的字符不同\",\"96\":\"v-4ba30527#占用的字节大小不同-byte-占用1个字节-rune-占用4个字节。\",\"97\":\"v-4ba30527#表示的字符范围不同\",\"98\":\"v-4ba30527#golang中的深拷贝和浅拷贝是什么\",\"99\":\"v-4ba30527#make-和-new-有什么区别\",\"100\":\"v-4ba30527#数组和切片有什么区别\",\"101\":\"v-4ba30527#如果-for-range-同时添加数据-for-range-会无限执行吗\",\"102\":\"v-4ba30527#多个-defer-的执行顺序是什么\",\"103\":\"v-4ba30527#什么是数据溢出\",\"104\":\"v-4ba30527#函数参数使用值还是指针\",\"105\":\"v-829b366e\",\"106\":\"v-829b366e#使用过-context-吗-context-有哪些使用场景\",\"107\":\"v-829b366e#channel-是线程安全的吗\",\"108\":\"v-5749b3fe\",\"109\":\"v-716b9f18\",\"110\":\"v-011899d6\",\"111\":\"v-51523ef8\",\"112\":\"v-a4e5eec0\",\"113\":\"v-79cbaa1f\",\"114\":\"v-5de33e8c\",\"115\":\"v-7ac35d0c\",\"116\":\"v-9c7680ea\",\"117\":\"v-288b4cce\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,4],\"2\":[1],\"3\":[1,25],\"4\":[1],\"5\":[1,31],\"6\":[1,19],\"7\":[1,27],\"8\":[1,2],\"9\":[1,19],\"10\":[1,19],\"11\":[1],\"12\":[1,18],\"13\":[1,12],\"14\":[1,18],\"15\":[1,8],\"16\":[1],\"17\":[2,14],\"18\":[2,49],\"19\":[4,37],\"20\":[1,28],\"21\":[1,36],\"22\":[1],\"23\":[1,33],\"24\":[1,21],\"25\":[1],\"26\":[3,46],\"27\":[3,7],\"28\":[3,24],\"29\":[3,23],\"30\":[3,11],\"31\":[3,13],\"32\":[3,31],\"33\":[3,28],\"34\":[3,15],\"35\":[3,14],\"36\":[1,33],\"37\":[1],\"38\":[1,25],\"39\":[1,26],\"40\":[1,15],\"41\":[1,35],\"42\":[1,21],\"43\":[1,4],\"44\":[1,21],\"45\":[1],\"46\":[1,11],\"47\":[1,25],\"48\":[2,33],\"49\":[2,34],\"50\":[2,39],\"51\":[3],\"52\":[2,30],\"53\":[2,35],\"54\":[1,26],\"55\":[3,30],\"56\":[3,7],\"57\":[1,6],\"58\":[1],\"59\":[1,25],\"60\":[1,20],\"61\":[1,24],\"62\":[1,26],\"63\":[1,36],\"64\":[1],\"65\":[1,7],\"66\":[2,16],\"67\":[1,10],\"68\":[2,28],\"69\":[1,25],\"70\":[1,20],\"71\":[1,4],\"72\":[1],\"73\":[1,21],\"74\":[2,38],\"75\":[1,10],\"76\":[1,9],\"77\":[1,27],\"78\":[2,5],\"79\":[3,38],\"80\":[2,35],\"81\":[1],\"82\":[1],\"83\":[2,21],\"84\":[2,29],\"85\":[3,17],\"86\":[1],\"87\":[2,32],\"88\":[2,39],\"89\":[2,21],\"90\":[2,34],\"91\":[2,49],\"92\":[1],\"93\":[7,10],\"94\":[2,8],\"95\":[2,19],\"96\":[6,21],\"97\":[2,10],\"98\":[2,59],\"99\":[5,28],\"100\":[2,12],\"101\":[6,23],\"102\":[4,15],\"103\":[2,33],\"104\":[2,19],\"105\":[1],\"106\":[5,15],\"107\":[3,6],\"108\":[1],\"109\":[1],\"110\":[1],\"111\":[1],\"112\":[1],\"113\":[1],\"114\":[1],\"115\":[1],\"116\":[1],\"117\":[1]},\"averageFieldLength\":[1.7457627118644068,21.661396661113926],\"storedFields\":{\"0\":{\"h\":\"指南\"},\"1\":{\"h\":\"介绍\",\"t\":[\"本栏目主要提供 Golang 面试常见问题。\"]},\"2\":{\"h\":\"保留关键字\"},\"3\":{\"h\":\"保留关键字\",\"t\":[\"golang 有 25 个保留的关键字，这些关键字不能用作程序标识符。\",\"类型\",\"关键字\",\"介绍\",\"声明\",\"constfuncimportpackagetypevar\",\"这些关键字用于声明代码中的各种元素\",\"复合类型\",\"chaninterfacemapstruct\",\"这些关键字用于声明一些特殊的复合类型\",\"流程控制\",\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",\"这些关键字用于控制程序运行流程\",\"功能修饰\",\"defergo\",\"用于修饰特殊的 function\",\"注意\",\"注意： 下面的例子中的 T 表示任意类型\"]},\"4\":{\"h\":\"声明类型关键字\"},\"5\":{\"h\":\"const\",\"t\":[\"const 用于声明常量，常量一经声明就不能被更改，声明常量必须指定初始值。\",\"例子\",\"const identifier T = value // T 为数据类型，可以省略，编译器会自己推断。 const identifier1, identifier2 = value1, value2 // 声明多个，如 const a, b, c = \\\"hello\\\", 100, true const ( FeMale = 0 Male = 1 ) // 枚举 const ( a = iota b c ) // iota \"]},\"6\":{\"h\":\"func\",\"t\":[\"func 用于声明函数，支持多个返回值，不支持默认参数。\",\"例子\",\"// p 为参数， T 为类型 func Test(p T) {} func Test(p T) (T1, T2) {} func Test (p T, p1, T1, list ...T3) (T4, T5) {} // 不定参数 \"]},\"7\":{\"h\":\"import\",\"t\":[\"import 用于导入包，使用其公开的标识符。\",\"import 支持单行和多行导入。\",\"例子\",\"import \\\"flag\\\" // 单个导入 import ( \\\"flag\\\" \\\"fmt\\\" ) // 多个导入 \",\"我们还可以使用 ., _ 和别名修饰导入的包。\",\"导入命令\",\"使用方法\",\"解析\",\"import \\\"lib/math\\\"\",\"math.Sin\",\"普通导入需要使用包名\",\"import m \\\"lib/math\\\"\",\"m.Sin\",\"可以在导入时设置别名\",\"import . \\\"lib/math\\\" \",\"Sin\",\"使用 . 导入本地可以直接使用函数，不需要包名\",\"我们还可以使用 _ 来修饰导入的包，这样只会执行导入包的初始化函数 init()\"]},\"8\":{\"h\":\"package\",\"t\":[\"package 用于定义包名\"]},\"9\":{\"h\":\"type\",\"t\":[\"type 用于定义变量类型\",\"例子\",\"// 定义接口 type Animal interface { eat() } // 定义结构 type Tiger struct { Name string } // 定义等价类型 type Num int32 // 定义一个新的类型 type Num = int32 // 仅定义别名 \"]},\"10\":{\"h\":\"var\",\"t\":[\"var 用于声明公开或者私有变量\",\"例子\",\"var Name T // 公开变量 var name T // 私有变量 var name1, name2 T // 声明多个相同类型的变量 var name1, name2 T = val1, val2 // 声明多个相同类型的变量, 并初始化 var name1, name2 = val1, val2 // 根据 val1, val2 自动推断类型并初始化 // 使用括号 var ( name1 = val1 name2 = val2 ) \"]},\"11\":{\"h\":\"复合类型\"},\"12\":{\"h\":\"chan\",\"t\":[\"chan (Channel) 用于声明信道。\",\"例子\",\"// 用于发送和接收 T 类型的数据的信道 chan T // 用于发送 T 类型的数据的信道 <-chan T // 用于接收 T 类型的数据的信道 chan<- T \",\"ch := make(chan T) // 无缓冲信道 ch := make(chan T, 20) // 带缓冲信道 \"]},\"13\":{\"h\":\"interface\",\"t\":[\"interface 用于声明接口\",\"例子\",\"type File interface { Read(b Buffer) bool Write(b Buffer) bool Close() } \"]},\"14\":{\"h\":\"map\",\"t\":[\"map 用于声明集合，由无序的键值对组成，底层为 hash map. 虽然 map 会自动扩容，但是建议在初始化的时候就配置容量。\",\"例子\",\"m := make(map[string]string) // 空的 map m := make(map[string]string, 10) // 初始容量为 10 的 map \"]},\"15\":{\"h\":\"struct\",\"t\":[\"struct 用于声明结构体\",\"例子\",\"type Person struct { Name string } \"]},\"16\":{\"h\":\"流程控制\"},\"17\":{\"h\":\"if else\",\"t\":[\"ifelse 用于条件判断，可嵌套使用\",\"例子\",\"if a > 0 { fmt.Println(\\\"hello\\\") } else { fmt.Println(\\\"world\\\") } \"]},\"18\":{\"h\":\"switch fallthrough\",\"t\":[\"switch 用于根据不同条件执行不同的动作，默认每个 case 都带有 break, 执行完一个 case 会自动跳出，若希望继续执行下面的语句，需搭配 fallthrough\",\"例子\",\"a := \\\"2\\\" switch a { case \\\"1\\\": fmt.Println(\\\"hello\\\") case \\\"2\\\": fmt.Println(\\\"world\\\") default: // 默认操作 fmt.Println(\\\"default\\\") } // 结果： world \",\"使用 fallthrough 可以在执行完对应 case 后直接执行下一个 case 的动作\",\"package main import \\\"fmt\\\" func main() { var dayOfWeek int = 4 switch dayOfWeek { case 1: fmt.Println(\\\"Monday\\\") fallthrough case 2: fmt.Println(\\\"Tuesday\\\") fallthrough case 3: fmt.Println(\\\"Wednesday\\\") fallthrough case 4: fmt.Println(\\\"Thursday\\\") fallthrough case 5: fmt.Println(\\\"Friday\\\") fallthrough case 6: fmt.Println(\\\"Saturday\\\") case 7: fmt.Println(\\\"Sunday\\\") default: fmt.Println(\\\"Invalid Day\\\") } } // 结果： // Thursday // Friday // Saturday \"]},\"19\":{\"h\":\"for break continue range\",\"t\":[\"for 用于循环执行动作，使用 break 中断当前 for 循环， continue 用于跳过当前循环的剩余语句，继续执行下一轮循环\",\"例子\",\"// 单个条件 for i <= 10 { fmt.Println(i) i = i + 1 } // 初始化并判断 for i:=0; i < 3; i++ { fmt.Println(i) } // for range 遍历 array :=[]int{1, 2, 3, 4, 5} for i, v :=range array{ fmt.Println(i,v) } // break for i, v :=range array{ if i >= 2 { break } fmt.Println(i,v) } // continue for i, v :=range array{ if i == 2 { continue } fmt.Println(i,v) } \"]},\"20\":{\"h\":\"goto\",\"t\":[\"goto 可以跳到指定位置继续执行动作\",\"例子\",\"package main import \\\"fmt\\\" func main() { for i := 0; i < 10; i ++ { if i == 5 { goto end // 跳到 end 位置执行 } fmt.Println(i) } end: fmt.Println(\\\"end\\\") } // 结果： // 0 // 1 // 2 // 3 // 4 // end \"]},\"21\":{\"h\":\"select\",\"t\":[\"select 让 goroutine 等待多个通信操作，select 会阻塞直到一个 case 接收到信息，如果同时多个通道收到数据，则会随机执行一个 case\",\"例子\",\"package main import \\\"fmt\\\" func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c <- x: x, y = y, x+y case <-quit: fmt.Println(\\\"quit\\\") return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i < 10; i++ { fmt.Println(<-c) } quit <- 0 }() fibonacci(c, quit) } \"]},\"22\":{\"h\":\"功能修饰\"},\"23\":{\"h\":\"defer\",\"t\":[\"return 用于终止函数的执行并返回0个或多个返回值， defer 用于函数 return 之前或执行完之后执行动作\",\"例子\",\"package main import \\\"fmt\\\" func main() { defer fmt.Println(\\\"world\\\") fmt.Println(\\\"hello\\\") } // 结果 // hello // world \",\"注意：\",\"defer 的执行顺序是后进先出\",\"defer 在 return 之前执行意味着可以使用 defer 获取 return 之前变量的最终结果\",\"package main import \\\"fmt\\\" func main() { num := 1 defer func() { fmt.Println(num) }() for i := 0; i < 4; i ++ { num += i } } // 结果： // 7 \"]},\"24\":{\"h\":\"go\",\"t\":[\"go 用于创建协程（goroutine）, 在程序后台执行动作\",\"例子\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { go func(){ fmt.Println(\\\"no.1\\\") }() go func(){ fmt.Println(\\\"no.2\\\") }() fmt.Println(\\\"start goroutine\\\") time.Sleep(5*time.Second) } // 结果： // start goroutine // no.1 // no.2 \"]},\"25\":{\"h\":\"数据类型\"},\"26\":{\"h\":\"整数 (int)\",\"t\":[\"整数有两种类型：\",\"类型\",\"范围\",\"介绍\",\"有符号数 (signed integers)\",\"-∞ ~ +∞\",\"有符号数包含正数和负数\",\"无符号数 (unsigned integers)\",\"0 ~ +∞\",\"无符号数包含 0 和所有正数\",\"golang 中 int 开头为有符号数， uint 开头为无符号数\",\"Golang 中的整数类型：\",\"位\",\"类型\",\"8\",\"int8uint8\",\"16\",\"int16uint16\",\"32\",\"int32uint32\",\"64\",\"int64uint64\",\"32 或 64 (基于系统架构)\",\"intuint\",\"同时还有两个等价类型\",\"rune : 等价于 int32 , 用于存储 Unicode 字符\",\"byte ：等价于 uint8 , 用于存储 ASCII 字符\"]},\"27\":{\"h\":\"浮点数 (float)\",\"t\":[\"浮点数就是包含小数点的数字\",\"位\",\"类型\",\"32\",\"float32\",\"64\",\"float64\"]},\"28\":{\"h\":\"复数 (complex)\",\"t\":[\"复数包含虚数和实数，实数为浮点数\",\"位\",\"类型\",\"32 位浮点数 + 虚数\",\"complex64\",\"64 位浮点数 + 虚数\",\"complex128\",\"例子\",\"// 初始化一个复数 var complexData complex64 = complex(5, 3) // 等于： 5 + 3i // 另一种初始化方式 complexData2 := 5 + 3i \"]},\"29\":{\"h\":\"字符串 (string)\",\"t\":[\"字符串由一连串的字符组成，类型名称为 string\",\"字符串一旦创建，无法修改\",\"例子\",\"package main import \\\"fmt\\\" func main() { var str string := \\\"Hi! Jack\\\" // 不能修改，以下注释的代码会报错 // str[2] = 'c' fmt.Printf(\\\"%s\\\",str) } \"]},\"30\":{\"h\":\"布尔类型 (bool)\",\"t\":[\"布尔类型的值为 true 或 false, 类型名称为 bool\",\"例子\",\"var isNumber bool isNumber = true isNumber = false \"]},\"31\":{\"h\":\"数组 (array)\",\"t\":[\"数组由一系列数据组成，可通过下标获取数据\",\"数组的容量一经创建就无法修改\",\"例子\",\"data := [5]int{1, 2, 3, 4, 5} \"]},\"32\":{\"h\":\"切片 (slices)\",\"t\":[\"切片是动态的数组，可根据数据自动调整容量大小\",\"例子\",\"package main import \\\"fmt\\\" func main() { var data []int for i := 0; i < 10; i ++ { data = append(data, i) } fmt.Println(data) } // 结果 // [0 1 2 3 4 5 6 7 8 9] \"]},\"33\":{\"h\":\"Map (map)\",\"t\":[\"map 是一种键值映射表，通过 key 获取对应的 value\",\"map 的声明方式\",\"map[KeyType]ValueType \",\"KeyType 为 key 的数据类型 , ValueType 为 value 的数据类型\",\"例子\",\"// 声明 map var m map[string]int // 使用 make 初始化 map m = make(map[string]int) // 设置值 m[\\\"path\\\"] = 66 // 输出值 fmt.Println(m[\\\"path\\\"]) \"]},\"34\":{\"h\":\"结构体 (struct)\",\"t\":[\"结构体由一系列自定义的字段组成，可通过 . 获取字段内容\",\"例子\",\"type Animal struct { Name string } a := Animal{ Name: \\\"Lucky\\\" } fmt.Println(a.Name) \"]},\"35\":{\"h\":\"指针 (pointer)\",\"t\":[\"指针存储的是变量的内存地址，在变量前使用 * 定义为指针，使用 & 获取变量地址，通过指针可以在函数中修改函数外的数据\",\"例子\",\"var num *int n := 10 num = &n \"]},\"36\":{\"h\":\"零值表\",\"t\":[\"类型\",\"零值\",\"uint/uint8/uint16/uint32/uint64\",\"0\",\"int/int8/int16/int32/int64\",\"0\",\"float32/float64\",\"0\",\"complex64/complex128\",\"0+0i\",\"bool\",\"false\",\"uintptr\",\"0\",\"byte\",\"0\",\"rune\",\"0\",\"string\",\"\\\"\\\"\",\"struct\",\"内部属性全部是其对应0值\",\"interface\",\"nil\",\"slice\",\"nil\",\"map\",\"nil\",\"chan\",\"nil\",\"func\",\"nil\",\"pointer\",\"nil\"]},\"37\":{\"h\":\"运算符\"},\"38\":{\"h\":\"算术运算符\",\"t\":[\"A\",\"B\",\"50\",\"20\",\"操作符\",\"操作\",\"结果\",\"描述\",\"+\",\"A + B\",\"70\",\"相加\",\"-\",\"A - B\",\"30\",\"相减\",\"*\",\"A * B\",\"1000\",\"相乘\",\"/\",\"A / B\",\"2\",\"相除\",\"%\",\"A % B\",\"10\",\"取余\",\"++\",\"A++\",\"51\",\"自增\",\"--\",\"A--\",\"49\",\"自减\"]},\"39\":{\"h\":\"关系运算符\",\"t\":[\"A\",\"B\",\"50\",\"20\",\"操作符\",\"操作\",\"结果\",\"描述\",\"==\",\"A == B\",\"false\",\"检查两数是否相等，若相等则为 true，否则为 false\",\"!=\",\"A != B\",\"true\",\"检查两数是否不相等，若不相等则为 true , 否则为 false\",\">\",\"A > B\",\"true\",\"检查左边是否大于右边，若成立则为 true, 否则为 false\",\"<\",\"A < B\",\"false\",\"检查左边是否小于右边，若成立则为 true, 否则为 false\",\">=\",\"A >= B\",\"true\",\"检查左边是否大于等于右边，若成立则为 true, 否则为 false\",\"<=\",\"A <= B\",\"false\",\"检查左边是否小于等于右边，若成立则为 true, 否则为 false\"]},\"40\":{\"h\":\"逻辑运算符\",\"t\":[\"A\",\"B\",\"true\",\"false\",\"操作符\",\"操作\",\"结果\",\"描述\",\"&&\",\"A && B\",\"false\",\"若两边都为 true，则结果为 true，否则为 false\",\"!=\",\"A != B\",\"true\",\"若两边有一边为 true，则结果为 true，若两边都为 false ， 则结果为 false\",\"！\",\"!A\",\"false\",\"若条件为 true 则结果为 false, 反之若条件为 false, 则结果为 true\"]},\"41\":{\"h\":\"位运算符\",\"t\":[\"真值表\",\"p\",\"q\",\"p & q\",\"p | q\",\"p ^ q\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"0\",\"0\",\"1\",\"1\",\"假设\",\"变量\",\"值\",\"A\",\"0110 1000\",\"B\",\"0111 0011\",\"操作符\",\"操作\",\"结果\",\"描述\",\"&\",\"A & B\",\"0110 0000\",\"按位进行与运算\",\"|\",\"A | B\",\"0111 1011\",\"按位进行或运算\",\"^\",\"A ^ B\",\"0001 1011\",\"按位进行异或运算\",\"<<\",\"A << 2\",\"1010 0000\",\"左移 2 位，低位补 0\",\">>\",\"A >> 2\",\"0001 1010\",\"右移 2 位，高位补 0\"]},\"42\":{\"h\":\"赋值运算符\",\"t\":[\"我们可以使用 = 将右边的结果赋值到左边，如 C = A + B\",\"运算符\",\"操作\",\"等同于\",\"+=\",\"A += B\",\"A = A + B\",\"-=\",\"A -= B\",\"A = A - B\",\"*=\",\"A *= B\",\"A = A * B\",\"/=\",\"A /= B\",\"A = A / B\",\"%=\",\"A %= B\",\"A = A % B\",\"<<=\",\"A <<= 2\",\"A = A << 2\",\">>=\",\"A >>= 2\",\"A = A >> 2\",\"&=\",\"A &= 2\",\"A = A & 2\",\"|=\",\"A |= 2\",\"A = A | 2\",\"^=\",\"A ^= 2\",\"A = A ^ 2\"]},\"43\":{\"h\":\"其他符号\",\"t\":[\"运算符\",\"描述\",\"&\",\"取地址\",\"*\",\"指针\"]},\"44\":{\"h\":\"符号优先级\",\"t\":[\"从高到低为：\",\"优先级\",\"运算符\",\"5\",\"* / % << >> & &^\",\"4\",\"+ - | ^\",\"3\",\"== != < <= > >=\",\"2\",\"&&\",\"1\",\"||\",\"可以使用括号提高优先级\"]},\"45\":{\"h\":\"错误处理\"},\"46\":{\"h\":\"接口\",\"t\":[\"golang 提供了 error 类型的接口\",\"type error interface { Error() string } \",\"只要结构体实现了 Error() 方法就属于 error 类型\"]},\"47\":{\"h\":\"创建错误\",\"t\":[\"golang 提供了多种创建 error 的方法\",\"我们可以使用 errors.New()fmt.Errorf() 来创建错误\",\"例子\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // 使用 New 创建错误 err1 := errors.New(\\\"first error\\\") // 使用 fmt 创建错误 err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") fmt.Println(err1, err2) } \"]},\"48\":{\"h\":\"errors.Join\",\"t\":[\"在 go 1.20 提供了 errors.Join 方法将多个 error 组合成一个数组\",\"例子\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // 使用 New 创建错误 err1 := errors.New(\\\"first error\\\") // 使用 fmt 创建错误 err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") // 使用 join 将多个 error 合并 err3 := errors.Join(err1, err2) fmt.Println(err1, err2) // 结果: first error second error fmt.Println(err3) // 结果： // first error // second error } \"]},\"49\":{\"h\":\"errors.Is\",\"t\":[\"使用 errors.Is() 方法可以判断当前 error 是否包含目标类型的 error\",\"例子\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // 使用 New 创建错误 err1 := errors.New(\\\"first error\\\") // 使用 fmt 创建错误 err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") // 使用 join 将多个 error 合并 err3 := errors.Join(err1, err2) fmt.Println(err1, err2) // 结果: first error second error fmt.Println(err3) // 结果： // first error // second error // 使用 errors.Is() 判断错误是否是目标错误， err3 包含 err1 所以为 true fmt.Println(errors.Is(err1, err2)) // 结果: false fmt.Println(errors.Is(err3, err1)) // 结果： true } \"]},\"50\":{\"h\":\"errors.As\",\"t\":[\"使用 errors.As() 方法可以将 error 中第一个符合目标类型的错误赋值到目标对象\",\"例子\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) type NormalErr struct { e string } func (t NormalErr) Error() string { return t.e } func main() { // 使用 New 创建错误 err1 := errors.New(\\\"first error\\\") // 创建 T err2 := NormalErr{\\\"second error\\\"} // 使用 join 将多个 error 合并 err3 := errors.Join(err1, err2) var err4 NormalErr errors.As(err3, &err4) fmt.Println(err4) // 结果： second error } \"]},\"51\":{\"h\":\"Map (集合)\"},\"52\":{\"h\":\"创建 Map\",\"t\":[\"map 是一种键值映射表，通过 key 获取对应的 value\",\"map 的声明方式\",\"map[KeyType]ValueType \",\"KeyType 为 key 的数据类型 , ValueType 为 value 的数据类型\",\"例子\",\"// 声明 map var m map[string]int // 使用 make 初始化 map m = make(map[string]int) // 使用 make 初始化 map, 并设置容量 // m = make(map[string]int, 10) // 设置值 m[\\\"path\\\"] = 66 // 输出值 fmt.Println(m[\\\"path\\\"]) \"]},\"53\":{\"h\":\"遍历 Map\",\"t\":[\"使用 range 遍历 map\",\"例子\",\"package main import \\\"fmt\\\" func main() { // 初始化 Map var dataMap map[string]string dataMap = make(map[string]string) // 也可以这样初始化 //dataMap := map[string]string{} // 添加键值 dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" fmt.Println(\\\"print key and value: \\\") // 使用 range 遍历 key value for key, val := range dataMap { fmt.Printf(\\\"key: %s - value: %s \\\\n\\\", key, val) } fmt.Println(\\\"print key: \\\") // 使用 range 遍历 key for key := range dataMap { fmt.Printf(\\\"key: %s \\\\n\\\", key) } fmt.Println(\\\"print value: \\\") // 使用 range 遍历 value for _, val := range dataMap { fmt.Printf(\\\"Value: %s \\\\n\\\", val) } } // 结果 // print key and value: // key: third - value: third value // key: first - value: first value // key: second - value: second value // print key: // key: first // key: second // key: third // print value: // Value: first value // Value: second value // Value: third value \"]},\"54\":{\"h\":\"删除键值\",\"t\":[\"在字典中删除键值需要使用 delete() 方法\",\"例子\",\"package main import \\\"fmt\\\" func main() { // 初始化 Map var dataMap map[string]string dataMap = make(map[string]string) // 也可以这样初始化 //dataMap := map[string]string{} dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" fmt.Println(dataMap) // 删除键值 delete(dataMap, \\\"first\\\") fmt.Println(dataMap) } // 结果： // map[first:first value second:second value third:third value] // map[second:second value third:third value] \"]},\"55\":{\"h\":\"判断 key 是否存在\",\"t\":[\"例子\",\"package main import \\\"fmt\\\" func main() { // 初始化 Map var dataMap map[string]string dataMap = make(map[string]string) dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" // 判断 key 是否存在 if val, ok := dataMap[\\\"first\\\"]; ok { fmt.Println(val) } else { fmt.Println(\\\"key not exists\\\") } if val, ok := dataMap[\\\"fourth\\\"]; ok { fmt.Println(val) } else { fmt.Println(\\\"key not exists\\\") } } \"]},\"56\":{\"h\":\"获取 Map 长度\",\"t\":[\"使用 len() 获取 Map 的长度\",\"len(dataMap) \"]},\"57\":{\"h\":\"并发\",\"t\":[\"在并发操作下 Map 不是线程安全的，可以使用官方的 sync.Map{} 解决\"]},\"58\":{\"h\":\"切片\"},\"59\":{\"h\":\"创建切片\",\"t\":[\"有三种方式可以创建切片\",\"package main import \\\"fmt\\\" func main() { // 第一种方式： 直接声明 var dataSlice []string // 第二种方式： 直接初始化 dataSlice1 := []string{} // 第三种方式： 使用 make dataSlice2 := make([]string, 10) fmt.Println(dataSlice, dataSlice1, dataSlice2) } \",\"可以在创建时直接将数据初始化\",\"dataSlice1 := []string{\\\"Jack\\\", \\\"Mike\\\"} \"]},\"60\":{\"h\":\"切片截取\",\"t\":[\"arr[beginIndex:endIndex] 可以截取切片，包含 beginIndex， 不包含 endIndex 下标的数据。\",\"data := []int{0,1,2,3,4,5} fmt.Println(data[2:4]) // 结果 // [2 3] \"]},\"61\":{\"h\":\"长度及容量\",\"t\":[\"使用 len() 获取切片长度， 使用 cap() 获取切片容量\",\"例子\",\"package main import \\\"fmt\\\" func main() { // 创建长度为 5 ， 容量为 9 的切片 data := make([]int, 5, 9) fmt.Println(data, len(data), cap(data)) } // 结果： // [0 0 0 0 0] 5 9 \"]},\"62\":{\"h\":\"追加数据\",\"t\":[\"使用 append() 函数追加数据\",\"例子\",\"package main import \\\"fmt\\\" func main() { data := []int{0,1,2} // 追加一条数据 data1 := append(data, 3) // 追加多条数据 data2 := append(data, 4, 5, 6) fmt.Println(data) fmt.Println(data1) fmt.Println(data2) } // 结果： // [0 1 2] // [0 1 2 3] // [0 1 2 4 5 6] \"]},\"63\":{\"h\":\"克隆切片\",\"t\":[\"我们知道切片属于引用类型，如果将一个切片赋值给另一个变量，实际上共用一个内存地址的数据，如果想创建两个相同数据的切片，可以使用 copy() 方法\",\"例子\",\"package main import \\\"fmt\\\" func main() { data := []int{0,1,2} // 创建一个长度相同的切片 data1 := make([]int, len(data)) // 复制 data 的数据到 data1 copy(data1, data) // 给 data1 添加数据 data1 = append(data1, 3, 4, 5) fmt.Println(data) fmt.Println(data1) // 会发现 data 没被改变 } // 结果： // [0 1 2] // [0 1 2 3 4 5] \"]},\"64\":{\"h\":\"信道\"},\"65\":{\"h\":\"介绍\",\"t\":[\"channel 是一个信道，用于端到端数据的通信，常用于 goroutine 之间数据共享。\"]},\"66\":{\"h\":\"创建 channel\",\"t\":[\"我们使用 make 来创建 channel\",\"ch1 := make(chan T) // 无缓冲 ch2 := make(chan T, 2) // 带缓冲 \",\"T 为数据类型。\",\"注意\",\"无缓冲区的信道会被阻塞直到数据被接收\",\"有缓冲区的信道在发送的数据达到缓冲区大小后才会被阻塞\"]},\"67\":{\"h\":\"发送接收数据\",\"t\":[\"使用 <- 指向 channel 表示发送数据到该 channel, 如 ch <- 10\",\"使用 <- 在 channel 左侧表示接收数据，如 <-ch\"]},\"68\":{\"h\":\"关闭 channel\",\"t\":[\"使用 close() 关闭 channel\",\"close(ch) \",\"注意\",\"如果往一个已经 close() 的 channel 发送消息，会产生 panic\",\"读取已关闭的 channel 可以获得零值, 若使用 range 读取 channel, 则 close 后会终止循环\",\"我们可以使用 val, ok := <- ch 来判断是否是零值，若 ok 为 false 则信道已经 close\"]},\"69\":{\"h\":\"Select\",\"t\":[\"通常我们会使用 select 来接收 channel 的数据, 还可以使用 default 设定默认执行的动作, select 可以同时接收多个 channel ，若多个 channel 同时发送过来数据，则会随机选择一个 channel 完成操作\",\"select { case <-ch1: // 接收 ch1 的数据 fmt.Println(\\\"ch1\\\") case <-ch2: // 接收 ch2 的数据 fmt.Println(\\\"ch2\\\") case val := <-ch3: fmt.Println(ch3) //接收 ch3 的数据并打印 default: fmt.Println(\\\"default\\\") } \"]},\"70\":{\"h\":\"例子\",\"t\":[\"定时器就是通过 channel 实现了定时结果的返回\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { t := time.NewTicker(3*time.Second) fmt.Println(\\\"start\\\") <-t.C fmt.Println(\\\"finish\\\") } \"]},\"71\":{\"h\":\"注意事项\",\"t\":[\"使用 channel 时要注意必须有接收数据端，注意避免死锁问题\"]},\"72\":{\"h\":\"Context\"},\"73\":{\"h\":\"介绍\",\"t\":[\"Context 是 golang 中十分重要的接口，用于定义 goroutine 中的上下文信息，context 常用于以下几种情况：\",\"数据传递： 在多个 goroutine 中传递数据\",\"超时管理： 通过配置超时时间，可以方便地配置协程的终止时间\",\"终止协程： 通过使用 cancel() 方法，协程可以很方便地终止，可以批量管理多个协程的终止\"]},\"74\":{\"h\":\"Context 接口\",\"t\":[\"// A Context carries a deadline, a cancelation signal, and other values across // API boundaries. // // Context's methods may be called by multiple goroutines simultaneously. type Context interface { Done() <-chan struct{} Deadline() (deadline time.Time, ok bool) Err() error Value(key interface{}) interface{} } \"]},\"75\":{\"h\":\"根节点和派生节点\",\"t\":[\"我们可以为 context 创建根节点和派生节点，为树形结构，当根节点被 cancel() 或超时终止时，它的所有派生节点也会被终止，根节点的数据也会被所有派生节点共享。\",\"context 结构\"]},\"76\":{\"h\":\"创建根节点\",\"t\":[\"ctx := context.Background() // 创建空白 context ctx2 := context.TODO() // TODO 同样是空白 context \"]},\"77\":{\"h\":\"创建派生节点\",\"t\":[\"使用 context.WithXXX() 创建派生 context\",\"package main import ( \\\"context\\\" \\\"fmt\\\" ) func main() { ctx := context.WithValue(context.Background(), \\\"base\\\", \\\"baseVal\\\") ctx1 := context.WithValue(ctx, \\\"ctx1\\\", \\\"ctx1Val\\\") ctx2 := context.WithValue(ctx, \\\"ctx2\\\", \\\"ctx2Val\\\") ctx3 := context.WithValue(ctx, \\\"ctx3\\\", \\\"ctx3Val\\\") fmt.Println(ctx) fmt.Println(ctx1) fmt.Println(ctx2) fmt.Println(ctx3) } // 结果： // context.Background.WithValue(type string, val baseVal) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx1Val) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx2Val) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx3Val) \"]},\"78\":{\"h\":\"WithValue()\",\"t\":[\"context.WithValue() 可以用于创建派生节点并添加键值数据，同时保留父级 context 所有的数据\"]},\"79\":{\"h\":\"WithDeadline() WithTimeout()\",\"t\":[\"context.WithDeadline() 和 context.WithTimeout() 可以用来创建带有超时控制的 context\",\"注意\",\"WithTimeout(1*time.Second) 等同于 WithDeadline(time.Now().Add(1*time.Second))\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func main() { ctx, _ := context.WithTimeout(context.Background(), 3*time.Second) go func(ctx1 context.Context) { for { select { case <-ctx1.Done(): fmt.Println(\\\"time out\\\") return default: fmt.Println(\\\"running...\\\") time.Sleep(time.Second) } } }(ctx) time.Sleep(5 * time.Second) } // 结果： // running... // running... // running... // time out \"]},\"80\":{\"h\":\"WithCancel()\",\"t\":[\"使用 WithCancel() 可以创建手动终止的 context 执行 cancel() 即可手动终止\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func main() { ctx, cancel := context.WithCancel(context.Background()) go func(ctx1 context.Context) { for { select { case <-ctx1.Done(): fmt.Println(\\\"canceled\\\") return default: fmt.Println(\\\"running...\\\") time.Sleep(time.Second) } } }(ctx) time.Sleep(3*time.Second) cancel() time.Sleep(5 * time.Second) } // 结果： // running... // running... // running... // canceled \"]},\"81\":{\"h\":\"基础\"},\"82\":{\"h\":\"指针\"},\"83\":{\"h\":\"什么是指针和指针变量?\",\"t\":[\"展开查看 普通变量存储数据，而指针变量存储的是数据的地址。 \",\"学习指针，主要有两个运算符号&和*。 \",\"&：地址运算符，从变量中取地址\",\"*：引用运算符，取地址中数据\",\"num := 99 fmt.Println(num) //输出: 99 ptr := &num fmt.Println(ptr) //输出: 例如：0xc000086020 tamp := *ptr fmt.Println(tamp) //输出: 99 \"]},\"84\":{\"h\":\"为什么使用指针？\",\"t\":[\"展开查看\",\"意义一：容易编码\",\"指针在数据结构中起着重要的作用。通过指针，我们可以创建复杂的数据结构，如链表、树和图。指针可在数据结构中轻松地访问和操作节点之间的关系，从而实现高效的数据存储和检索。\",\"指针可在函数之间传递数据的引用，而不是复制整个数据。这样可以节省内存空间，并提高程序的执行效率。通过传递指针，函数可以直接修改原始数据，而不需要返回值。\",\"意义二：节省内存\",\"指针可直接访问和修改内存中的数据，通过指针，我们可以在运行时动态地分配内存，以满足程序的需求，并在不需要时释放内存，避免内存泄漏。\",\"指针可在程序运行时动态地分配内存。通过动态内存分配，我们可以根据需要分配和释放内存，从而提高程序的灵活性和效率。\"]},\"85\":{\"h\":\"哪些对象可以获取地址，哪些不行？\",\"t\":[\"展开查看\",\"可以使用 & 获取内存地址的对象：\",\"变量\",\"指针\",\"数组，切片及其内部数据\",\"结构体指针\",\"Map\",\"不能寻址的对象:\",\"结构体\",\"常量\",\"字面量\",\"函数\",\"map 非指针元素\",\"数组字面量\"]},\"86\":{\"h\":\"字面量\"},\"87\":{\"h\":\"字面量是什么意思？\",\"t\":[\"展开查看\",\"下面这些基本类型赋值的文本，就是基本类型字面量。\",\"基本类型\",\"集合\",\"布尔类型\",\"bool\",\"字符串类\",\"string\",\"复数类型\",\"complex64complex128\",\"浮点类型\",\"float32float64\",\"整数类型\",\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",\"如\",\"s := \\\"hello world\\\" // \\\"hello world\\\" 就是字面量 n := 10 // 10 就是字面量 \",\"未命名常量是一种特殊的常量，它没有具体的名称。这种常量只有值，没有与之关联的变量名。 如下字符串都是字符串字面量，就是 未命名常量。\",\"\\\"hello，world\\\" \\\"123\\\" \"]},\"88\":{\"h\":\"什么是有类型常量和无类型常量？\",\"t\":[\"展开查看\",\"Golang 中，常量分为有类型常量和无类型常量。\",\"// 无类型常量 const A = 8 // 有类型常量 const colour string = \\\"red\\\" \",\"当无类型的常量被赋值给一个变量的时，无类型的常量会转化成对应的类型\",\"package main import \\\"fmt\\\" func main() { const A = 8 var t int16 = A fmt.Printf(\\\"%T \\\", t) }//输出： int16 \",\"或者进行显式的转换\",\"package main import \\\"fmt\\\" func main() { const A int8 = 8 var t int16 = int16(A) fmt.Printf(\\\"%T \\\", t) //输出： int16 } \",\"而有类型常量在赋值的时，类型不同会报错\",\"package main import \\\"fmt\\\" func main() { const A int8 = 8 var t int16 = A fmt.Printf(\\\"type: %T \\\\n\\\", t) //出错： cannot use A (type int8) as type int16 in assignment } \"]},\"89\":{\"h\":\"不同字面量可能同值吗？\",\"t\":[\"展开查看\",\"一个值可存在多种字面量表示，如下十进制的数值 21，可由三种字面量表示\",\"10进制\",\"8进制\",\"2进制\",\"16进制\",\"21\",\"0o25\",\"0b0001 0101\",\"0x15\",\"import \\\"fmt\\\" func main() { fmt.Println(21 == 0o25) fmt.Println(21 == 0x15 ) fmt.Println(21 == 0b0001 0101) }// 由运行结果得出他们相等 \"]},\"90\":{\"h\":\"字面量和变量的区别是什么？\",\"t\":[\"展开查看\",\"字面量，就是未命名的常量，跟常量一样，是不可寻址的。\",\"举例如下\",\"func run() string { return \\\"fast\\\" } func main() { fmt.Println(&run()) } \",\"./main.go:10:14: cannot take the address of run() \",\"若不用变量名承接，函数返回的一个字符串的文本值，也就是字符串字面量， 而这种字面量是不可寻址的，会出现错误。要用 & 寻址，须用变量名承接。\",\"而下面这样就没错\",\"func run() string { return \\\"fast\\\" } func main() { t := run() fmt.Println(&t) } \"]},\"91\":{\"h\":\"什么是组合字面量？\",\"t\":[\"展开查看\",\"组合字面量就是把对象的定义和初始化放在了一起，进一步说，组合字面量是为结构体、数组、切片和map构造值，并且每次都会创建新值。它们由字面量的类型后紧跟大括号及元素列表。每个元素前面可以选择性的带一个相关key。\",\"使用组合字面量会简单一些，而结构体、数组、切片和map的组合字面量方式如下。\",\"结构体用组合字面量方式来定义和初始化\",\"type man struct { nationality string height int } func main() { // 声明和属性赋值 su := man{ nationality: \\\"China\\\", height: 180, } } \",\"结构体用繁琐的常规方式如下\",\"type man struct { nationality string height int } func main() { // 声明对象 var su man // 属性赋值 su.nationality = \\\"China\\\" su.height = 180 } \",\"map用组合字面量方式的定义和初始化如下\",\"m := map[string]int { \\\"math\\\": 96, \\\"Chinese\\\": 90, } \",\"同样的，数组用组合字面量方式的定义和初始化可以如下\",\"colours := [3]string{\\\"black\\\", \\\"red\\\", \\\"white\\\"} \",\"切片的组合字面量方式如下\",\"s := []string{\\\"red\\\", \\\"black\\\"} //会自动补上切片的容量和长度 \"]},\"92\":{\"h\":\"其他\"},\"93\":{\"h\":\"Go 中的 rune 和 byte 有什么区别？\",\"t\":[\"展开查看\",\"在 Go 语言中，byte 和 rune 都是用于表示字符的类型，但它们之间有一些区别：\"]},\"94\":{\"h\":\"类型不同：\",\"t\":[\"byte ：字节，是 uint8 的别名类型\",\"rune ：字符，是 int32 的别名类型\"]},\"95\":{\"h\":\"存储的字符不同：\",\"t\":[\"//byte 用于表示 ASCII 码字符，只能存储 0-255 范围内的字符。 var a byte = 'Y' // ASCII 码字符 //rune 用于表示 Unicode 字符，可以存储任意 Unicode 字符。 var b rune = '酥' // Unicode 字符 \"]},\"96\":{\"h\":\"占用的字节大小不同：byte 占用1个字节，rune 占用4个字节。\",\"t\":[\"import \\\"unsafe\\\" var a byte = 'Y' var b rune = '酥' fmt.Printf(\\\"a 占用 %d 个字节数\\\\nb 占用 %d 个字节数\\\", unsafe.Sizeof(a), unsafe.Sizeof(b)) // 输出: a 占用 1 个字节数 b 占用 4 个字节数 \"]},\"97\":{\"h\":\"表示的字符范围不同：\",\"t\":[\"由于 byte 类型能表示的值是有限的，只有 2^8=256 个。所以想表示中文只能使用 rune 类型。\"]},\"98\":{\"h\":\"Golang中的深拷贝和浅拷贝是什么？\",\"t\":[\"展开查看\",\"什么是拷贝？\",\"拷贝最简单的一种形式如下\",\"a := 648 b := a //把a 拷贝给 b \",\"那什么是深拷贝和浅拷贝？\",\"深浅拷贝也和类型有关\",\"类型\",\"详情\",\"引用类型\",\"SliceMapChannelsInterfacesFunctions\",\"值类型\",\"StringArrayIntStructFloatBool\",\"两种类型拷贝效果不同，先说我们比较熟悉的值类型。如什么是拷贝提问里易知， 若是值类型的话，在每一次拷贝后都会新申请一块空间存储值，拷贝后的两个值类型独立不影响。\",\"以引用类型的切片(Slice)为例来讲讲深拷贝和浅拷贝\",\"类型\",\"例子\",\"深度拷贝\",\"copy(slice1, slice2)\",\"浅拷贝\",\"slice1 = slice2\",\"浅拷贝仅改变指针的指向，如下\",\"package main import \\\"fmt\\\" func main() { var slice1 = []int{7, 8, 9} var slice2 = make([]int, 3) //切片初始化 slice2 = slice1 //浅拷贝改变了slice2的指向 fmt.Println(slice1) slice2[0] = 648 // 改变slice2[0]，slice1[0]也改变 fmt.Println(slice2) fmt.Println(slice1) } \",\"输出结果如下\",\"[7 8 9] [648 8 9] [648 8 9] \",\"所以对于切片来说，浅拷贝改变了它的地址。\",\"而深拷贝会改变地址的内存内的数组值，如下\",\"package main import \\\"fmt\\\" func main() { var slice1 = []int{7, 8, 9} var slice2 = make([]int, 3) //切片初始化 copy(slice2, slice1) //深拷贝会改变地址的内存内的数组值 fmt.Println(slice2) slice2[0] = 648 // 改变slice2[0]，slice1[0]不变 fmt.Println(slice2) fmt.Println(slice1) } \",\"[7 8 9] [648 8 9] [7 8 9] \"]},\"99\":{\"h\":\"make 和 new 有什么区别？\",\"t\":[\"展开查看\",\"new 用于给任意的类型分配内存地址，并返回该类型的指针，且初始化值为零值。\",\"new 并不是很常用\",\"package main import \\\"fmt\\\" func main() { s := new(string) n := new(int) fmt.Println(s) // 0xc00008a030 fmt.Println(*s) // \\\"\\\" fmt.Println(n) // 0xc00000a0d8 fmt.Println(*n) // 0 } \",\"make 主要用于 slicesmapchannel 初始化\",\"package main import \\\"fmt\\\" func main() { m := make(map[string]int, 10) fmt.Println(m) // map[] } \"]},\"100\":{\"h\":\"数组和切片有什么区别？\",\"t\":[\"展开查看\",\"数组的长度是固定的，在创建的时候就已经确定，且不可改变。切片的长度是动态的，会根据添加的数据自动扩容。\",\"在函数参数传递时数据是值传递，切片是引用传递\",\"切片有容量 （capacity） 参数，数组没有\"]},\"101\":{\"h\":\"如果 for range 同时添加数据， for range 会无限执行吗？\",\"t\":[\"展开查看\",\"不会，在执行 for range 的时候实际遍历的是变量的副本，所以改变遍历的变量是不会有营养的\",\"package main import \\\"fmt\\\" func main() { n := []int{1, 2, 3} for _, v := range n { n = append(n, v) } fmt.Println(n) // 结果： [1 2 3 1 2 3] } \"]},\"102\":{\"h\":\"多个 defer 的执行顺序是什么？\",\"t\":[\"展开查看\",\"执行的顺序类似堆栈，先进后出\",\"package main import \\\"fmt\\\" func main() { defer func() { fmt.Println(1) }() defer func() { fmt.Println(2) }() defer func() { fmt.Println(3) }() } // 结果： // 3 // 2 // 1 \"]},\"103\":{\"h\":\"什么是数据溢出？\",\"t\":[\"展开查看\",\"在使用数字类型时如果数据达到最大值，则接下来的数据将会溢出，如 uint 溢出后会从 0 开始， int 溢出后会变为负数。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { var n int8 = math.MaxInt8 var m uint8 = math.MaxUint8 n += 2 m += 1 fmt.Println(n) // -127 fmt.Println(m) // 0 } \",\"如何避免？\",\"正数优先使用 uint, 范围更大\",\"添加判断代码判断是否溢出\"]},\"104\":{\"h\":\"函数参数使用值还是指针？\",\"t\":[\"展开查看\",\"值传递\",\"一般来说，对于常见的类型都可以使用值传递，值传递的优点是函数内对值的修改不会影响原始的变量，也不会出现并发问题。缺点是值传递会复制一份对应变量的副本，对内存占用会多一些，如果传入的结构体非常大，使用值传递就不太合适。\",\"指针和引用传递\",\"使用指针传递的好处是直接传递变量的地址，不需要额外的空间，缺点是并发操作时数据修改会影响到原始的数据。传入切片实际上就是传递切片的指针，避免重复拷贝，若传入数组则是值传递，会拷贝一份。\"]},\"105\":{\"h\":\"进阶\"},\"106\":{\"h\":\"使用过 context 吗？ context 有哪些使用场景？\",\"t\":[\"展开查看\",\"场景\",\"介绍\",\"超时处理\",\"通过使用 context 可以方便地设置超时时间，在超时后自动终止协程\",\"终止协程\",\"通过使用 cancel() 方法，协程可以很方便地终止\",\"传递数据\",\"我们可以将数据写入 context, 在不同协程间传递数据\"]},\"107\":{\"h\":\"channel 是线程安全的吗？\",\"t\":[\"展开查看\",\"channel 是线程安全的，原因是 channel 内部实现了锁的机制，\"]},\"108\":{\"h\":\"Golang\"},\"109\":{\"h\":\"Concepts\"},\"110\":{\"h\":\"Golang\"},\"111\":{\"h\":\"Concepts\"},\"112\":{\"h\":\"Basic\"},\"113\":{\"h\":\"Golang\"},\"114\":{\"h\":\"Interview\"},\"115\":{\"h\":\"Basic\"},\"116\":{\"h\":\"Golang\"},\"117\":{\"h\":\"Interview\"}},\"dirtCount\":0,\"index\":[[\"内部实现了锁的机制\",{\"1\":{\"107\":1}}],[\"内部属性全部是其对应0值\",{\"1\":{\"36\":1}}],[\"原因是\",{\"1\":{\"107\":1}}],[\"传递数据\",{\"1\":{\"106\":1}}],[\"传入切片实际上就是传递切片的指针\",{\"1\":{\"104\":1}}],[\"超时处理\",{\"1\":{\"106\":1}}],[\"超时管理\",{\"1\":{\"73\":1}}],[\"场景\",{\"1\":{\"106\":1}}],[\"吗\",{\"0\":{\"106\":1}}],[\"进阶\",{\"0\":{\"105\":1}}],[\"进一步说\",{\"1\":{\"91\":1}}],[\"避免重复拷贝\",{\"1\":{\"104\":1}}],[\"避免内存泄漏\",{\"1\":{\"84\":1}}],[\"缺点是并发操作时数据修改会影响到原始的数据\",{\"1\":{\"104\":1}}],[\"缺点是值传递会复制一份对应变量的副本\",{\"1\":{\"104\":1}}],[\"对内存占用会多一些\",{\"1\":{\"104\":1}}],[\"对于常见的类型都可以使用值传递\",{\"1\":{\"104\":1}}],[\"一般来说\",{\"1\":{\"104\":1}}],[\"一个值可存在多种字面量表示\",{\"1\":{\"89\":1}}],[\"正数优先使用\",{\"1\":{\"103\":1}}],[\"溢出后会变为负数\",{\"1\":{\"103\":1}}],[\"溢出后会从\",{\"1\":{\"103\":1}}],[\"开始\",{\"1\":{\"103\":1}}],[\"开头为无符号数\",{\"1\":{\"26\":1}}],[\"开头为有符号数\",{\"1\":{\"26\":1}}],[\"先进后出\",{\"1\":{\"102\":1}}],[\"先说我们比较熟悉的值类型\",{\"1\":{\"98\":1}}],[\"多个\",{\"0\":{\"102\":1}}],[\"多个导入\",{\"1\":{\"7\":1}}],[\"参数\",{\"1\":{\"100\":1}}],[\"且不可改变\",{\"1\":{\"100\":1}}],[\"且初始化值为零值\",{\"1\":{\"99\":1}}],[\"主要用于\",{\"1\":{\"99\":1}}],[\"主要有两个运算符号\",{\"1\":{\"83\":1}}],[\"改变slice2\",{\"1\":{\"98\":2}}],[\"浅拷贝改变了它的地址\",{\"1\":{\"98\":1}}],[\"浅拷贝改变了slice2的指向\",{\"1\":{\"98\":1}}],[\"浅拷贝仅改变指针的指向\",{\"1\":{\"98\":1}}],[\"浅拷贝\",{\"1\":{\"98\":1}}],[\"深拷贝会改变地址的内存内的数组值\",{\"1\":{\"98\":1}}],[\"深度拷贝\",{\"1\":{\"98\":1}}],[\"深浅拷贝也和类型有关\",{\"1\":{\"98\":1}}],[\"两种类型拷贝效果不同\",{\"1\":{\"98\":1}}],[\"引用类型\",{\"1\":{\"98\":1}}],[\"引用运算符\",{\"1\":{\"83\":1}}],[\"详情\",{\"1\":{\"98\":1}}],[\"那什么是深拷贝和浅拷贝\",{\"1\":{\"98\":1}}],[\"拷贝后的两个值类型独立不影响\",{\"1\":{\"98\":1}}],[\"拷贝给\",{\"1\":{\"98\":1}}],[\"拷贝最简单的一种形式如下\",{\"1\":{\"98\":1}}],[\"把a\",{\"1\":{\"98\":1}}],[\"个\",{\"1\":{\"97\":1}}],[\"个字节数\",{\"1\":{\"96\":4}}],[\"个保留的关键字\",{\"1\":{\"3\":1}}],[\"占用\",{\"1\":{\"96\":4}}],[\"占用4个字节\",{\"0\":{\"96\":1}}],[\"占用1个字节\",{\"0\":{\"96\":1}}],[\"占用的字节大小不同\",{\"0\":{\"96\":1}}],[\"酥\",{\"1\":{\"95\":1,\"96\":1}}],[\"只有\",{\"1\":{\"97\":1}}],[\"只能存储\",{\"1\":{\"95\":1}}],[\"只要结构体实现了\",{\"1\":{\"46\":1}}],[\"码字符\",{\"1\":{\"95\":2}}],[\"存储的字符不同\",{\"0\":{\"95\":1}}],[\"但它们之间有一些区别\",{\"1\":{\"93\":1}}],[\"但是建议在初始化的时候就配置容量\",{\"1\":{\"14\":1}}],[\"都是用于表示字符的类型\",{\"1\":{\"93\":1}}],[\"都带有\",{\"1\":{\"18\":1}}],[\"语言中\",{\"1\":{\"93\":1}}],[\"其他\",{\"0\":{\"92\":1}}],[\"其他符号\",{\"0\":{\"43\":1}}],[\"属性赋值\",{\"1\":{\"91\":1}}],[\"每个元素前面可以选择性的带一个相关key\",{\"1\":{\"91\":1}}],[\"组合字面量是为结构体\",{\"1\":{\"91\":1}}],[\"组合字面量就是把对象的定义和初始化放在了一起\",{\"1\":{\"91\":1}}],[\"组合成一个数组\",{\"1\":{\"48\":1}}],[\"须用变量名承接\",{\"1\":{\"90\":1}}],[\"寻址\",{\"1\":{\"90\":1}}],[\"要用\",{\"1\":{\"90\":1}}],[\"也不会出现并发问题\",{\"1\":{\"104\":1}}],[\"也改变\",{\"1\":{\"98\":1}}],[\"也就是字符串字面量\",{\"1\":{\"90\":1}}],[\"也可以这样初始化\",{\"1\":{\"53\":1,\"54\":1}}],[\"举例如下\",{\"1\":{\"90\":1}}],[\"跟常量一样\",{\"1\":{\"90\":1}}],[\"由于\",{\"1\":{\"97\":1}}],[\"由运行结果得出他们相等\",{\"1\":{\"89\":1}}],[\"由无序的键值对组成\",{\"1\":{\"14\":1}}],[\"出错\",{\"1\":{\"88\":1}}],[\"当无类型的常量被赋值给一个变量的时\",{\"1\":{\"88\":1}}],[\"当根节点被\",{\"1\":{\"75\":1}}],[\"什么是数据溢出\",{\"0\":{\"103\":1}}],[\"什么是拷贝\",{\"1\":{\"98\":1}}],[\"什么是组合字面量\",{\"0\":{\"91\":1}}],[\"什么是有类型常量和无类型常量\",{\"0\":{\"88\":1}}],[\"什么是指针和指针变量\",{\"0\":{\"83\":1}}],[\"未命名常量\",{\"1\":{\"87\":1}}],[\"未命名常量是一种特殊的常量\",{\"1\":{\"87\":1}}],[\"没有与之关联的变量名\",{\"1\":{\"87\":1}}],[\"没被改变\",{\"1\":{\"63\":1}}],[\"它们由字面量的类型后紧跟大括号及元素列表\",{\"1\":{\"91\":1}}],[\"它没有具体的名称\",{\"1\":{\"87\":1}}],[\"它的所有派生节点也会被终止\",{\"1\":{\"75\":1}}],[\"就是未命名的常量\",{\"1\":{\"90\":1}}],[\"就是\",{\"1\":{\"87\":1}}],[\"就是字面量\",{\"1\":{\"87\":2}}],[\"就是基本类型字面量\",{\"1\":{\"87\":1}}],[\"浮点类型\",{\"1\":{\"87\":1}}],[\"浮点数就是包含小数点的数字\",{\"1\":{\"27\":1}}],[\"浮点数\",{\"0\":{\"27\":1}}],[\"非指针元素\",{\"1\":{\"85\":1}}],[\"字节\",{\"1\":{\"94\":1}}],[\"字面量和变量的区别是什么\",{\"0\":{\"90\":1}}],[\"字面量是什么意思\",{\"0\":{\"87\":1}}],[\"字面量\",{\"0\":{\"86\":1},\"1\":{\"85\":1,\"90\":1}}],[\"字符串类\",{\"1\":{\"87\":1}}],[\"字符串一旦创建\",{\"1\":{\"29\":1}}],[\"字符串由一连串的字符组成\",{\"1\":{\"29\":1}}],[\"字符串\",{\"0\":{\"29\":1}}],[\"字符\",{\"1\":{\"26\":2,\"94\":1,\"95\":3}}],[\"哪些不行\",{\"0\":{\"85\":1}}],[\"哪些对象可以获取地址\",{\"0\":{\"85\":1}}],[\"以引用类型的切片\",{\"1\":{\"98\":1}}],[\"以满足程序的需求\",{\"1\":{\"84\":1}}],[\"以下注释的代码会报错\",{\"1\":{\"29\":1}}],[\"节省内存\",{\"1\":{\"84\":1}}],[\"意义二\",{\"1\":{\"84\":1}}],[\"意义一\",{\"1\":{\"84\":1}}],[\"函数参数使用值还是指针\",{\"0\":{\"104\":1}}],[\"函数返回的一个字符串的文本值\",{\"1\":{\"90\":1}}],[\"函数\",{\"1\":{\"85\":1}}],[\"函数可以直接修改原始数据\",{\"1\":{\"84\":1}}],[\"函数追加数据\",{\"1\":{\"62\":1}}],[\"而深拷贝会改变地址的内存内的数组值\",{\"1\":{\"98\":1}}],[\"而结构体\",{\"1\":{\"91\":1}}],[\"而下面这样就没错\",{\"1\":{\"90\":1}}],[\"而这种字面量是不可寻址的\",{\"1\":{\"90\":1}}],[\"而有类型常量在赋值的时\",{\"1\":{\"88\":1}}],[\"而不需要返回值\",{\"1\":{\"84\":1}}],[\"而不是复制整个数据\",{\"1\":{\"84\":1}}],[\"而指针变量存储的是数据的地址\",{\"1\":{\"83\":1}}],[\"树和图\",{\"1\":{\"84\":1}}],[\"容易编码\",{\"1\":{\"84\":1}}],[\"容量为\",{\"1\":{\"61\":1}}],[\"例如\",{\"1\":{\"83\":1}}],[\"例子\",{\"0\":{\"70\":1},\"1\":{\"5\":1,\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"61\":1,\"62\":1,\"63\":1,\"98\":1}}],[\"输出结果如下\",{\"1\":{\"98\":1}}],[\"输出\",{\"1\":{\"83\":3,\"88\":2,\"96\":1}}],[\"输出值\",{\"1\":{\"33\":1,\"52\":1}}],[\"从而提高程序的灵活性和效率\",{\"1\":{\"84\":1}}],[\"从而实现高效的数据存储和检索\",{\"1\":{\"84\":1}}],[\"从变量中取地址\",{\"1\":{\"83\":1}}],[\"从高到低为\",{\"1\":{\"44\":1}}],[\"地址运算符\",{\"1\":{\"83\":1}}],[\"学习指针\",{\"1\":{\"83\":1}}],[\"普通变量存储数据\",{\"1\":{\"83\":1}}],[\"普通导入需要使用包名\",{\"1\":{\"7\":1}}],[\"展开查看\",{\"1\":{\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"93\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"106\":1,\"107\":1}}],[\"基本类型\",{\"1\":{\"87\":1}}],[\"基础\",{\"0\":{\"81\":1}}],[\"基于系统架构\",{\"1\":{\"26\":1}}],[\"即可手动终止\",{\"1\":{\"80\":1}}],[\"执行的顺序类似堆栈\",{\"1\":{\"102\":1}}],[\"执行\",{\"1\":{\"80\":1}}],[\"执行完一个\",{\"1\":{\"18\":1}}],[\"所以改变遍历的变量是不会有营养的\",{\"1\":{\"101\":1}}],[\"所以对于切片来说\",{\"1\":{\"98\":1}}],[\"所以想表示中文只能使用\",{\"1\":{\"97\":1}}],[\"所以为\",{\"1\":{\"49\":1}}],[\"所有的数据\",{\"1\":{\"78\":1}}],[\"同样的\",{\"1\":{\"91\":1}}],[\"同样是空白\",{\"1\":{\"76\":1}}],[\"同时添加数据\",{\"0\":{\"101\":1}}],[\"同时保留父级\",{\"1\":{\"78\":1}}],[\"同时发送过来数据\",{\"1\":{\"69\":1}}],[\"同时还有两个等价类型\",{\"1\":{\"26\":1}}],[\"根节点的数据也会被所有派生节点共享\",{\"1\":{\"75\":1}}],[\"根节点和派生节点\",{\"0\":{\"75\":1}}],[\"根据\",{\"1\":{\"10\":1}}],[\"of\",{\"1\":{\"90\":1}}],[\"out\",{\"1\":{\"79\":2}}],[\"other\",{\"1\":{\"74\":1}}],[\"ok\",{\"1\":{\"55\":4,\"68\":2,\"74\":1}}],[\"协程可以很方便地终止\",{\"1\":{\"73\":1,\"106\":1}}],[\"终止协程\",{\"1\":{\"73\":1,\"106\":1}}],[\"时要注意必须有接收数据端\",{\"1\":{\"71\":1}}],[\"定时器就是通过\",{\"1\":{\"70\":1}}],[\"定义为指针\",{\"1\":{\"35\":1}}],[\"定义一个新的类型\",{\"1\":{\"9\":1}}],[\"定义等价类型\",{\"1\":{\"9\":1}}],[\"定义结构\",{\"1\":{\"9\":1}}],[\"定义接口\",{\"1\":{\"9\":1}}],[\"完成操作\",{\"1\":{\"69\":1}}],[\"设定默认执行的动作\",{\"1\":{\"69\":1}}],[\"设置值\",{\"1\":{\"33\":1,\"52\":1}}],[\"还可以使用\",{\"1\":{\"69\":1}}],[\"通常我们会使用\",{\"1\":{\"69\":1}}],[\"通过动态内存分配\",{\"1\":{\"84\":1}}],[\"通过传递指针\",{\"1\":{\"84\":1}}],[\"通过指针\",{\"1\":{\"84\":2}}],[\"通过指针可以在函数中修改函数外的数据\",{\"1\":{\"35\":1}}],[\"通过使用\",{\"1\":{\"73\":1,\"106\":2}}],[\"通过配置超时时间\",{\"1\":{\"73\":1}}],[\"通过\",{\"1\":{\"33\":1,\"52\":1}}],[\"后会终止循环\",{\"1\":{\"68\":1}}],[\"后直接执行下一个\",{\"1\":{\"18\":1}}],[\"读取\",{\"1\":{\"68\":1}}],[\"读取已关闭的\",{\"1\":{\"68\":1}}],[\"发送消息\",{\"1\":{\"68\":1}}],[\"发送接收数据\",{\"0\":{\"67\":1}}],[\"左侧表示接收数据\",{\"1\":{\"67\":1}}],[\"左移\",{\"1\":{\"41\":1}}],[\"表示的字符范围不同\",{\"0\":{\"97\":1}}],[\"表示发送数据到该\",{\"1\":{\"67\":1}}],[\"表示任意类型\",{\"1\":{\"3\":1}}],[\"带缓冲\",{\"1\":{\"66\":1}}],[\"带缓冲信道\",{\"1\":{\"12\":1}}],[\"之间数据共享\",{\"1\":{\"65\":1}}],[\"之前变量的最终结果\",{\"1\":{\"23\":1}}],[\"之前执行意味着可以使用\",{\"1\":{\"23\":1}}],[\"之前或执行完之后执行动作\",{\"1\":{\"23\":1}}],[\"常量分为有类型常量和无类型常量\",{\"1\":{\"88\":1}}],[\"常量\",{\"1\":{\"85\":1}}],[\"常量一经声明就不能被更改\",{\"1\":{\"5\":1}}],[\"常用于以下几种情况\",{\"1\":{\"73\":1}}],[\"常用于\",{\"1\":{\"65\":1}}],[\"信道\",{\"0\":{\"64\":1}}],[\"添加判断代码判断是否溢出\",{\"1\":{\"103\":1}}],[\"添加数据\",{\"1\":{\"63\":1}}],[\"添加键值\",{\"1\":{\"53\":1}}],[\"给\",{\"1\":{\"63\":1}}],[\"实现了定时结果的返回\",{\"1\":{\"70\":1}}],[\"实际上共用一个内存地址的数据\",{\"1\":{\"63\":1}}],[\"实数为浮点数\",{\"1\":{\"28\":1}}],[\"克隆切片\",{\"0\":{\"63\":1}}],[\"追加多条数据\",{\"1\":{\"62\":1}}],[\"追加一条数据\",{\"1\":{\"62\":1}}],[\"追加数据\",{\"0\":{\"62\":1}}],[\"下面这些基本类型赋值的文本\",{\"1\":{\"87\":1}}],[\"下面的例子中的\",{\"1\":{\"3\":1}}],[\"下标的数据\",{\"1\":{\"60\":1}}],[\"直接初始化\",{\"1\":{\"59\":1}}],[\"直接声明\",{\"1\":{\"59\":1}}],[\"第三种方式\",{\"1\":{\"59\":1}}],[\"第二种方式\",{\"1\":{\"59\":1}}],[\"第一种方式\",{\"1\":{\"59\":1}}],[\"解决\",{\"1\":{\"57\":1}}],[\"解析\",{\"1\":{\"7\":1}}],[\"长度及容量\",{\"0\":{\"61\":1}}],[\"长度\",{\"0\":{\"56\":1}}],[\"判断\",{\"0\":{\"55\":1},\"1\":{\"55\":1}}],[\"判断错误是否是目标错误\",{\"1\":{\"49\":1}}],[\"删除键值\",{\"0\":{\"54\":1},\"1\":{\"54\":1}}],[\"并不是很常用\",{\"1\":{\"99\":1}}],[\"并返回该类型的指针\",{\"1\":{\"99\":1}}],[\"并且每次都会创建新值\",{\"1\":{\"91\":1}}],[\"并在不需要时释放内存\",{\"1\":{\"84\":1}}],[\"并提高程序的执行效率\",{\"1\":{\"84\":1}}],[\"并发\",{\"0\":{\"57\":1}}],[\"并设置容量\",{\"1\":{\"52\":1}}],[\"并初始化\",{\"1\":{\"10\":1}}],[\"集合\",{\"0\":{\"51\":1},\"1\":{\"87\":1}}],[\"创建派生\",{\"1\":{\"77\":1}}],[\"创建派生节点\",{\"0\":{\"77\":1}}],[\"创建空白\",{\"1\":{\"76\":1}}],[\"创建根节点\",{\"0\":{\"76\":1}}],[\"创建根节点和派生节点\",{\"1\":{\"75\":1}}],[\"创建一个长度相同的切片\",{\"1\":{\"63\":1}}],[\"创建长度为\",{\"1\":{\"61\":1}}],[\"创建切片\",{\"0\":{\"59\":1}}],[\"创建\",{\"0\":{\"52\":1,\"66\":1},\"1\":{\"50\":1}}],[\"创建错误\",{\"0\":{\"47\":1},\"1\":{\"47\":2,\"48\":2,\"49\":2,\"50\":1}}],[\"包含\",{\"1\":{\"49\":1,\"60\":1}}],[\"是线程安全的\",{\"1\":{\"107\":1}}],[\"是线程安全的吗\",{\"0\":{\"107\":1}}],[\"是不可寻址的\",{\"1\":{\"90\":1}}],[\"是\",{\"1\":{\"73\":1,\"94\":2}}],[\"是一个信道\",{\"1\":{\"65\":1}}],[\"是一种键值映射表\",{\"1\":{\"33\":1,\"52\":1}}],[\"是否存在\",{\"0\":{\"55\":1},\"1\":{\"55\":1}}],[\"是否包含目标类型的\",{\"1\":{\"49\":1}}],[\"合并\",{\"1\":{\"48\":1,\"49\":1,\"50\":1}}],[\"将多个\",{\"1\":{\"48\":1,\"49\":1,\"50\":1}}],[\"将右边的结果赋值到左边\",{\"1\":{\"42\":1}}],[\"方法\",{\"1\":{\"54\":1,\"63\":1,\"73\":1,\"106\":1}}],[\"方法可以将\",{\"1\":{\"50\":1}}],[\"方法可以判断当前\",{\"1\":{\"49\":1}}],[\"方法将多个\",{\"1\":{\"48\":1}}],[\"方法就属于\",{\"1\":{\"46\":1}}],[\"join\",{\"0\":{\"48\":1},\"1\":{\"48\":3,\"49\":2,\"50\":2}}],[\"jack\",{\"1\":{\"29\":1,\"59\":1}}],[\"来接收\",{\"1\":{\"69\":1}}],[\"来判断是否是零值\",{\"1\":{\"68\":1}}],[\"来创建\",{\"1\":{\"66\":1}}],[\"来创建错误\",{\"1\":{\"47\":1}}],[\"来修饰导入的包\",{\"1\":{\"7\":1}}],[\"提供了多种创建\",{\"1\":{\"47\":1}}],[\"提供了\",{\"1\":{\"46\":1,\"48\":1}}],[\"接收\",{\"1\":{\"69\":3}}],[\"接收到信息\",{\"1\":{\"21\":1}}],[\"接口\",{\"0\":{\"46\":1,\"74\":1}}],[\"错误处理\",{\"0\":{\"45\":1}}],[\"优先级\",{\"1\":{\"44\":1}}],[\"符号优先级\",{\"0\":{\"44\":1}}],[\"取地址中数据\",{\"1\":{\"83\":1}}],[\"取地址\",{\"1\":{\"43\":1}}],[\"取余\",{\"1\":{\"38\":1}}],[\"我们可以将数据写入\",{\"1\":{\"106\":1}}],[\"我们可以根据需要分配和释放内存\",{\"1\":{\"84\":1}}],[\"我们可以在运行时动态地分配内存\",{\"1\":{\"84\":1}}],[\"我们可以创建复杂的数据结构\",{\"1\":{\"84\":1}}],[\"我们可以为\",{\"1\":{\"75\":1}}],[\"我们可以使用\",{\"1\":{\"42\":1,\"47\":1,\"68\":1}}],[\"我们使用\",{\"1\":{\"66\":1}}],[\"我们知道切片属于引用类型\",{\"1\":{\"63\":1}}],[\"我们还可以使用\",{\"1\":{\"7\":2}}],[\"赋值运算符\",{\"0\":{\"42\":1}}],[\"高位补\",{\"1\":{\"41\":1}}],[\"右移\",{\"1\":{\"41\":1}}],[\"低位补\",{\"1\":{\"41\":1}}],[\"按位进行异或运算\",{\"1\":{\"41\":1}}],[\"按位进行或运算\",{\"1\":{\"41\":1}}],[\"按位进行与运算\",{\"1\":{\"41\":1}}],[\"值传递的优点是函数内对值的修改不会影响原始的变量\",{\"1\":{\"104\":1}}],[\"值传递\",{\"1\":{\"104\":1}}],[\"值类型\",{\"1\":{\"98\":1}}],[\"值\",{\"1\":{\"41\":1}}],[\"变量\",{\"1\":{\"41\":1,\"85\":1}}],[\"假设\",{\"1\":{\"41\":1}}],[\"^=\",{\"1\":{\"42\":2}}],[\"^\",{\"1\":{\"41\":3,\"42\":1,\"44\":2}}],[\"||\",{\"1\":{\"44\":1}}],[\"|=\",{\"1\":{\"42\":2}}],[\"|\",{\"1\":{\"41\":3,\"42\":1,\"44\":1}}],[\"q\",{\"1\":{\"41\":4}}],[\"quit\",{\"1\":{\"21\":6}}],[\"真值表\",{\"1\":{\"41\":1}}],[\"反之若条件为\",{\"1\":{\"40\":1}}],[\"则接下来的数据将会溢出\",{\"1\":{\"103\":1}}],[\"则会随机选择一个\",{\"1\":{\"69\":1}}],[\"则会随机执行一个\",{\"1\":{\"21\":1}}],[\"则信道已经\",{\"1\":{\"68\":1}}],[\"则\",{\"1\":{\"68\":1}}],[\"则结果为\",{\"1\":{\"40\":5}}],[\"逻辑运算符\",{\"0\":{\"40\":1}}],[\"检查左边是否小于等于右边\",{\"1\":{\"39\":1}}],[\"检查左边是否小于右边\",{\"1\":{\"39\":1}}],[\"检查左边是否大于等于右边\",{\"1\":{\"39\":1}}],[\"检查左边是否大于右边\",{\"1\":{\"39\":1}}],[\"检查两数是否不相等\",{\"1\":{\"39\":1}}],[\"检查两数是否相等\",{\"1\":{\"39\":1}}],[\"否则为\",{\"1\":{\"39\":6,\"40\":1}}],[\"若传入数组则是值传递\",{\"1\":{\"104\":1}}],[\"若是值类型的话\",{\"1\":{\"98\":1}}],[\"若不用变量名承接\",{\"1\":{\"90\":1}}],[\"若不相等则为\",{\"1\":{\"39\":1}}],[\"若多个\",{\"1\":{\"69\":1}}],[\"若\",{\"1\":{\"68\":1}}],[\"若使用\",{\"1\":{\"68\":1}}],[\"若条件为\",{\"1\":{\"40\":1}}],[\"若两边有一边为\",{\"1\":{\"40\":1}}],[\"若两边都为\",{\"1\":{\"40\":2}}],[\"若成立则为\",{\"1\":{\"39\":4}}],[\"若相等则为\",{\"1\":{\"39\":1}}],[\"若希望继续执行下面的语句\",{\"1\":{\"18\":1}}],[\"关闭\",{\"0\":{\"68\":1},\"1\":{\"68\":1}}],[\"关系运算符\",{\"0\":{\"39\":1}}],[\"关键字\",{\"1\":{\"3\":1}}],[\"自减\",{\"1\":{\"38\":1}}],[\"自增\",{\"1\":{\"38\":1}}],[\"自动推断类型并初始化\",{\"1\":{\"10\":1}}],[\"相除\",{\"1\":{\"38\":1}}],[\"相乘\",{\"1\":{\"38\":1}}],[\"相减\",{\"1\":{\"38\":1}}],[\"相加\",{\"1\":{\"38\":1}}],[\"描述\",{\"1\":{\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"43\":1}}],[\"操作\",{\"1\":{\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1}}],[\"操作符\",{\"1\":{\"38\":1,\"39\":1,\"40\":1,\"41\":1}}],[\"算术运算符\",{\"0\":{\"38\":1}}],[\"运算符\",{\"0\":{\"37\":1},\"1\":{\"42\":1,\"43\":1,\"44\":1}}],[\"零值\",{\"1\":{\"36\":1}}],[\"零值表\",{\"0\":{\"36\":1}}],[\"指向\",{\"1\":{\"67\":1}}],[\"指针和引用传递\",{\"1\":{\"104\":1}}],[\"指针可直接访问和修改内存中的数据\",{\"1\":{\"84\":1}}],[\"指针可在程序运行时动态地分配内存\",{\"1\":{\"84\":1}}],[\"指针可在函数之间传递数据的引用\",{\"1\":{\"84\":1}}],[\"指针可在数据结构中轻松地访问和操作节点之间的关系\",{\"1\":{\"84\":1}}],[\"指针在数据结构中起着重要的作用\",{\"1\":{\"84\":1}}],[\"指针存储的是变量的内存地址\",{\"1\":{\"35\":1}}],[\"指针\",{\"0\":{\"35\":1,\"82\":1},\"1\":{\"43\":1,\"85\":1}}],[\"指南\",{\"0\":{\"0\":1}}],[\"len\",{\"1\":{\"56\":2,\"61\":2,\"63\":1}}],[\"lucky\",{\"1\":{\"34\":1}}],[\"lib\",{\"1\":{\"7\":3}}],[\"list\",{\"1\":{\"6\":1}}],[\"结构\",{\"1\":{\"75\":1}}],[\"结构体用繁琐的常规方式如下\",{\"1\":{\"91\":1}}],[\"结构体用组合字面量方式来定义和初始化\",{\"1\":{\"91\":1}}],[\"结构体指针\",{\"1\":{\"85\":1}}],[\"结构体由一系列自定义的字段组成\",{\"1\":{\"34\":1}}],[\"结构体\",{\"0\":{\"34\":1},\"1\":{\"85\":1}}],[\"结果\",{\"1\":{\"18\":2,\"20\":1,\"23\":2,\"24\":1,\"32\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"48\":2,\"49\":4,\"50\":1,\"53\":1,\"54\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"77\":1,\"79\":1,\"80\":1,\"101\":1,\"102\":1}}],[\"keytype\",{\"1\":{\"33\":2,\"52\":2}}],[\"key\",{\"0\":{\"55\":1},\"1\":{\"33\":2,\"52\":2,\"53\":18,\"55\":3,\"74\":1}}],[\"90\",{\"1\":{\"91\":1}}],[\"96\",{\"1\":{\"91\":1}}],[\"99\",{\"1\":{\"83\":3}}],[\"9\",{\"1\":{\"32\":1,\"61\":3,\"98\":8}}],[\"切片有容量\",{\"1\":{\"100\":1}}],[\"切片是引用传递\",{\"1\":{\"100\":1}}],[\"切片是动态的数组\",{\"1\":{\"32\":1}}],[\"切片的长度是动态的\",{\"1\":{\"100\":1}}],[\"切片的组合字面量方式如下\",{\"1\":{\"91\":1}}],[\"切片初始化\",{\"1\":{\"98\":2}}],[\"切片和map的组合字面量方式如下\",{\"1\":{\"91\":1}}],[\"切片和map构造值\",{\"1\":{\"91\":1}}],[\"切片及其内部数据\",{\"1\":{\"85\":1}}],[\"切片截取\",{\"0\":{\"60\":1}}],[\"切片\",{\"0\":{\"32\":1,\"58\":1}}],[\"数据传递\",{\"1\":{\"73\":1}}],[\"数据类型\",{\"0\":{\"25\":1}}],[\"数组没有\",{\"1\":{\"100\":1}}],[\"数组的长度是固定的\",{\"1\":{\"100\":1}}],[\"数组的容量一经创建就无法修改\",{\"1\":{\"31\":1}}],[\"数组和切片有什么区别\",{\"0\":{\"100\":1}}],[\"数组用组合字面量方式的定义和初始化可以如下\",{\"1\":{\"91\":1}}],[\"数组字面量\",{\"1\":{\"85\":1}}],[\"数组由一系列数据组成\",{\"1\":{\"31\":1}}],[\"数组\",{\"0\":{\"31\":1},\"1\":{\"85\":1,\"91\":2}}],[\"布尔类型的值为\",{\"1\":{\"30\":1}}],[\"布尔类型\",{\"0\":{\"30\":1},\"1\":{\"87\":1}}],[\"另一种初始化方式\",{\"1\":{\"28\":1}}],[\"虚数\",{\"1\":{\"28\":2}}],[\"复制\",{\"1\":{\"63\":1}}],[\"复数类型\",{\"1\":{\"87\":1}}],[\"复数包含虚数和实数\",{\"1\":{\"28\":1}}],[\"复数\",{\"0\":{\"28\":1}}],[\"复合类型\",{\"0\":{\"11\":1},\"1\":{\"3\":1}}],[\"等同于\",{\"1\":{\"42\":1,\"79\":1}}],[\"等于\",{\"1\":{\"28\":1}}],[\"等价于\",{\"1\":{\"26\":2}}],[\"等待多个通信操作\",{\"1\":{\"21\":1}}],[\"或者进行显式的转换\",{\"1\":{\"88\":1}}],[\"或超时终止时\",{\"1\":{\"75\":1}}],[\"或\",{\"1\":{\"26\":1,\"30\":1}}],[\"8进制\",{\"1\":{\"89\":1}}],[\"8\",{\"1\":{\"26\":1,\"32\":1,\"88\":4,\"98\":8}}],[\"位运算符\",{\"0\":{\"41\":1}}],[\"位浮点数\",{\"1\":{\"28\":2}}],[\"位\",{\"1\":{\"26\":1,\"27\":1,\"28\":1,\"41\":2}}],[\"位置执行\",{\"1\":{\"20\":1}}],[\"use\",{\"1\":{\"88\":1}}],[\"unsafe\",{\"1\":{\"96\":3}}],[\"unsigned\",{\"1\":{\"26\":1}}],[\"unicode\",{\"1\":{\"26\":1,\"95\":3}}],[\"uintptr\",{\"1\":{\"36\":1}}],[\"uint64\",{\"1\":{\"36\":1}}],[\"uint32\",{\"1\":{\"36\":1}}],[\"uint16\",{\"1\":{\"36\":1}}],[\"uint8\",{\"1\":{\"26\":1,\"36\":1,\"94\":1,\"103\":1}}],[\"uint\",{\"1\":{\"26\":1,\"36\":1,\"103\":2}}],[\"中传递数据\",{\"1\":{\"73\":1}}],[\"中的\",{\"0\":{\"93\":1}}],[\"中的上下文信息\",{\"1\":{\"73\":1}}],[\"中的整数类型\",{\"1\":{\"26\":1}}],[\"中十分重要的接口\",{\"1\":{\"73\":1}}],[\"中第一个符合目标类型的错误赋值到目标对象\",{\"1\":{\"50\":1}}],[\"中\",{\"1\":{\"26\":1,\"88\":1}}],[\"中断当前\",{\"1\":{\"19\":1}}],[\"和\",{\"0\":{\"93\":1,\"99\":1},\"1\":{\"79\":1,\"83\":1,\"93\":1}}],[\"和所有正数\",{\"1\":{\"26\":1}}],[\"和别名修饰导入的包\",{\"1\":{\"7\":1}}],[\"无类型的常量会转化成对应的类型\",{\"1\":{\"88\":1}}],[\"无类型常量\",{\"1\":{\"88\":1}}],[\"无缓冲区的信道会被阻塞直到数据被接收\",{\"1\":{\"66\":1}}],[\"无缓冲\",{\"1\":{\"66\":1}}],[\"无缓冲信道\",{\"1\":{\"12\":1}}],[\"无法修改\",{\"1\":{\"29\":1}}],[\"无符号数包含\",{\"1\":{\"26\":1}}],[\"无符号数\",{\"1\":{\"26\":1}}],[\"~\",{\"1\":{\"26\":2}}],[\"∞\",{\"1\":{\"26\":1}}],[\"范围更大\",{\"1\":{\"103\":1}}],[\"范围内的字符\",{\"1\":{\"95\":1}}],[\"范围\",{\"1\":{\"26\":1}}],[\"整数类型\",{\"1\":{\"87\":1}}],[\"整数有两种类型\",{\"1\":{\"26\":1}}],[\"整数\",{\"0\":{\"26\":1}}],[\"获取内存地址的对象\",{\"1\":{\"85\":1}}],[\"获取切片容量\",{\"1\":{\"61\":1}}],[\"获取切片长度\",{\"1\":{\"61\":1}}],[\"获取变量地址\",{\"1\":{\"35\":1}}],[\"获取字段内容\",{\"1\":{\"34\":1}}],[\"获取对应的\",{\"1\":{\"33\":1,\"52\":1}}],[\"获取\",{\"0\":{\"56\":1},\"1\":{\"23\":1,\"56\":1}}],[\"在不同协程间传递数据\",{\"1\":{\"106\":1}}],[\"在超时后自动终止协程\",{\"1\":{\"106\":1}}],[\"在使用数字类型时如果数据达到最大值\",{\"1\":{\"103\":1}}],[\"在执行\",{\"1\":{\"101\":1}}],[\"在函数参数传递时数据是值传递\",{\"1\":{\"100\":1}}],[\"在创建的时候就已经确定\",{\"1\":{\"100\":1}}],[\"在每一次拷贝后都会新申请一块空间存储值\",{\"1\":{\"98\":1}}],[\"在多个\",{\"1\":{\"73\":1}}],[\"在并发操作下\",{\"1\":{\"57\":1}}],[\"在字典中删除键值需要使用\",{\"1\":{\"54\":1}}],[\"在变量前使用\",{\"1\":{\"35\":1}}],[\"在程序后台执行动作\",{\"1\":{\"24\":1}}],[\"在\",{\"1\":{\"23\":1,\"48\":1,\"67\":1,\"93\":1}}],[\"y\",{\"1\":{\"21\":3,\"95\":1,\"96\":1}}],[\"x+y\",{\"1\":{\"21\":1}}],[\"x\",{\"1\":{\"21\":3}}],[\"会拷贝一份\",{\"1\":{\"104\":1}}],[\"会无限执行吗\",{\"0\":{\"101\":1}}],[\"会根据添加的数据自动扩容\",{\"1\":{\"100\":1}}],[\"会出现错误\",{\"1\":{\"90\":1}}],[\"会产生\",{\"1\":{\"68\":1}}],[\"会发现\",{\"1\":{\"63\":1}}],[\"会阻塞直到一个\",{\"1\":{\"21\":1}}],[\"会自动补上切片的容量和长度\",{\"1\":{\"91\":1}}],[\"会自动跳出\",{\"1\":{\"18\":1}}],[\"会自动扩容\",{\"1\":{\"14\":1}}],[\"让\",{\"1\":{\"21\":1}}],[\"跳到\",{\"1\":{\"20\":1}}],[\"go\",{\"0\":{\"24\":1,\"93\":1},\"1\":{\"21\":1,\"24\":3,\"48\":1,\"79\":1,\"80\":1,\"90\":1,\"93\":1}}],[\"goroutines\",{\"1\":{\"74\":1}}],[\"goroutine\",{\"1\":{\"21\":1,\"24\":3,\"65\":1,\"73\":2}}],[\"goto\",{\"0\":{\"20\":1},\"1\":{\"20\":2}}],[\"golang中的深拷贝和浅拷贝是什么\",{\"0\":{\"98\":1}}],[\"golang\",{\"0\":{\"108\":1,\"110\":1,\"113\":1,\"116\":1},\"1\":{\"1\":1,\"3\":1,\"26\":2,\"46\":1,\"47\":1,\"73\":1,\"88\":1}}],[\"v\",{\"1\":{\"19\":6,\"101\":2}}],[\"val\",{\"1\":{\"53\":4,\"55\":4,\"68\":1,\"69\":1,\"77\":7}}],[\"val2\",{\"1\":{\"10\":4}}],[\"val1\",{\"1\":{\"10\":4}}],[\"values\",{\"1\":{\"74\":1}}],[\"valuetype\",{\"1\":{\"33\":2,\"52\":2}}],[\"value2\",{\"1\":{\"5\":1}}],[\"value1\",{\"1\":{\"5\":1}}],[\"value\",{\"1\":{\"5\":1,\"33\":2,\"52\":2,\"53\":23,\"54\":8,\"55\":3,\"74\":1}}],[\"var\",{\"0\":{\"10\":1},\"1\":{\"10\":7,\"18\":1,\"28\":1,\"29\":1,\"30\":1,\"32\":1,\"33\":1,\"35\":1,\"50\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"59\":1,\"88\":3,\"91\":1,\"95\":2,\"96\":2,\"98\":4,\"103\":2}}],[\"遍历\",{\"0\":{\"53\":1},\"1\":{\"19\":1,\"53\":4}}],[\"初始化\",{\"1\":{\"33\":1,\"52\":2,\"53\":1,\"54\":1,\"55\":1,\"99\":1}}],[\"初始化一个复数\",{\"1\":{\"28\":1}}],[\"初始化并判断\",{\"1\":{\"19\":1}}],[\"初始容量为\",{\"1\":{\"14\":1}}],[\"+∞\",{\"1\":{\"26\":2}}],[\"+=\",{\"1\":{\"23\":1,\"42\":2,\"103\":2}}],[\"++\",{\"1\":{\"20\":1,\"23\":1,\"32\":1,\"38\":1}}],[\"+\",{\"1\":{\"19\":1,\"28\":4,\"38\":2,\"42\":2,\"44\":1}}],[\"单个条件\",{\"1\":{\"19\":1}}],[\"单个导入\",{\"1\":{\"7\":1}}],[\"继续执行下一轮循环\",{\"1\":{\"19\":1}}],[\"循环\",{\"1\":{\"19\":1}}],[\"run\",{\"1\":{\"90\":5}}],[\"running\",{\"1\":{\"79\":4,\"80\":4}}],[\"rune\",{\"0\":{\"93\":1,\"96\":1},\"1\":{\"26\":1,\"36\":1,\"93\":1,\"94\":1,\"95\":2,\"96\":1,\"97\":1}}],[\"red\",{\"1\":{\"88\":1,\"91\":2}}],[\"return\",{\"1\":{\"21\":1,\"23\":4,\"50\":1,\"79\":1,\"80\":1,\"90\":2}}],[\"read\",{\"1\":{\"13\":1}}],[\"range\",{\"0\":{\"19\":1,\"101\":2},\"1\":{\"19\":1,\"53\":7,\"68\":1,\"101\":2}}],[\"70\",{\"1\":{\"38\":1}}],[\"7\",{\"1\":{\"18\":1,\"23\":1,\"32\":1,\"98\":5}}],[\"66\",{\"1\":{\"33\":1,\"52\":1}}],[\"648\",{\"1\":{\"98\":6}}],[\"64\",{\"1\":{\"26\":2,\"27\":1,\"28\":1}}],[\"6\",{\"1\":{\"18\":1,\"32\":1,\"62\":2}}],[\"51\",{\"1\":{\"38\":1}}],[\"50\",{\"1\":{\"38\":1,\"39\":1}}],[\"5\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"24\":1,\"28\":3,\"31\":2,\"32\":1,\"44\":1,\"60\":1,\"61\":3,\"62\":2,\"63\":2,\"79\":1,\"80\":1}}],[\"30\",{\"1\":{\"38\":1}}],[\"3i\",{\"1\":{\"28\":2}}],[\"32\",{\"1\":{\"26\":2,\"27\":1,\"28\":1}}],[\"3\",{\"1\":{\"18\":1,\"19\":2,\"20\":1,\"28\":1,\"31\":1,\"32\":1,\"44\":1,\"60\":2,\"62\":2,\"63\":2,\"70\":1,\"79\":1,\"80\":1,\"91\":1,\"98\":2,\"101\":3,\"102\":2}}],[\"49\",{\"1\":{\"38\":1}}],[\"4\",{\"1\":{\"18\":2,\"19\":1,\"20\":1,\"23\":1,\"31\":1,\"32\":1,\"44\":1,\"60\":2,\"62\":2,\"63\":2,\"96\":1}}],[\"d\",{\"1\":{\"96\":2}}],[\"done\",{\"1\":{\"74\":1,\"79\":1,\"80\":1}}],[\"deadline\",{\"1\":{\"74\":3}}],[\"delete\",{\"1\":{\"54\":2}}],[\"defer\",{\"0\":{\"23\":1,\"102\":1},\"1\":{\"23\":6,\"102\":3}}],[\"defergo\",{\"1\":{\"3\":1}}],[\"default\",{\"1\":{\"18\":3,\"69\":3,\"79\":1,\"80\":1}}],[\"data2\",{\"1\":{\"62\":2}}],[\"data1\",{\"1\":{\"62\":2,\"63\":7}}],[\"dataslice2\",{\"1\":{\"59\":2}}],[\"dataslice1\",{\"1\":{\"59\":3}}],[\"dataslice\",{\"1\":{\"59\":2}}],[\"datamap\",{\"1\":{\"53\":9,\"54\":9,\"55\":7,\"56\":1}}],[\"data\",{\"1\":{\"31\":1,\"32\":4,\"60\":2,\"61\":4,\"62\":4,\"63\":6}}],[\"day\",{\"1\":{\"18\":1}}],[\"dayofweek\",{\"1\":{\"18\":2}}],[\"默认操作\",{\"1\":{\"18\":1}}],[\"默认每个\",{\"1\":{\"18\":1}}],[\"需搭配\",{\"1\":{\"18\":1}}],[\"white\",{\"1\":{\"91\":1}}],[\"withcancel\",{\"0\":{\"80\":1},\"1\":{\"80\":2}}],[\"withtimeout\",{\"0\":{\"79\":1},\"1\":{\"79\":3}}],[\"withdeadline\",{\"0\":{\"79\":1},\"1\":{\"79\":2}}],[\"withvalue\",{\"0\":{\"78\":1},\"1\":{\"77\":11,\"78\":1}}],[\"withxxx\",{\"1\":{\"77\":1}}],[\"wednesday\",{\"1\":{\"18\":1}}],[\"world\",{\"1\":{\"17\":1,\"18\":2,\"23\":2,\"87\":3}}],[\"write\",{\"1\":{\"13\":1}}],[\">>=\",{\"1\":{\"42\":2}}],[\">>\",{\"1\":{\"41\":2,\"42\":1,\"44\":1}}],[\">=\",{\"1\":{\"19\":1,\"39\":2,\"44\":1}}],[\">\",{\"1\":{\"17\":1,\"39\":2,\"44\":1}}],[\"可由三种字面量表示\",{\"1\":{\"89\":1}}],[\"可通过\",{\"1\":{\"34\":1}}],[\"可通过下标获取数据\",{\"1\":{\"31\":1}}],[\"可根据数据自动调整容量大小\",{\"1\":{\"32\":1}}],[\"可嵌套使用\",{\"1\":{\"17\":1}}],[\"可以方便地设置超时时间\",{\"1\":{\"106\":1}}],[\"可以方便地配置协程的终止时间\",{\"1\":{\"73\":1}}],[\"可以存储任意\",{\"1\":{\"95\":1}}],[\"可以创建手动终止的\",{\"1\":{\"80\":1}}],[\"可以用来创建带有超时控制的\",{\"1\":{\"79\":1}}],[\"可以用于创建派生节点并添加键值数据\",{\"1\":{\"78\":1}}],[\"可以批量管理多个协程的终止\",{\"1\":{\"73\":1}}],[\"可以同时接收多个\",{\"1\":{\"69\":1}}],[\"可以获得零值\",{\"1\":{\"68\":1}}],[\"可以截取切片\",{\"1\":{\"60\":1}}],[\"可以使用\",{\"1\":{\"63\":1,\"85\":1}}],[\"可以使用官方的\",{\"1\":{\"57\":1}}],[\"可以使用括号提高优先级\",{\"1\":{\"44\":1}}],[\"可以跳到指定位置继续执行动作\",{\"1\":{\"20\":1}}],[\"可以在创建时直接将数据初始化\",{\"1\":{\"59\":1}}],[\"可以在执行完对应\",{\"1\":{\"18\":1}}],[\"可以在导入时设置别名\",{\"1\":{\"7\":1}}],[\"可以省略\",{\"1\":{\"5\":1}}],[\"exists\",{\"1\":{\"55\":2}}],[\"e\",{\"1\":{\"50\":2}}],[\"err\",{\"1\":{\"74\":1}}],[\"err4\",{\"1\":{\"50\":3}}],[\"err3\",{\"1\":{\"48\":2,\"49\":4,\"50\":2}}],[\"err2\",{\"1\":{\"47\":2,\"48\":3,\"49\":4,\"50\":2}}],[\"err1\",{\"1\":{\"47\":2,\"48\":3,\"49\":6,\"50\":2}}],[\"errorf\",{\"1\":{\"47\":2,\"48\":1,\"49\":1}}],[\"errors\",{\"0\":{\"48\":1,\"49\":1,\"50\":1},\"1\":{\"47\":3,\"48\":4,\"49\":7,\"50\":5}}],[\"error\",{\"1\":{\"46\":5,\"47\":3,\"48\":8,\"49\":9,\"50\":6,\"74\":1}}],[\"endindex\",{\"1\":{\"60\":2}}],[\"end\",{\"1\":{\"20\":5}}],[\"else\",{\"0\":{\"17\":1},\"1\":{\"17\":1,\"55\":2}}],[\"eat\",{\"1\":{\"9\":1}}],[\"的执行顺序是什么\",{\"0\":{\"102\":1}}],[\"的执行顺序是后进先出\",{\"1\":{\"23\":1}}],[\"的时候实际遍历的是变量的副本\",{\"1\":{\"101\":1}}],[\"的别名类型\",{\"1\":{\"94\":2}}],[\"的数据并打印\",{\"1\":{\"69\":1}}],[\"的数据\",{\"1\":{\"69\":3}}],[\"的数据到\",{\"1\":{\"63\":1}}],[\"的数据类型\",{\"1\":{\"33\":2,\"52\":2}}],[\"的切片\",{\"1\":{\"61\":1}}],[\"的长度\",{\"1\":{\"56\":1}}],[\"的方法\",{\"1\":{\"47\":1}}],[\"的声明方式\",{\"1\":{\"33\":1,\"52\":1}}],[\"的动作\",{\"1\":{\"18\":1}}],[\"的\",{\"1\":{\"14\":1,\"68\":1}}],[\"空的\",{\"1\":{\"14\":1}}],[\"虽然\",{\"1\":{\"14\":1}}],[\"height\",{\"1\":{\"91\":4}}],[\"hello\",{\"1\":{\"5\":1,\"17\":1,\"18\":1,\"23\":2,\"87\":3}}],[\"hi\",{\"1\":{\"29\":1}}],[\"hash\",{\"1\":{\"14\":1}}],[\"底层为\",{\"1\":{\"14\":1}}],[\"2^8=256\",{\"1\":{\"97\":1}}],[\"2进制\",{\"1\":{\"89\":1}}],[\"21\",{\"1\":{\"89\":5}}],[\"2\",{\"1\":{\"18\":3,\"19\":3,\"20\":1,\"24\":2,\"29\":1,\"31\":1,\"32\":1,\"38\":1,\"41\":4,\"42\":10,\"44\":1,\"60\":3,\"62\":4,\"63\":3,\"66\":1,\"101\":3,\"102\":2,\"103\":1}}],[\"20\",{\"1\":{\"12\":1,\"38\":1,\"39\":1,\"48\":1}}],[\"255\",{\"1\":{\"95\":1}}],[\"25\",{\"1\":{\"3\":1}}],[\"<<=\",{\"1\":{\"42\":2}}],[\"<<\",{\"1\":{\"41\":2,\"42\":1,\"44\":1}}],[\"<=\",{\"1\":{\"19\":1,\"39\":2,\"44\":1}}],[\"<\",{\"1\":{\"12\":1,\"19\":1,\"20\":1,\"21\":5,\"23\":1,\"32\":1,\"39\":2,\"44\":1,\"67\":4,\"68\":1,\"69\":3,\"70\":1,\"74\":1,\"79\":1,\"80\":1}}],[\"私有变量\",{\"1\":{\"10\":1}}],[\"公开变量\",{\"1\":{\"10\":1}}],[\"仅定义别名\",{\"1\":{\"9\":1}}],[\"nb\",{\"1\":{\"96\":1}}],[\"nationality\",{\"1\":{\"91\":4}}],[\"name2\",{\"1\":{\"10\":4}}],[\"name1\",{\"1\":{\"10\":4}}],[\"name\",{\"1\":{\"9\":1,\"10\":2,\"15\":1,\"34\":3}}],[\"newticker\",{\"1\":{\"70\":1}}],[\"new\",{\"0\":{\"99\":1},\"1\":{\"47\":3,\"48\":2,\"49\":2,\"50\":2,\"99\":4}}],[\"nil\",{\"1\":{\"36\":6}}],[\"n\",{\"1\":{\"35\":2,\"53\":3,\"87\":1,\"88\":1,\"99\":3,\"101\":5,\"103\":3}}],[\"now\",{\"1\":{\"79\":1}}],[\"not\",{\"1\":{\"55\":2}}],[\"normalerr\",{\"1\":{\"50\":4}}],[\"no\",{\"1\":{\"24\":4}}],[\"num\",{\"1\":{\"9\":2,\"23\":3,\"35\":2,\"83\":3}}],[\"su\",{\"1\":{\"91\":4}}],[\"sunday\",{\"1\":{\"18\":1}}],[\"sync\",{\"1\":{\"57\":1}}],[\"slice2\",{\"1\":{\"98\":11}}],[\"slice1\",{\"1\":{\"98\":11}}],[\"slicemapchannelsinterfacesfunctions\",{\"1\":{\"98\":1}}],[\"slice\",{\"1\":{\"36\":1,\"98\":1}}],[\"slicesmapchannel\",{\"1\":{\"99\":1}}],[\"slices\",{\"0\":{\"32\":1}}],[\"sleep\",{\"1\":{\"24\":1,\"79\":2,\"80\":3}}],[\"s\",{\"1\":{\"29\":1,\"47\":1,\"48\":1,\"49\":1,\"53\":4,\"74\":1,\"87\":1,\"91\":1,\"99\":3}}],[\"sizeof\",{\"1\":{\"96\":2}}],[\"simultaneously\",{\"1\":{\"74\":1}}],[\"signal\",{\"1\":{\"74\":1}}],[\"signed\",{\"1\":{\"26\":1}}],[\"sin\",{\"1\":{\"7\":3}}],[\"second\",{\"1\":{\"24\":1,\"47\":1,\"48\":3,\"49\":3,\"50\":2,\"53\":6,\"54\":6,\"55\":2,\"70\":1,\"79\":5,\"80\":3}}],[\"select\",{\"0\":{\"21\":1,\"69\":1},\"1\":{\"21\":3,\"69\":3,\"79\":1,\"80\":1}}],[\"start\",{\"1\":{\"24\":2,\"70\":1}}],[\"str\",{\"1\":{\"29\":3}}],[\"stringarrayintstructfloatbool\",{\"1\":{\"98\":1}}],[\"string\",{\"0\":{\"29\":1},\"1\":{\"9\":1,\"14\":4,\"15\":1,\"29\":2,\"33\":2,\"34\":1,\"36\":1,\"46\":1,\"50\":2,\"52\":3,\"53\":6,\"54\":6,\"55\":4,\"59\":4,\"77\":7,\"87\":1,\"88\":1,\"90\":2,\"91\":5,\"99\":2}}],[\"struct\",{\"0\":{\"15\":1,\"34\":1},\"1\":{\"9\":1,\"15\":2,\"34\":1,\"36\":1,\"50\":1,\"74\":1,\"91\":2}}],[\"saturday\",{\"1\":{\"18\":2}}],[\"switch\",{\"0\":{\"18\":1},\"1\":{\"18\":3}}],[\"这种常量只有值\",{\"1\":{\"87\":1}}],[\"这样可以节省内存空间\",{\"1\":{\"84\":1}}],[\"这样只会执行导入包的初始化函数\",{\"1\":{\"7\":1}}],[\"这些关键字用于控制程序运行流程\",{\"1\":{\"3\":1}}],[\"这些关键字用于声明一些特殊的复合类型\",{\"1\":{\"3\":1}}],[\"这些关键字用于声明代码中的各种元素\",{\"1\":{\"3\":1}}],[\"这些关键字不能用作程序标识符\",{\"1\":{\"3\":1}}],[\"导入本地可以直接使用函数\",{\"1\":{\"7\":1}}],[\"导入命令\",{\"1\":{\"7\":1}}],[\"multiple\",{\"1\":{\"74\":1}}],[\"methods\",{\"1\":{\"74\":1}}],[\"mike\",{\"1\":{\"59\":1}}],[\"monday\",{\"1\":{\"18\":1}}],[\"m\",{\"1\":{\"7\":2,\"14\":2,\"33\":4,\"52\":5,\"91\":1,\"99\":2,\"103\":3}}],[\"maxuint8\",{\"1\":{\"103\":1}}],[\"maxint8\",{\"1\":{\"103\":1}}],[\"man\",{\"1\":{\"91\":4}}],[\"may\",{\"1\":{\"74\":1}}],[\"main\",{\"1\":{\"18\":2,\"20\":2,\"21\":2,\"23\":4,\"24\":2,\"29\":2,\"32\":2,\"47\":2,\"48\":2,\"49\":2,\"50\":2,\"53\":2,\"54\":2,\"55\":2,\"59\":2,\"61\":2,\"62\":2,\"63\":2,\"70\":2,\"77\":2,\"79\":2,\"80\":2,\"88\":6,\"89\":1,\"90\":3,\"91\":2,\"98\":4,\"99\":4,\"101\":2,\"102\":2,\"103\":2}}],[\"map用组合字面量方式的定义和初始化如下\",{\"1\":{\"91\":1}}],[\"map\",{\"0\":{\"14\":1,\"33\":2,\"51\":1,\"52\":1,\"53\":1,\"56\":1},\"1\":{\"14\":7,\"33\":7,\"36\":1,\"52\":9,\"53\":5,\"54\":6,\"55\":3,\"56\":1,\"57\":2,\"85\":2,\"91\":1,\"99\":2}}],[\"make\",{\"0\":{\"99\":1},\"1\":{\"12\":2,\"14\":2,\"21\":2,\"33\":2,\"52\":4,\"53\":1,\"54\":1,\"55\":1,\"59\":2,\"61\":1,\"63\":1,\"66\":3,\"98\":2,\"99\":2}}],[\"math\",{\"1\":{\"7\":4,\"91\":1,\"103\":3}}],[\"male\",{\"1\":{\"5\":1}}],[\"使用过\",{\"0\":{\"106\":1}}],[\"使用指针传递的好处是直接传递变量的地址\",{\"1\":{\"104\":1}}],[\"使用值传递就不太合适\",{\"1\":{\"104\":1}}],[\"使用组合字面量会简单一些\",{\"1\":{\"91\":1}}],[\"使用括号\",{\"1\":{\"10\":1}}],[\"使用\",{\"1\":{\"7\":1,\"18\":1,\"19\":1,\"33\":1,\"35\":1,\"47\":2,\"48\":3,\"49\":5,\"50\":3,\"52\":2,\"53\":4,\"56\":1,\"59\":1,\"61\":2,\"62\":1,\"67\":2,\"68\":1,\"71\":1,\"77\":1,\"80\":1}}],[\"使用方法\",{\"1\":{\"7\":1}}],[\"使用其公开的标识符\",{\"1\":{\"7\":1}}],[\"支持单行和多行导入\",{\"1\":{\"7\":1}}],[\"支持多个返回值\",{\"1\":{\"6\":1}}],[\"不需要额外的空间\",{\"1\":{\"104\":1}}],[\"不需要包名\",{\"1\":{\"7\":1}}],[\"不会\",{\"1\":{\"101\":1}}],[\"不变\",{\"1\":{\"98\":1}}],[\"不同字面量可能同值吗\",{\"0\":{\"89\":1}}],[\"不能寻址的对象\",{\"1\":{\"85\":1}}],[\"不能修改\",{\"1\":{\"29\":1}}],[\"不包含\",{\"1\":{\"60\":1}}],[\"不是线程安全的\",{\"1\":{\"57\":1}}],[\"不定参数\",{\"1\":{\"6\":1}}],[\"不支持默认参数\",{\"1\":{\"6\":1}}],[\"为例来讲讲深拷贝和浅拷贝\",{\"1\":{\"98\":1}}],[\"为什么使用指针\",{\"0\":{\"84\":1}}],[\"为树形结构\",{\"1\":{\"75\":1}}],[\"为\",{\"1\":{\"33\":2,\"52\":2,\"68\":1}}],[\"为类型\",{\"1\":{\"6\":1}}],[\"为参数\",{\"1\":{\"6\":1}}],[\"为数据类型\",{\"1\":{\"5\":1,\"66\":1}}],[\"ptr\",{\"1\":{\"83\":3}}],[\"pointer\",{\"0\":{\"35\":1},\"1\":{\"36\":1}}],[\"panic\",{\"1\":{\"68\":1}}],[\"path\",{\"1\":{\"33\":2,\"52\":2}}],[\"package\",{\"0\":{\"8\":1},\"1\":{\"8\":1,\"18\":1,\"20\":1,\"21\":1,\"23\":2,\"24\":1,\"29\":1,\"32\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"53\":1,\"54\":1,\"55\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":1,\"70\":1,\"77\":1,\"79\":1,\"80\":1,\"88\":3,\"98\":2,\"99\":2,\"101\":1,\"102\":1,\"103\":1}}],[\"print\",{\"1\":{\"53\":6}}],[\"printf\",{\"1\":{\"29\":1,\"53\":3,\"88\":3,\"96\":1}}],[\"println\",{\"1\":{\"17\":2,\"18\":11,\"19\":5,\"20\":2,\"21\":2,\"23\":3,\"24\":3,\"32\":1,\"33\":1,\"34\":1,\"47\":1,\"48\":2,\"49\":4,\"50\":1,\"52\":1,\"53\":3,\"54\":2,\"55\":4,\"59\":1,\"60\":1,\"61\":1,\"62\":3,\"63\":2,\"69\":4,\"70\":2,\"77\":4,\"79\":2,\"80\":2,\"83\":3,\"89\":3,\"90\":2,\"98\":6,\"99\":5,\"101\":1,\"102\":3,\"103\":2}}],[\"person\",{\"1\":{\"15\":1}}],[\"p1\",{\"1\":{\"6\":1}}],[\"p\",{\"1\":{\"6\":4,\"41\":4}}],[\"is\",{\"0\":{\"49\":1},\"1\":{\"49\":4}}],[\"isnumber\",{\"1\":{\"30\":3}}],[\"i++\",{\"1\":{\"19\":1,\"21\":1}}],[\"i\",{\"1\":{\"19\":15,\"20\":5,\"21\":2,\"23\":4,\"32\":4}}],[\"ifelse\",{\"1\":{\"17\":1}}],[\"if\",{\"0\":{\"17\":1},\"1\":{\"17\":1,\"19\":2,\"20\":1,\"55\":2}}],[\"in\",{\"1\":{\"88\":1}}],[\"invalid\",{\"1\":{\"18\":1}}],[\"int64\",{\"1\":{\"36\":1}}],[\"int64uint64\",{\"1\":{\"26\":1}}],[\"int16\",{\"1\":{\"36\":1,\"88\":7}}],[\"int16uint16\",{\"1\":{\"26\":1}}],[\"int8\",{\"1\":{\"36\":1,\"88\":3,\"103\":1}}],[\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",{\"1\":{\"87\":1}}],[\"int8uint8\",{\"1\":{\"26\":1}}],[\"intuint\",{\"1\":{\"26\":1}}],[\"interview\",{\"0\":{\"114\":1,\"117\":1}}],[\"interface\",{\"0\":{\"13\":1},\"1\":{\"9\":1,\"13\":2,\"36\":1,\"46\":1,\"74\":3}}],[\"integers\",{\"1\":{\"26\":2}}],[\"int\",{\"0\":{\"26\":1},\"1\":{\"18\":1,\"19\":1,\"21\":3,\"26\":1,\"31\":1,\"32\":1,\"33\":2,\"35\":1,\"36\":1,\"52\":3,\"60\":1,\"61\":1,\"62\":1,\"63\":2,\"91\":3,\"98\":4,\"99\":2,\"101\":1,\"103\":1}}],[\"int32uint32\",{\"1\":{\"26\":1}}],[\"int32\",{\"1\":{\"9\":2,\"26\":1,\"36\":1,\"94\":1}}],[\"init\",{\"1\":{\"7\":1}}],[\"import\",{\"0\":{\"7\":1},\"1\":{\"7\":7,\"18\":1,\"20\":1,\"21\":1,\"23\":2,\"24\":1,\"29\":1,\"32\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"53\":1,\"54\":1,\"55\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":1,\"70\":1,\"77\":1,\"79\":1,\"80\":1,\"88\":3,\"89\":1,\"96\":1,\"98\":2,\"99\":2,\"101\":1,\"102\":1,\"103\":1}}],[\"iota\",{\"1\":{\"5\":2}}],[\"identifier2\",{\"1\":{\"5\":1}}],[\"identifier1\",{\"1\":{\"5\":1}}],[\"identifier\",{\"1\":{\"5\":1}}],[\"枚举\",{\"1\":{\"5\":1}}],[\"127\",{\"1\":{\"103\":1}}],[\"123\",{\"1\":{\"87\":1}}],[\"180\",{\"1\":{\"91\":2}}],[\"14\",{\"1\":{\"90\":1}}],[\"16进制\",{\"1\":{\"89\":1}}],[\"16\",{\"1\":{\"26\":1}}],[\"10进制\",{\"1\":{\"89\":1}}],[\"1010\",{\"1\":{\"41\":2}}],[\"1011\",{\"1\":{\"41\":2}}],[\"10\",{\"1\":{\"14\":2,\"19\":1,\"20\":1,\"21\":1,\"32\":1,\"35\":1,\"38\":1,\"52\":1,\"59\":1,\"67\":1,\"87\":2,\"90\":1,\"99\":1}}],[\"1000\",{\"1\":{\"38\":1,\"41\":1}}],[\"100\",{\"1\":{\"5\":1}}],[\"1\",{\"1\":{\"5\":1,\"18\":2,\"19\":2,\"20\":1,\"21\":1,\"23\":1,\"24\":2,\"31\":1,\"32\":1,\"41\":10,\"44\":1,\"48\":1,\"60\":1,\"62\":4,\"63\":3,\"79\":2,\"96\":1,\"101\":3,\"102\":2,\"103\":1}}],[\"0xc00000a0d8\",{\"1\":{\"99\":1}}],[\"0xc00008a030\",{\"1\":{\"99\":1}}],[\"0xc000086020\",{\"1\":{\"83\":1}}],[\"0x15\",{\"1\":{\"89\":2}}],[\"0101\",{\"1\":{\"89\":2}}],[\"0111\",{\"1\":{\"41\":2}}],[\"0110\",{\"1\":{\"41\":2}}],[\"0b0001\",{\"1\":{\"89\":2}}],[\"0o25\",{\"1\":{\"89\":2}}],[\"0001\",{\"1\":{\"41\":2}}],[\"0000\",{\"1\":{\"41\":2}}],[\"0011\",{\"1\":{\"41\":1}}],[\"0+0i\",{\"1\":{\"36\":1}}],[\"0\",{\"1\":{\"5\":1,\"17\":1,\"20\":2,\"21\":3,\"23\":1,\"26\":2,\"32\":2,\"36\":6,\"41\":12,\"60\":1,\"61\":5,\"62\":4,\"63\":3,\"95\":1,\"98\":6,\"99\":1,\"103\":2}}],[\"fast\",{\"1\":{\"90\":2}}],[\"false\",{\"1\":{\"30\":2,\"36\":1,\"39\":9,\"40\":8,\"49\":1,\"68\":1}}],[\"fallthrough\",{\"0\":{\"18\":1},\"1\":{\"18\":7}}],[\"fourth\",{\"1\":{\"55\":1}}],[\"for\",{\"0\":{\"19\":1,\"101\":2},\"1\":{\"19\":8,\"20\":1,\"21\":2,\"23\":1,\"32\":1,\"53\":3,\"79\":1,\"80\":1,\"101\":2}}],[\"float64\",{\"1\":{\"27\":1,\"36\":1}}],[\"float32float64\",{\"1\":{\"87\":1}}],[\"float32\",{\"1\":{\"27\":1,\"36\":1}}],[\"float\",{\"0\":{\"27\":1}}],[\"flag\",{\"1\":{\"7\":2}}],[\"finish\",{\"1\":{\"70\":1}}],[\"first\",{\"1\":{\"47\":1,\"48\":3,\"49\":3,\"50\":1,\"53\":6,\"54\":5,\"55\":3}}],[\"fibonacci\",{\"1\":{\"21\":2}}],[\"file\",{\"1\":{\"13\":1}}],[\"friday\",{\"1\":{\"18\":2}}],[\"fmt\",{\"1\":{\"7\":1,\"17\":2,\"18\":12,\"19\":5,\"20\":3,\"21\":3,\"23\":5,\"24\":4,\"29\":2,\"32\":2,\"33\":1,\"34\":1,\"47\":5,\"48\":5,\"49\":7,\"50\":2,\"52\":1,\"53\":7,\"54\":3,\"55\":5,\"59\":2,\"60\":1,\"61\":2,\"62\":4,\"63\":3,\"69\":4,\"70\":3,\"77\":5,\"79\":3,\"80\":3,\"83\":3,\"88\":6,\"89\":4,\"90\":2,\"96\":1,\"98\":8,\"99\":7,\"101\":2,\"102\":4,\"103\":3}}],[\"func\",{\"0\":{\"6\":1},\"1\":{\"6\":4,\"18\":1,\"20\":1,\"21\":3,\"23\":3,\"24\":3,\"29\":1,\"32\":1,\"36\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":2,\"53\":1,\"54\":1,\"55\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":1,\"70\":1,\"77\":1,\"79\":2,\"80\":2,\"88\":3,\"89\":1,\"90\":4,\"91\":2,\"98\":2,\"99\":2,\"101\":1,\"102\":4,\"103\":1}}],[\"function\",{\"1\":{\"3\":1}}],[\"female\",{\"1\":{\"5\":1}}],[\"black\",{\"1\":{\"91\":2}}],[\"basic\",{\"0\":{\"112\":1,\"115\":1}}],[\"baseval\",{\"1\":{\"77\":5}}],[\"base\",{\"1\":{\"77\":1}}],[\"background\",{\"1\":{\"76\":1,\"77\":5,\"79\":1,\"80\":1}}],[\"by\",{\"1\":{\"74\":1}}],[\"byte\",{\"0\":{\"93\":1,\"96\":1},\"1\":{\"26\":1,\"36\":1,\"93\":1,\"94\":1,\"95\":2,\"96\":1,\"97\":1}}],[\"be\",{\"1\":{\"74\":1}}],[\"beginindex\",{\"1\":{\"60\":2}}],[\"boundaries\",{\"1\":{\"74\":1}}],[\"bool\",{\"0\":{\"30\":1},\"1\":{\"13\":2,\"30\":2,\"36\":1,\"74\":1,\"87\":1}}],[\"break\",{\"0\":{\"19\":1},\"1\":{\"18\":1,\"19\":3}}],[\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",{\"1\":{\"3\":1}}],[\"buffer\",{\"1\":{\"13\":2}}],[\"b\",{\"1\":{\"5\":2,\"13\":2,\"38\":6,\"39\":7,\"40\":3,\"41\":4,\"42\":11,\"95\":1,\"96\":3,\"98\":2}}],[\"address\",{\"1\":{\"90\":1}}],[\"add\",{\"1\":{\"79\":1}}],[\"api\",{\"1\":{\"74\":1}}],[\"append\",{\"1\":{\"32\":1,\"62\":3,\"63\":1,\"101\":1}}],[\"across\",{\"1\":{\"74\":1}}],[\"arr\",{\"1\":{\"60\":1}}],[\"array\",{\"0\":{\"31\":1},\"1\":{\"19\":4}}],[\"and\",{\"1\":{\"53\":2,\"74\":1}}],[\"animal\",{\"1\":{\"9\":1,\"34\":2}}],[\"assignment\",{\"1\":{\"88\":1}}],[\"as\",{\"0\":{\"50\":1},\"1\":{\"50\":2,\"88\":1}}],[\"ascii\",{\"1\":{\"26\":1,\"95\":2}}],[\"a++\",{\"1\":{\"38\":1}}],[\"a\",{\"1\":{\"5\":2,\"17\":1,\"18\":2,\"34\":2,\"38\":7,\"39\":7,\"40\":4,\"41\":6,\"42\":31,\"74\":3,\"88\":8,\"95\":1,\"96\":4,\"98\":2}}],[\"如何避免\",{\"1\":{\"103\":1}}],[\"如什么是拷贝提问里易知\",{\"1\":{\"98\":1}}],[\"如下\",{\"1\":{\"98\":2}}],[\"如下十进制的数值\",{\"1\":{\"89\":1}}],[\"如下字符串都是字符串字面量\",{\"1\":{\"87\":1}}],[\"如链表\",{\"1\":{\"84\":1}}],[\"如果传入的结构体非常大\",{\"1\":{\"104\":1}}],[\"如果\",{\"0\":{\"101\":1}}],[\"如果往一个已经\",{\"1\":{\"68\":1}}],[\"如果想创建两个相同数据的切片\",{\"1\":{\"63\":1}}],[\"如果将一个切片赋值给另一个变量\",{\"1\":{\"63\":1}}],[\"如果同时多个通道收到数据\",{\"1\":{\"21\":1}}],[\"如\",{\"1\":{\"5\":1,\"42\":1,\"67\":2,\"87\":1,\"103\":1}}],[\"编译器会自己推断\",{\"1\":{\"5\":1}}],[\"==\",{\"1\":{\"19\":1,\"20\":1,\"39\":2,\"44\":1,\"89\":3}}],[\"=range\",{\"1\":{\"19\":3}}],[\"=0\",{\"1\":{\"19\":1}}],[\"=\",{\"1\":{\"5\":6,\"9\":1,\"10\":4,\"12\":2,\"14\":2,\"18\":2,\"19\":2,\"20\":1,\"21\":5,\"23\":2,\"28\":2,\"29\":2,\"30\":2,\"31\":1,\"32\":2,\"33\":2,\"34\":1,\"35\":2,\"39\":2,\"40\":2,\"42\":22,\"44\":1,\"47\":2,\"48\":3,\"49\":3,\"50\":3,\"52\":3,\"53\":8,\"54\":5,\"55\":6,\"59\":3,\"60\":1,\"61\":1,\"62\":3,\"63\":3,\"66\":2,\"68\":1,\"69\":1,\"70\":1,\"76\":2,\"77\":4,\"79\":1,\"80\":1,\"83\":3,\"87\":2,\"88\":8,\"90\":1,\"91\":6,\"95\":2,\"96\":2,\"98\":10,\"99\":3,\"101\":3,\"103\":2}}],[\"用于给任意的类型分配内存地址\",{\"1\":{\"99\":1}}],[\"用于表示\",{\"1\":{\"95\":2}}],[\"用于端到端数据的通信\",{\"1\":{\"65\":1}}],[\"用于存储\",{\"1\":{\"26\":2}}],[\"用于创建协程\",{\"1\":{\"24\":1}}],[\"用于函数\",{\"1\":{\"23\":1}}],[\"用于终止函数的执行并返回0个或多个返回值\",{\"1\":{\"23\":1}}],[\"用于跳过当前循环的剩余语句\",{\"1\":{\"19\":1}}],[\"用于循环执行动作\",{\"1\":{\"19\":1}}],[\"用于根据不同条件执行不同的动作\",{\"1\":{\"18\":1}}],[\"用于条件判断\",{\"1\":{\"17\":1}}],[\"用于接收\",{\"1\":{\"12\":1}}],[\"用于发送\",{\"1\":{\"12\":1}}],[\"用于发送和接收\",{\"1\":{\"12\":1}}],[\"用于定义\",{\"1\":{\"73\":1}}],[\"用于定义变量类型\",{\"1\":{\"9\":1}}],[\"用于定义包名\",{\"1\":{\"8\":1}}],[\"用于导入包\",{\"1\":{\"7\":1}}],[\"用于声明结构体\",{\"1\":{\"15\":1}}],[\"用于声明集合\",{\"1\":{\"14\":1}}],[\"用于声明接口\",{\"1\":{\"13\":1}}],[\"用于声明信道\",{\"1\":{\"12\":1}}],[\"用于声明公开或者私有变量\",{\"1\":{\"10\":1}}],[\"用于声明函数\",{\"1\":{\"6\":1}}],[\"用于声明常量\",{\"1\":{\"5\":1}}],[\"用于修饰特殊的\",{\"1\":{\"3\":1}}],[\"take\",{\"1\":{\"90\":1}}],[\"tamp\",{\"1\":{\"83\":2}}],[\"todo\",{\"1\":{\"76\":2}}],[\"the\",{\"1\":{\"90\":1}}],[\"third\",{\"1\":{\"53\":6,\"54\":6,\"55\":2}}],[\"thursday\",{\"1\":{\"18\":2}}],[\"time\",{\"1\":{\"24\":3,\"70\":3,\"74\":2,\"79\":11,\"80\":7}}],[\"tiger\",{\"1\":{\"9\":1}}],[\"tuesday\",{\"1\":{\"18\":1}}],[\"type\",{\"0\":{\"9\":1},\"1\":{\"9\":5,\"13\":1,\"15\":1,\"34\":1,\"46\":1,\"50\":1,\"74\":1,\"77\":7,\"88\":3,\"91\":2}}],[\"t5\",{\"1\":{\"6\":1}}],[\"t4\",{\"1\":{\"6\":1}}],[\"t3\",{\"1\":{\"6\":1}}],[\"t2\",{\"1\":{\"6\":1}}],[\"t1\",{\"1\":{\"6\":2}}],[\"test\",{\"1\":{\"6\":3}}],[\"true\",{\"1\":{\"5\":1,\"30\":2,\"39\":9,\"40\":8,\"49\":2}}],[\"t\",{\"1\":{\"3\":1,\"5\":2,\"6\":4,\"10\":4,\"12\":8,\"50\":3,\"66\":3,\"70\":2,\"88\":9,\"90\":2}}],[\"注意避免死锁问题\",{\"1\":{\"71\":1}}],[\"注意事项\",{\"0\":{\"71\":1}}],[\"注意\",{\"1\":{\"3\":2,\"23\":1,\"66\":1,\"68\":1,\"79\":1}}],[\"功能修饰\",{\"0\":{\"22\":1},\"1\":{\"3\":1}}],[\"流程控制\",{\"0\":{\"16\":1},\"1\":{\"3\":1}}],[\"ctx3val\",{\"1\":{\"77\":2}}],[\"ctx3\",{\"1\":{\"77\":3}}],[\"ctx1val\",{\"1\":{\"77\":2}}],[\"ctx1\",{\"1\":{\"77\":3,\"79\":2,\"80\":2}}],[\"ctx2val\",{\"1\":{\"77\":2}}],[\"ctx2\",{\"1\":{\"76\":1,\"77\":3}}],[\"ctx\",{\"1\":{\"76\":1,\"77\":5,\"79\":2,\"80\":2}}],[\"cannot\",{\"1\":{\"88\":1,\"90\":1}}],[\"canceled\",{\"1\":{\"80\":2}}],[\"cancelation\",{\"1\":{\"74\":1}}],[\"cancel\",{\"1\":{\"73\":1,\"75\":1,\"80\":3,\"106\":1}}],[\"called\",{\"1\":{\"74\":1}}],[\"carries\",{\"1\":{\"74\":1}}],[\"capacity\",{\"1\":{\"100\":1}}],[\"cap\",{\"1\":{\"61\":2}}],[\"case\",{\"1\":{\"18\":13,\"21\":4,\"69\":3,\"79\":1,\"80\":1}}],[\"colours\",{\"1\":{\"91\":1}}],[\"colour\",{\"1\":{\"88\":1}}],[\"copy\",{\"1\":{\"63\":2,\"98\":2}}],[\"complexdata2\",{\"1\":{\"28\":1}}],[\"complexdata\",{\"1\":{\"28\":1}}],[\"complex128\",{\"1\":{\"28\":1,\"36\":1}}],[\"complex64complex128\",{\"1\":{\"87\":1}}],[\"complex64\",{\"1\":{\"28\":2,\"36\":1}}],[\"complex\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"concepts\",{\"0\":{\"109\":1,\"111\":1}}],[\"context\",{\"0\":{\"72\":1,\"74\":1,\"106\":2},\"1\":{\"73\":2,\"74\":3,\"75\":2,\"76\":4,\"77\":12,\"78\":2,\"79\":8,\"80\":6,\"106\":2}}],[\"continue\",{\"0\":{\"19\":1},\"1\":{\"19\":3}}],[\"const\",{\"0\":{\"5\":1},\"1\":{\"5\":6,\"88\":5}}],[\"constfuncimportpackagetypevar\",{\"1\":{\"3\":1}}],[\"close\",{\"1\":{\"13\":1,\"68\":5}}],[\"chinese\",{\"1\":{\"91\":1}}],[\"china\",{\"1\":{\"91\":2}}],[\"ch3\",{\"1\":{\"69\":3}}],[\"ch2\",{\"1\":{\"66\":1,\"69\":3}}],[\"ch1\",{\"1\":{\"66\":1,\"69\":3}}],[\"ch\",{\"1\":{\"12\":2,\"67\":2,\"68\":2}}],[\"chan<\",{\"1\":{\"12\":1}}],[\"channel\",{\"0\":{\"66\":1,\"68\":1,\"107\":1},\"1\":{\"12\":1,\"65\":1,\"66\":1,\"67\":3,\"68\":4,\"69\":4,\"70\":1,\"71\":1,\"107\":2}}],[\"chan\",{\"0\":{\"12\":1},\"1\":{\"12\":5,\"21\":3,\"36\":1,\"66\":2,\"74\":1}}],[\"chaninterfacemapstruct\",{\"1\":{\"3\":1}}],[\"c\",{\"1\":{\"5\":2,\"21\":5,\"29\":1,\"42\":1,\"70\":1}}],[\"声明对象\",{\"1\":{\"91\":1}}],[\"声明和属性赋值\",{\"1\":{\"91\":1}}],[\"声明多个相同类型的变量\",{\"1\":{\"10\":2}}],[\"声明多个\",{\"1\":{\"5\":1}}],[\"声明常量必须指定初始值\",{\"1\":{\"5\":1}}],[\"声明类型关键字\",{\"0\":{\"4\":1}}],[\"声明\",{\"1\":{\"3\":1,\"33\":1,\"52\":1}}],[\"类型能表示的值是有限的\",{\"1\":{\"97\":1}}],[\"类型不同\",{\"0\":{\"94\":1}}],[\"类型不同会报错\",{\"1\":{\"88\":1}}],[\"类型的接口\",{\"1\":{\"46\":1}}],[\"类型的数据的信道\",{\"1\":{\"12\":3}}],[\"类型名称为\",{\"1\":{\"29\":1,\"30\":1}}],[\"类型\",{\"1\":{\"3\":1,\"26\":2,\"27\":1,\"28\":1,\"36\":1,\"46\":1,\"97\":1,\"98\":2}}],[\"有哪些使用场景\",{\"0\":{\"106\":1}}],[\"有什么区别\",{\"0\":{\"93\":1,\"99\":1}}],[\"有类型常量\",{\"1\":{\"88\":1}}],[\"有缓冲区的信道在发送的数据达到缓冲区大小后才会被阻塞\",{\"1\":{\"66\":1}}],[\"有三种方式可以创建切片\",{\"1\":{\"59\":1}}],[\"有符号数包含正数和负数\",{\"1\":{\"26\":1}}],[\"有符号数\",{\"1\":{\"26\":1}}],[\"有\",{\"1\":{\"3\":1}}],[\"保留关键字\",{\"0\":{\"2\":1,\"3\":1}}],[\"面试常见问题\",{\"1\":{\"1\":1}}],[\"本栏目主要提供\",{\"1\":{\"1\":1}}],[\"介绍\",{\"0\":{\"1\":1,\"65\":1,\"73\":1},\"1\":{\"3\":1,\"26\":1,\"106\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
