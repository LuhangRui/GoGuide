const V=Object.entries,nt=Object.fromEntries,ot="ENTRIES",T="KEYS",R="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case R:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),A=Math.min(i-1,a+s);for(let F=f;F<A;++F){const v=g!==t[F],z=o[p+F]+ +v,y=o[p+F+1]+1,w=o[m+F]+1,L=o[m+F+1]=Math.min(z,y,w);L<l&&(l=L)}if(l>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=M(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,it(this._tree,t)}entries(){return new D(this,ot)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,R)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},it=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)q(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},q=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)q(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=M(e);n.set(o+t,s),n.delete(o)},M=e=>e[e.length-1],rt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},ct=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",lt="and_not",ht=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,dt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},H=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,at={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[lt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},ft=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},gt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},mt=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,dt),u=o.get(t);u==null||u.get(s)==null?J(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},pt={k:1.2,b:.7,d:.5},Ft={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(ct),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},U={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:pt},_t={combineWith:P,prefix:(e,t,s)=>t===s.length-1},At={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={...At,...Y},X=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(at[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){mt(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const A=g.get(l),F=e._fieldLength.get(l)[h],v=ft(A,m,e._documentCount,F,p,r),z=n*a*f*v,y=d.get(l);if(y){y.score+=z,ht(y.terms,t);const w=H(y.match,s);w?w.push(c):y.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:H(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...U.weights,...i},h=e._index.get(t.term),g=B(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const A=l.length-t.term.length;if(!A)continue;p?.delete(l);const F=a*l.length/(l.length+.3*A);B(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,A]=p.get(l);if(!A)continue;const F=c*l.length/(l.length+A);B(e,t.term,l,F,f,o,u,d,g)}return g},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>K(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(gt(i)).map(a=>Ct(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class zt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...Ft,...t,autoVacuum:s,searchOptions:{...U,...t.searchOptions||{}},autoSuggestOptions:{..._t,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const wt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new zt(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),bt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return Q(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(A=>!A.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>j(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>j(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const A=m.map(F=>j(f,F)).filter(F=>F!==null);A.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:A},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):bt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=rt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),k=nt(V(JSON.parse("{\"/en/\":{\"documentCount\":141,\"nextId\":141,\"documentIds\":{\"0\":\"3\",\"1\":\"3#introduce\",\"2\":\"15\",\"3\":\"15#relationship-keys\",\"4\":\"15#table-join\",\"5\":\"15#table-join-diagram\",\"6\":\"15#course\",\"7\":\"15#student\",\"8\":\"15#inner-join\",\"9\":\"15#outer-join\",\"10\":\"15#left-join\",\"11\":\"15#right-join\",\"12\":\"15#full-outer-join\",\"13\":\"16\",\"14\":\"16#keywords\",\"15\":\"16#declaration-types\",\"16\":\"16#const\",\"17\":\"16#func\",\"18\":\"16#import\",\"19\":\"16#package\",\"20\":\"16#type\",\"21\":\"16#var\",\"22\":\"16#composite-types\",\"23\":\"16#chan\",\"24\":\"16#interface\",\"25\":\"16#map\",\"26\":\"16#struct\",\"27\":\"16#control-flow\",\"28\":\"16#if-else\",\"29\":\"16#switch-fallthrough\",\"30\":\"16#for-break-continue-range\",\"31\":\"16#goto\",\"32\":\"16#select\",\"33\":\"16#function-modifiers\",\"34\":\"16#defer\",\"35\":\"16#go\",\"36\":\"17\",\"37\":\"17#integers-int\",\"38\":\"17#floating-point-numbers-float\",\"39\":\"17#complex-numbers-complex\",\"40\":\"17#strings-string\",\"41\":\"17#booleans-bool\",\"42\":\"17#arrays-array\",\"43\":\"17#slices-slices\",\"44\":\"17#map-map\",\"45\":\"17#structures-struct\",\"46\":\"17#pointers-pointer\",\"47\":\"17#zero-value-table\",\"48\":\"18\",\"49\":\"18#arithmetic-operators\",\"50\":\"18#relational-operators\",\"51\":\"18#logical-operators\",\"52\":\"18#bitwise-operators\",\"53\":\"18#assignment-operators\",\"54\":\"18#other-symbols\",\"55\":\"18#symbol-precedence\",\"56\":\"19\",\"57\":\"19#interface\",\"58\":\"19#creating-errors\",\"59\":\"19#errors-join\",\"60\":\"19#errors-is\",\"61\":\"19#errors-as\",\"62\":\"20\",\"63\":\"20#creating-a-map\",\"64\":\"20#traversing-a-map\",\"65\":\"20#deleting-key-value-pairs\",\"66\":\"20#check-if-a-key-exists\",\"67\":\"20#get-the-length-of-a-map\",\"68\":\"20#concurrency\",\"69\":\"21\",\"70\":\"21#creating-slices\",\"71\":\"21#slicing-slices\",\"72\":\"21#length-and-capacity\",\"73\":\"21#appending-data\",\"74\":\"21#cloning-slices\",\"75\":\"22\",\"76\":\"22#introduction\",\"77\":\"22#creating-a-channel\",\"78\":\"22#sending-and-receiving-data\",\"79\":\"22#closing-a-channel\",\"80\":\"22#select\",\"81\":\"22#example\",\"82\":\"22#precautions\",\"83\":\"23\",\"84\":\"23#introduction\",\"85\":\"23#context-interface\",\"86\":\"23#root-nodes-and-derived-nodes\",\"87\":\"23#creating-root-nodes\",\"88\":\"23#creating-derived-nodes\",\"89\":\"23#withvalue\",\"90\":\"23#withdeadline-withtimeout\",\"91\":\"23#withcancel\",\"92\":\"24\",\"93\":\"24#osi-seven-layer-model\",\"94\":\"24#tcp-and-ip-model\",\"95\":\"24#http\",\"96\":\"24#request-methods\",\"97\":\"24#http-status-codes\",\"98\":\"24#https-vs-http\",\"99\":\"24#working-principle\",\"100\":\"24#http-1-0-vs-1-1-vs-2-0\",\"101\":\"24#digital-certificate\",\"102\":\"24#how-digital-signature-works\",\"103\":\"25\",\"104\":\"25#tcp\",\"105\":\"25#tcp-header-structure\",\"106\":\"25#tcp-state-machine\",\"107\":\"25#tcp-three-way-handshake\",\"108\":\"28\",\"109\":\"28#pointer\",\"110\":\"28#what-is-a-pointer-and-a-pointer-variable\",\"111\":\"28#why-use-pointers\",\"112\":\"28#which-objects-can-be-addressed-and-which-cannot\",\"113\":\"28#literal\",\"114\":\"28#what-does-literal-mean\",\"115\":\"28#can-different-literals-have-the-same-value\",\"116\":\"28#what-is-the-difference-between-a-literal-and-a-variable\",\"117\":\"28#what-is-a-composite-literal\",\"118\":\"28#others\",\"119\":\"28#what-is-the-difference-between-rune-and-byte-in-go\",\"120\":\"28#different-types\",\"121\":\"28#different-stored-characters\",\"122\":\"28#different-byte-sizes-occupied-byte-occupies-1-byte-rune-occupies-4-bytes\",\"123\":\"28#different-character-ranges-represented\",\"124\":\"28#what-are-deep-copy-and-shallow-copy-in-golang\",\"125\":\"28#what-s-the-difference-between-make-and-new\",\"126\":\"28#what-s-the-difference-between-arrays-and-slices\",\"127\":\"28#if-for-range-adds-data-at-the-same-time-will-for-range-execute-indefinitely\",\"128\":\"28#what-is-the-execution-order-of-multiple-defers\",\"129\":\"28#what-is-data-overflow\",\"130\":\"28#should-function-parameters-use-value-or-pointer\",\"131\":\"28#map\",\"132\":\"28#can-an-uninitialized-map-read-a-key\",\"133\":\"28#what-happens-if-you-assign-a-value-to-an-uninitialized-map\",\"134\":\"28#what-happens-if-you-delete-a-key-from-an-uninitialized-map\",\"135\":\"29\",\"136\":\"29#have-you-used-context-what-are-the-use-cases-for-context\",\"137\":\"29#is-channel-thread-safe\",\"138\":\"29#is-the-traversal-of-a-map-using-range-ordered-or-unordered\",\"139\":\"29#is-map-concurrency-safe\",\"140\":\"29#will-the-memory-of-a-key-be-released-after-the-key-is-deleted-from-the-map\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,13],\"2\":[2],\"3\":[2,94],\"4\":[2,51],\"5\":[3,14],\"6\":[1,12],\"7\":[1,56],\"8\":[2,69],\"9\":[2],\"10\":[2,74],\"11\":[2,64],\"12\":[3,123],\"13\":[1],\"14\":[1,47],\"15\":[2],\"16\":[1,55],\"17\":[1,32],\"18\":[1,57],\"19\":[1,8],\"20\":[1,27],\"21\":[1,33],\"22\":[2],\"23\":[1,26],\"24\":[1,16],\"25\":[1,36],\"26\":[1,17],\"27\":[2],\"28\":[1,21],\"29\":[1,76],\"30\":[1,50],\"31\":[1,38],\"32\":[1,54],\"33\":[2],\"34\":[1,62],\"35\":[1,33],\"36\":[2],\"37\":[3,60],\"38\":[5,14],\"39\":[4,39],\"40\":[3,44],\"41\":[3,18],\"42\":[3,30],\"43\":[3,43],\"44\":[3,42],\"45\":[3,24],\"46\":[3,34],\"47\":[3,41],\"48\":[1],\"49\":[2,25],\"50\":[2,35],\"51\":[2,21],\"52\":[2,39],\"53\":[2,30],\"54\":[2,5],\"55\":[2,29],\"56\":[2],\"57\":[1,17],\"58\":[2,31],\"59\":[2,37],\"60\":[2,45],\"61\":[2,48],\"62\":[1],\"63\":[3,44],\"64\":[3,45],\"65\":[4,36],\"66\":[5,30],\"67\":[6,11],\"68\":[1,20],\"69\":[1],\"70\":[2,39],\"71\":[2,23],\"72\":[3,30],\"73\":[2,32],\"74\":[2,64],\"75\":[1],\"76\":[1,16],\"77\":[3,34],\"78\":[4,19],\"79\":[3,44],\"80\":[1,40],\"81\":[1,28],\"82\":[1,16],\"83\":[1],\"84\":[1,49],\"85\":[2,38],\"86\":[4,32],\"87\":[3,12],\"88\":[3,29],\"89\":[2,21],\"90\":[3,47],\"91\":[2,40],\"92\":[2],\"93\":[4,118],\"94\":[4,84],\"95\":[1],\"96\":[2,76],\"97\":[3,254],\"98\":[3,68],\"99\":[2,96],\"100\":[5,73],\"101\":[2,141],\"102\":[4,142],\"103\":[2],\"104\":[1,17],\"105\":[3,194],\"106\":[3,2],\"107\":[4,181],\"108\":[1],\"109\":[1],\"110\":[7,44],\"111\":[4,87],\"112\":[9,35],\"113\":[1],\"114\":[5,64],\"115\":[8,40],\"116\":[10,59],\"117\":[6,104],\"118\":[1],\"119\":[9,21],\"120\":[3,10],\"121\":[4,28],\"122\":[10,21],\"123\":[5,29],\"124\":[9,111],\"125\":[7,43],\"126\":[9,46],\"127\":[11,38],\"128\":[9,25],\"129\":[5,61],\"130\":[8,76],\"131\":[1],\"132\":[8,36],\"133\":[12,24],\"134\":[12,29],\"135\":[1],\"136\":[10,36],\"137\":[4,15],\"138\":[12,40],\"139\":[5,19],\"140\":[14,49]},\"averageFieldLength\":[3.205673758865248,45.49720179103401],\"storedFields\":{\"0\":{\"h\":\"Guide\"},\"1\":{\"h\":\"Introduce\",\"t\":[\"This website mainly provides Golang interview frequently asked questions and basic knowledge.\"]},\"2\":{\"h\":\"Database basic\"},\"3\":{\"h\":\"Relationship Keys\",\"t\":[\"Relationship keys are used to identify each row in a data table or to identify relationships with other tables\",\"Relationship Key\",\"Description\",\"Primary Key (Unique Key)\",\"The primary key is the field used to uniquely identify in the data column, cannot be null, and a table can only have one primary key\",\"Super Key\",\"The super key is all attribute sets that can uniquely identify the data column, i.e., if any single or multiple fields can also uniquely identify the data column, they all belong to the super key\",\"Candidate Key\",\"The candidate key is a subset of the super key, the candidate key is the super key without redundant fields, and any field removed from the candidate key does not belong to the super key\",\"Foreign Key\",\"The foreign key is used to establish relationships between tables, such as if the primary key of table A is a field of table B, then the primary key field of table A in table B is a foreign key\",\"Warning\",\"The difference between the primary key and the unique key:\",\"A table can only have one primary key, but can have multiple unique keys\",\"The primary key cannot be null, the unique key can be null\",\"Example\",\"Assume there are two tables\",\"student\",\"teacher\",\"id\",\"id\",\"name\",\"name\",\"age\",\"age\",\"identify_card (ID number)\",\"teacher_id\",\"Primary Key: student.idteacher.id\",\"Super Key: For example, in the student table: (student.id, student.name),(student.id, student.name, student.age) ... Any combination with the primary key and ID number is a super key\",\"Candidate Key: For example, in the student table: student.idstudent.identify_card\",\"Foreign Key: student.teacher_id\"]},\"4\":{\"h\":\"Table Join\",\"t\":[\"To learn about table join, you first need to understand Cartesian Product\",\"Cartesian Product\",\"The Cartesian product refers to the set of all elements in X, Y where all elements in X are multiplied by all elements in Y, also known as direct product\",\"For example, X={a,b}Y={1,2} then the Cartesian product of X and Y is\",\"Z={(a,1),(a,2),(b,1),(b,2)}\",\"Table join is the result of filtering the Cartesian product between two tables through conditions\"]},\"5\":{\"h\":\"Table Join Diagram\",\"t\":[\"sql-join\",\"Sample Table\",\"Sample Table\",\"The following queries are all around this sample table:\"]},\"6\":{\"h\":\"course\",\"t\":[\"id\",\"title\",\"1\",\"Math\",\"2\",\"Art\",\"3\",\"Music\",\"4\",\"Geography\",\"15\",\"Sport\"]},\"7\":{\"h\":\"student\",\"t\":[\"id\",\"name\",\"age\",\"course_id\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"4\",\"Jamie Romero\",\"12\",\"5\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"7\",\"Alan Sanchez\",\"11\",\"9\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"9\",\"Bobby Burns\",\"12\",\"8\",\"10\",\"Glenn Adams\",\"11\",\"5\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"12\",\"Justin Rogers\",\"13\",\"8\",\"Warning\",\"Generally, we call the first table the driving table and the second table the driven table. In the example, student is the driving table and course is the driven table.\"]},\"8\":{\"h\":\"Inner Join\",\"t\":[\"The inner join inner join is equivalent to join, used to return only matching rows.\",\"The following three methods are the same\",\"select * from a,b; select * from a join b; select * from a inner join b; \",\"Example\",\"select * from student s inner join course c on s.course_id=c.id; \",\"Result\",\"id\",\"name\",\"age\",\"course_id\",\"id(1)\",\"title\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"1\",\"Math\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"2\",\"Art\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"2\",\"Art\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"3\",\"Music\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"3\",\"Music\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"4\",\"Geography\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"4\",\"Geography\",\"You can see that only the data columns that satisfy s.course_id=c.id are returned\"]},\"9\":{\"h\":\"Outer Join\"},\"10\":{\"h\":\"Left Join\",\"t\":[\"select * from student s left join course c on s.course_id=c.id; \",\"Result\",\"id\",\"name\",\"age\",\"course_id\",\"id(1)\",\"title\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"1\",\"Math\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"2\",\"Art\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"2\",\"Art\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"3\",\"Music\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"3\",\"Music\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"4\",\"Geography\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"4\",\"Geography\",\"10\",\"Glenn Adams\",\"11\",\"5\",\"4\",\"Jamie Romero\",\"12\",\"5\",\"12\",\"Justin Rogers\",\"13\",\"8\",\"9\",\"Bobby Burns\",\"12\",\"8\",\"7\",\"Alan Sanchez\",\"11\",\"9\",\"Info\",\"You can see that not only the data columns that satisfy s.course_id=c.id are returned, but also other unmatched data from the driving table are returned\"]},\"11\":{\"h\":\"Right Join\",\"t\":[\"select * from student s right join course c on s.course_id=c.id; \",\"Result\",\"id\",\"name\",\"age\",\"course_id\",\"id(1)\",\"title\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"1\",\"Math\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"2\",\"Art\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"2\",\"Art\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"3\",\"Music\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"3\",\"Music\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"4\",\"Geography\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"4\",\"Geography\",\"15\",\"Sport\",\"Info\",\"You can see that not only the data columns that satisfy s.course_id=c.id are returned, but also other unmatched data from the driven table are returned\"]},\"12\":{\"h\":\"Full Outer Join\",\"t\":[\"select * from student s full outer join course c on s.course_id=c.id; \",\"Result\",\"id\",\"name\",\"age\",\"course_id\",\"id(1)\",\"title\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"1\",\"Math\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"2\",\"Art\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"2\",\"Art\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"3\",\"Music\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"3\",\"Music\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"4\",\"Geography\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"4\",\"Geography\",\"15\",\"Sport\",\"10\",\"Glenn Adams\",\"11\",\"5\",\"4\",\"Jamie Romero\",\"12\",\"5\",\"12\",\"Justin Rogers\",\"13\",\"8\",\"9\",\"Bobby Burns\",\"12\",\"8\",\"7\",\"Alan Sanchez\",\"11\",\"9\",\"Info\",\"You can see that not only the data columns that satisfy s.course_id=c.id are returned, but also other unmatched data are returned\",\"Query Condition\",\"After using the join, two filtering conditions are supported:\",\"where\",\"Using the where clause will only return columns that meet the where condition\",\"on\",\"When using on, in the inner join query, the effect of on and where is consistent. In the outer join, such as left join, the unmatched data of the driving table will be returned\",\"Warning\",\"If there are multiple table joins such as a inner join b inner join c, a inner join b will be executed first, and then the result will be inner join c\",\"Important\",\"Using indexes when join can reduce the number of table returns\"]},\"13\":{\"h\":\"Keywords\"},\"14\":{\"h\":\"Keywords\",\"t\":[\"Golang has 25 reserved keywords that cannot be used as program identifiers.\",\"Type\",\"Keywords\",\"Introduction\",\"Declaration\",\"constfuncimportpackagetypevar\",\"These keywords are used to declare various elements in the code.\",\"Composite Types\",\"chaninterfacemapstruct\",\"These keywords are used to declare some special compound types.\",\"Control Flow\",\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",\"These keywords are used to control the flow of program execution.\",\"Function Modifiers\",\"defergo\",\"Used to modify special functions.\"]},\"15\":{\"h\":\"Declaration Types\"},\"16\":{\"h\":\"\",\"t\":[\"const is used to declare constants, which once declared cannot be changed, and must specify an initial value when declaring a constant.\",\"Example\",\"const identifier T = value // T is the data type, which can be omitted, and the compiler will infer it. const identifier1, identifier2 = value1, value2 // Declare multiple, such as const a, b, c = \\\"hello\\\", 100, true const ( FeMale = 0 Male = 1 ) // Enumeration const ( a = iota b c ) // iota \"]},\"17\":{\"h\":\"\",\"t\":[\"func is used to declare functions, supports multiple return values, and does not support default parameters.\",\"Example\",\"// p is the parameter, T is the type func Test(p T) {} func Test(p T) (T1, T2) {} func Test(p T, p1 T1, list ...T3) (T4, T5) {} // variadic parameters \"]},\"18\":{\"h\":\"\",\"t\":[\"import is used to import packages to use their public identifiers.\",\"import supports single-line and multi-line imports.\",\"Example\",\"import \\\"flag\\\" // single import import ( \\\"flag\\\" \\\"fmt\\\" ) // multiple imports \",\"We can also use ., _, and aliases to modify imported packages.\",\"Import Command\",\"Usage\",\"Explanation\",\"import \\\"lib/math\\\"\",\"math.Sin\",\"Normal import requires the package name\",\"import m \\\"lib/math\\\"\",\"m.Sin\",\"Aliases can be set during import\",\"import . \\\"lib/math\\\"\",\"Sin\",\"Using . allows direct use of functions without the package name\",\"We can also use _ to modify imported packages, which will only execute the package's initialization function init().\"]},\"19\":{\"h\":\"\",\"t\":[\"package is used to define the package name.\"]},\"20\":{\"h\":\"\",\"t\":[\"type is used to define variable types.\",\"Example\",\"// Define an interface type Animal interface { eat() } // Define a structure type Tiger struct { Name string } // Define equivalent types type Num int32 // Define a new type type Num = int32 // Only define an alias \"]},\"21\":{\"h\":\"\",\"t\":[\"var is used to declare public or private variables.\",\"Example\",\"var Name T // public variable var name T // private variable var name1, name2 T // declare multiple variables of the same type var name1, name2 T = val1, val2 // declare and initialize multiple variables of the same type var name1, name2 = val1, val2 // infer types and initialize based on val1, val2 // Using parentheses var ( name1 = val1 name2 = val2 ) \"]},\"22\":{\"h\":\"Composite Types\"},\"23\":{\"h\":\"\",\"t\":[\"chan (Channel) is used to declare channels.\",\"Example\",\"// Channel for sending and receiving data of type T chan T // Channel for sending data of type T <-chan T // Channel for receiving data of type T chan<- T \",\"ch := make(chan T) // unbuffered channel ch := make(chan T, 20) // buffered channel \"]},\"24\":{\"h\":\"\",\"t\":[\"interface is used to declare interfaces.\",\"Example\",\"type File interface { Read(b Buffer) bool Write(b Buffer) bool Close() } \"]},\"25\":{\"h\":\"\",\"t\":[\"map is used to declare collections, consisting of unordered key-value pairs, with an underlying hash map. Although map will automatically expand, it is recommended to configure the capacity at initialization.\",\"Example\",\"m := make(map[string]string) // empty map m := make(map[string]string, 10) // map with an initial capacity of 10 \"]},\"26\":{\"h\":\"\",\"t\":[\"struct is used to declare structures.\",\"Example\",\"type Person struct { Name string } \",\"Here is the translation into English:\"]},\"27\":{\"h\":\"Control Flow\"},\"28\":{\"h\":\"\",\"t\":[\"ifelse is used for conditional judgments and can be nested.\",\"Example\",\"if a > 0 { fmt.Println(\\\"hello\\\") } else { fmt.Println(\\\"world\\\") } \"]},\"29\":{\"h\":\"\",\"t\":[\"switch is used to perform different actions based on different conditions. By default, each case comes with a break, and after executing one case, it will automatically exit. If you want to continue executing the following statements, you need to use fallthrough.\",\"Example\",\"a := \\\"2\\\" switch a { case \\\"1\\\": fmt.Println(\\\"hello\\\") case \\\"2\\\": fmt.Println(\\\"world\\\") default: // default action fmt.Println(\\\"default\\\") } // Result: world \",\"Using fallthrough, you can directly execute the action of the next case after completing the corresponding case.\",\"package main import \\\"fmt\\\" func main() { var dayOfWeek int = 4 switch dayOfWeek { case 1: fmt.Println(\\\"Monday\\\") fallthrough case 2: fmt.Println(\\\"Tuesday\\\") fallthrough case 3: fmt.Println(\\\"Wednesday\\\") fallthrough case 4: fmt.Println(\\\"Thursday\\\") fallthrough case 5: fmt.Println(\\\"Friday\\\") fallthrough case 6: fmt.Println(\\\"Saturday\\\") case 7: fmt.Println(\\\"Sunday\\\") default: fmt.Println(\\\"Invalid Day\\\") } } // Result: // Thursday // Friday // Saturday \"]},\"30\":{\"h\":\"\",\"t\":[\"for is used to loop actions, using break to interrupt the current for loop, and continue to skip the remaining statements of the current loop and continue with the next round.\",\"Example\",\"// Single condition for i <= 10 { fmt.Println(i) i = i + 1 } // Initialization and judgment for i:=0; i < 3; i++ { fmt.Println(i) } // for range iteration array :=[]int{1, 2, 3, 4, 5} for i, v :=range array{ fmt.Println(i,v) } // break for i, v :=range array{ if i >= 2 { break } fmt.Println(i,v) } // continue for i, v :=range array{ if i == 2 { continue } fmt.Println(i,v) } \"]},\"31\":{\"h\":\"\",\"t\":[\"goto can jump to a specified location to continue executing actions.\",\"Example\",\"package main import \\\"fmt\\\" func main() { for i := 0; i < 10; i ++ { if i == 5 { goto end // Jump to the end position to execute } fmt.Println(i) } end: fmt.Println(\\\"end\\\") } // Result: // 0 // 1 // 2 // 3 // 4 // end \"]},\"32\":{\"h\":\"\",\"t\":[\"select allows goroutine to wait for multiple communication operations. select will block until one case receives information. If multiple channels receive data at the same time, a random case will be executed.\",\"Example\",\"package main import \\\"fmt\\\" func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c <- x: x, y = y, x+y case <-quit: fmt.Println(\\\"quit\\\") return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i < 10; i++ { fmt.Println(<-c) } quit <- 0 }() fibonacci(c, quit) } \"]},\"33\":{\"h\":\"Function Modifiers\"},\"34\":{\"h\":\"\",\"t\":[\"return is used to terminate the execution of a function and return zero or more return values. defer is used to perform actions before the function's return or after it has finished executing.\",\"Example\",\"package main import \\\"fmt\\\" func main() { defer fmt.Println(\\\"world\\\") fmt.Println(\\\"hello\\\") } // Result // hello // world \",\"Note:\",\"The execution order of defer is last-in-first-out.\",\"defer executing before return means you can use defer to get the final result of variables before return.\",\"package main import \\\"fmt\\\" func main() { num := 1 defer func() { fmt.Println(num) }() for i := 0; i < 4; i ++ { num += i } } // Result: // 7 \"]},\"35\":{\"h\":\"\",\"t\":[\"go is used to create a coroutine (goroutine) and perform actions in the background of the program.\",\"Example\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { go func(){ fmt.Println(\\\"no.1\\\") }() go func(){ fmt.Println(\\\"no.2\\\") }() fmt.Println(\\\"start goroutine\\\") time.Sleep(5*time.Second) } // Result: // start goroutine // no.1 // no.2 \"]},\"36\":{\"h\":\"Data Type\"},\"37\":{\"h\":\"Integers (int)\",\"t\":[\"Integers come in two types:\",\"Type\",\"Range\",\"Description\",\"Signed integers\",\"-∞ ~ +∞\",\"Signed integers include positive and negative numbers\",\"Unsigned integers\",\"0 ~ +∞\",\"Unsigned integers include 0 and all positive numbers\",\"In Golang, types starting with int are signed integers, and those starting with uint are unsigned integers.\",\"Integer types in Golang:\",\"Bits\",\"Type\",\"8\",\"int8uint8\",\"16\",\"int16uint16\",\"32\",\"int32uint32\",\"64\",\"int64uint64\",\"32 or 64 (based on system architecture)\",\"intuint\",\"There are also two equivalent types:\",\"rune: equivalent to int32 , used to store Unicode characters\",\"byte: equivalent to uint8 , used to store ASCII characters\"]},\"38\":{\"h\":\"Floating-point Numbers (float)\",\"t\":[\"Floating-point numbers are numbers that contain a decimal point.\",\"Bits\",\"Type\",\"32\",\"float32\",\"64\",\"float64\"]},\"39\":{\"h\":\"Complex Numbers (complex)\",\"t\":[\"Complex numbers contain imaginary and real numbers, with the real part being a floating-point number.\",\"Bits\",\"Type\",\"32-bit float + imaginary\",\"complex64\",\"64-bit float + imaginary\",\"complex128\",\"Example\",\"// Initialize a complex number var complexData complex64 = complex(5, 3) // Equals: 5 + 3i // Another way to initialize complexData2 := 5 + 3i \"]},\"40\":{\"h\":\"Strings (string)\",\"t\":[\"Strings are composed of a sequence of characters, and the type name is string.\",\"Once a string is created, it cannot be modified.\",\"Example\",\"package main import \\\"fmt\\\" func main() { var str string := \\\"Hi! Jack\\\" // Cannot modify, the following commented code will cause an error // str[2] = 'c' fmt.Printf(\\\"%s\\\",str) } \"]},\"41\":{\"h\":\"Booleans (bool)\",\"t\":[\"The boolean type values are true or false, and the type name is bool.\",\"Example\",\"var isNumber bool isNumber = true isNumber = false \"]},\"42\":{\"h\":\"Arrays (array)\",\"t\":[\"Arrays are composed of a series of data, which can be accessed by index.\",\"The capacity of an array cannot be modified once created.\",\"Example\",\"data := [5]int{1, 2, 3, 4, 5} \"]},\"43\":{\"h\":\"Slices (slices)\",\"t\":[\"Slices are dynamic arrays that can automatically adjust their capacity size based on the data.\",\"Example\",\"package main import \\\"fmt\\\" func main() { var data []int for i := 0; i < 10; i ++ { data = append(data, i) } fmt.Println(data) } // Result // [0 1 2 3 4 5 6 7 8 9] \"]},\"44\":{\"h\":\"Map (map)\",\"t\":[\"A map is a key-value mapping table, where you can get the corresponding value through the key.\",\"The declaration of a map is as follows:\",\"map[KeyType]ValueType \",\"KeyType is the data type of the key, and ValueType is the data type of the value.\",\"Example\",\"// Declare a map var m map[string]int // Initialize the map using make m = make(map[string]int) // Set the value m[\\\"path\\\"] = 66 // Output the value fmt.Println(m[\\\"path\\\"]) \"]},\"45\":{\"h\":\"Structures (struct)\",\"t\":[\"Structures are composed of a series of custom fields, which can be accessed using ..\",\"Example\",\"type Animal struct { Name string } a := Animal{ Name: \\\"Lucky\\\" } fmt.Println(a.Name) \"]},\"46\":{\"h\":\"Pointers (pointer)\",\"t\":[\"Pointers store the memory address of a variable. Use * in front of a variable to define it as a pointer, and & to get the variable's address. Pointers allow you to modify data outside of a function within the function.\",\"Example\",\"var num *int n := 10 num = &n \"]},\"47\":{\"h\":\"Zero Value Table\",\"t\":[\"Type\",\"Zero Value\",\"uint/uint8/uint16/uint32/uint64\",\"0\",\"int/int8/int16/int32/int64\",\"0\",\"float32/float64\",\"0\",\"complex64/complex128\",\"0+0i\",\"bool\",\"false\",\"uintptr\",\"0\",\"byte\",\"0\",\"rune\",\"0\",\"string\",\"\\\"\\\"\",\"struct\",\"All internal attributes are their corresponding zero values\",\"interface\",\"nil\",\"slice\",\"nil\",\"map\",\"nil\",\"chan\",\"nil\",\"func\",\"nil\",\"pointer\",\"nil\"]},\"48\":{\"h\":\"Operators\"},\"49\":{\"h\":\"Arithmetic Operators\",\"t\":[\"A\",\"B\",\"50\",\"20\",\"Operator\",\"Operation\",\"Result\",\"Description\",\"+\",\"A + B\",\"70\",\"Addition\",\"-\",\"A - B\",\"30\",\"Subtraction\",\"*\",\"A * B\",\"1000\",\"Multiplication\",\"/\",\"A / B\",\"2\",\"Division\",\"%\",\"A % B\",\"10\",\"Modulus\",\"++\",\"A++\",\"51\",\"Increment\",\"--\",\"A--\",\"49\",\"Decrement\"]},\"50\":{\"h\":\"Relational Operators\",\"t\":[\"A\",\"B\",\"50\",\"20\",\"Operator\",\"Operation\",\"Result\",\"Description\",\"==\",\"A == B\",\"false\",\"Check if two numbers are equal, if yes then true, otherwise false\",\"!=\",\"A != B\",\"true\",\"Check if two numbers are not equal, if yes then true, otherwise false\",\">\",\"A > B\",\"true\",\"Check if left side is greater than right side, if yes then true, otherwise false\",\"<\",\"A < B\",\"false\",\"Check if left side is less than right side, if yes then true, otherwise false\",\">=\",\"A >= B\",\"true\",\"Check if left side is greater than or equal to right side, if yes then true, otherwise false\",\"<=\",\"A <= B\",\"false\",\"Check if left side is less than or equal to right side, if yes then true, otherwise false\"]},\"51\":{\"h\":\"Logical Operators\",\"t\":[\"A\",\"B\",\"true\",\"false\",\"Operator\",\"Operation\",\"Result\",\"Description\",\"&&\",\"A && B\",\"false\",\"If both sides are true, then true, otherwise false\",\"!=\",\"A != B\",\"true\",\"If either side is true, then true, if both sides are false, then false\",\"!\",\"!A\",\"false\",\"If the condition is true, then false, otherwise true\"]},\"52\":{\"h\":\"Bitwise Operators\",\"t\":[\"Truth Table\",\"p\",\"q\",\"p & q\",\"p | q\",\"p ^ q\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"0\",\"0\",\"1\",\"1\",\"Assuming\",\"Variable\",\"Value\",\"A\",\"0110 1000\",\"B\",\"0111 0011\",\"Operator\",\"Operation\",\"Result\",\"Description\",\"&\",\"A & B\",\"0110 0000\",\"Bitwise AND\",\"|\",\"A | B\",\"0111 1011\",\"Bitwise OR\",\"^\",\"A ^ B\",\"0001 1011\",\"Bitwise XOR\",\"<<\",\"A << 2\",\"1010 0000\",\"Left shift by 2 bits, padded with 0\",\">>\",\"A >> 2\",\"0001 1010\",\"Right shift by 2 bits, padded with 0\"]},\"53\":{\"h\":\"Assignment Operators\",\"t\":[\"We can use = to assign the result on the right to the left, such as C = A + B\",\"Operator\",\"Operation\",\"Equivalent to\",\"+=\",\"A += B\",\"A = A + B\",\"-=\",\"A -= B\",\"A = A - B\",\"*=\",\"A *= B\",\"A = A * B\",\"/=\",\"A /= B\",\"A = A / B\",\"%=\",\"A %= B\",\"A = A % B\",\"<<=\",\"A <<= 2\",\"A = A << 2\",\">>=\",\"A >>= 2\",\"A = A >> 2\",\"&=\",\"A &= 2\",\"A = A & 2\",\"|=\",\"A |= 2\",\"A = A | 2\",\"^=\",\"A ^= 2\",\"A = A ^ 2\"]},\"54\":{\"h\":\"Other Symbols\",\"t\":[\"Operator\",\"Description\",\"&\",\"Address of\",\"*\",\"Pointer\"]},\"55\":{\"h\":\"Symbol Precedence\",\"t\":[\"From high to low:\",\"Precedence\",\"Operator\",\"5\",\"* / % << >> & &^\",\"4\",\"+ - | ^\",\"3\",\"== != < <= > >=\",\"2\",\"&&\",\"1\",\"||\",\"Parentheses can be used to increase precedence\"]},\"56\":{\"h\":\"Error Handling\"},\"57\":{\"h\":\"Interface\",\"t\":[\"Golang provides an interface type error:\",\"type error interface { Error() string } \",\"Any structure that implements the Error() method belongs to the error type.\"]},\"58\":{\"h\":\"Creating Errors\",\"t\":[\"Golang provides several ways to create an error.\",\"We can use errors.New() or fmt.Errorf() to create errors.\",\"Example\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // Create error using New err1 := errors.New(\\\"first error\\\") // Create error using fmt err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") fmt.Println(err1, err2) } \"]},\"59\":{\"h\":\"errors.Join\",\"t\":[\"In Go 1.20, errors.Join was introduced to combine multiple errors into one array.\",\"Example\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // Create error using New err1 := errors.New(\\\"first error\\\") // Create error using fmt err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") // Use join to combine multiple errors err3 := errors.Join(err1, err2) fmt.Println(err1, err2) // Output: first error second error fmt.Println(err3) // Output: // first error // second error } \"]},\"60\":{\"h\":\"errors.Is\",\"t\":[\"We can use errors.Is() to determine whether the current error contains the target type of error.\",\"Example\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // Create error using New err1 := errors.New(\\\"first error\\\") // Create error using fmt err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") // Use join to combine multiple errors err3 := errors.Join(err1, err2) fmt.Println(err1, err2) // Output: first error second error fmt.Println(err3) // Output: // first error // second error // Use errors.Is() to determine whether the error is the target error. Since err3 contains err1, it is true. fmt.Println(errors.Is(err1, err2)) // Output: false fmt.Println(errors.Is(err3, err1)) // Output: true } \"]},\"61\":{\"h\":\"errors.As\",\"t\":[\"We can use errors.As() to assign the first error in the error that matches the target type to the target object.\",\"Example\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) type NormalErr struct { e string } func (t NormalErr) Error() string { return t.e } func main() { // Create error using New err1 := errors.New(\\\"first error\\\") // Create T err2 := NormalErr{\\\"second error\\\"} // Use join to combine multiple errors err3 := errors.Join(err1, err2) var err4 NormalErr errors.As(err3, &err4) fmt.Println(err4) // Output： second error } \"]},\"62\":{\"h\":\"Map\"},\"63\":{\"h\":\"Creating a Map\",\"t\":[\"map is a key-value mapping table, where you can get the corresponding value by using the key.\",\"The declaration of map is as follows:\",\"map[KeyType]ValueType \",\"KeyType is the data type of the key, and ValueType is the data type of the value.\",\"Example\",\"// Declare a map var m map[string]int // Initialize the map using make m = make(map[string]int) // Initialize the map using make and set capacity // m = make(map[string]int, 10) // Set the value m[\\\"path\\\"] = 66 // Print the value fmt.Println(m[\\\"path\\\"]) \"]},\"64\":{\"h\":\"Traversing a Map\",\"t\":[\"Use range to traverse a map.\",\"Example\",\"package main import \\\"fmt\\\" func main() { // Initialize the map var dataMap map[string]string dataMap = make(map[string]string) // Alternatively, you can initialize like this //dataMap := map[string]string{} // Add key-value pairs dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" fmt.Println(\\\"print key and value: \\\") // Use range to traverse key-value pairs for key, val := range dataMap { fmt.Printf(\\\"key: %s - value: %s \\\\n\\\", key, val) } fmt.Println(\\\"print key: \\\") // Use range to traverse keys for key := range dataMap { fmt.Printf(\\\"key: %s \\\\n\\\", key) } fmt.Println(\\\"print value: \\\") // Use range to traverse values for _, val := range dataMap { fmt.Printf(\\\"Value: %s \\\\n\\\", val) } } // Result // print key and value: // key: third - value: third value // key: first - value: first value // key: second - value: second value // print key: // key: first // key: second // key: third // print value: // Value: first value // Value: second value // Value: third value \"]},\"65\":{\"h\":\"Deleting Key-Value Pairs\",\"t\":[\"To delete a key-value pair in a map, use the delete() method.\",\"Example\",\"package main import \\\"fmt\\\" func main() { // Initialize the map var dataMap map[string]string dataMap = make(map[string]string) // Alternatively, you can initialize like this //dataMap := map[string]string{} dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" fmt.Println(dataMap) // Delete a key-value pair delete(dataMap, \\\"first\\\") fmt.Println(dataMap) } // Result: // map[first:first value second:second value third:third value] // map[second:second value third:third value] \"]},\"66\":{\"h\":\"Check if a key exists\",\"t\":[\"Example\",\"package main import \\\"fmt\\\" func main() { // Initialize Map var dataMap map[string]string dataMap = make(map[string]string) dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" // Check if a key exists if val, ok := dataMap[\\\"first\\\"]; ok { fmt.Println(val) } else { fmt.Println(\\\"key not exists\\\") } if val, ok := dataMap[\\\"fourth\\\"]; ok { fmt.Println(val) } else { fmt.Println(\\\"key not exists\\\") } } \"]},\"67\":{\"h\":\"Get the length of a Map\",\"t\":[\"Use len() to get the length of a Map\",\"len(dataMap) \"]},\"68\":{\"h\":\"Concurrency\",\"t\":[\"Maps are not thread-safe in concurrent operations. You can use the official sync.Map{} to solve this problem.\"]},\"69\":{\"h\":\"Slices\"},\"70\":{\"h\":\"Creating Slices\",\"t\":[\"There are three ways to create slices.\",\"package main import \\\"fmt\\\" func main() { // First way: Declare directly var dataSlice []string // Second way: Initialize directly dataSlice1 := []string{} // Third way: Use make dataSlice2 := make([]string, 10) fmt.Println(dataSlice, dataSlice1, dataSlice2) } \",\"You can initialize data directly when creating it.\",\"dataSlice1 := []string{\\\"Jack\\\", \\\"Mike\\\"} \"]},\"71\":{\"h\":\"Slicing Slices\",\"t\":[\"arr[beginIndex:endIndex] can slice the slice, including the data of the beginIndex and excluding the data of the endIndex.\",\"data := []int{0,1,2,3,4,5} fmt.Println(data[2:4]) // Result // [2 3] \"]},\"72\":{\"h\":\"Length and Capacity\",\"t\":[\"Use len() to get the length of the slice and cap() to get the capacity of the slice.\",\"Example\",\"package main import \\\"fmt\\\" func main() { // Create a slice with a length of 5 and a capacity of 9 data := make([]int, 5, 9) fmt.Println(data, len(data), cap(data)) } // Result: // [0 0 0 0 0] 5 9 \"]},\"73\":{\"h\":\"Appending Data\",\"t\":[\"Use the append() function to append data.\",\"Example\",\"package main import \\\"fmt\\\" func main() { data := []int{0,1,2} // Append one piece of data data1 := append(data, 3) // Append multiple pieces of data data2 := append(data, 4, 5, 6) fmt.Println(data) fmt.Println(data1) fmt.Println(data2) } // Result: // [0 1 2] // [0 1 2 3] // [0 1 2 4 5 6] \"]},\"74\":{\"h\":\"Cloning Slices\",\"t\":[\"We know that slices are reference types. If you assign a slice to another variable, the data sharing the same memory address is actually shared. If you want to create two slices with the same data, you can use the copy() method.\",\"Example\",\"package main import \\\"fmt\\\" func main() { data := []int{0,1,2} // Create a slice with the same length data1 := make([]int, len(data)) // Copy data to data1 copy(data1, data) // Add data to data1 data1 = append(data1, 3, 4, 5) fmt.Println(data) fmt.Println(data1) // You will find that data has not been changed. } // Result: // [0 1 2] // [0 1 2 3 4 5] \"]},\"75\":{\"h\":\"Channel\"},\"76\":{\"h\":\"Introduction\",\"t\":[\"A channel is a conduit for end-to-end data communication, often used for data sharing between goroutines.\"]},\"77\":{\"h\":\"Creating a channel\",\"t\":[\"We use make to create a channel\",\"ch1 := make(chan T) // Unbuffered ch2 := make(chan T, 2) // Buffered \",\"T is the data type.\",\"Warning\",\"An unbuffered channel will be blocked until the data is received\",\"A buffered channel will be blocked when the sent data reaches the buffer size\"]},\"78\":{\"h\":\"Sending and receiving data\",\"t\":[\"Using <- pointing to the channel means sending data to that channel, such as ch <- 10\",\"Using <- on the left side of the channel means receiving data, such as <-ch\"]},\"79\":{\"h\":\"Closing a channel\",\"t\":[\"Use close() to close a channel\",\"close(ch) \",\"Warning\",\"If you send a message to a channel that has already been close(), it will cause a panic\",\"Reading from a closed channel can get a zero value, if using range to read channel, then close will terminate the loop\",\"We can use val, ok := <- ch to determine whether it is a zero value, if ok is false then the channel is already close\"]},\"80\":{\"h\":\"Select\",\"t\":[\"We usually use select to receive channel data, you can also use default to set the default action, select can receive multiple channel at the same time, if multiple channel send data at the same time, it will randomly select a channel to complete the operation\",\"select { case <-ch1: // Receive ch1 data fmt.Println(\\\"ch1\\\") case <-ch2: // Receive ch2 data fmt.Println(\\\"ch2\\\") case val := <-ch3: fmt.Println(ch3) //Receive ch3 data and print default: fmt.Println(\\\"default\\\") } \"]},\"81\":{\"h\":\"Example\",\"t\":[\"The timer is implemented through channel to return the timing result\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { t := time.NewTicker(3*time.Second) fmt.Println(\\\"start\\\") <-t.C fmt.Println(\\\"finish\\\") } \"]},\"82\":{\"h\":\"Precautions\",\"t\":[\"When using channel, be aware that there must be a data receiving end to avoid deadlock problems\"]},\"83\":{\"h\":\"Context\"},\"84\":{\"h\":\"Introduction\",\"t\":[\"Context is a very important interface in Golang, used to define the context information in goroutine. Context is commonly used in the following situations:\",\"Data transfer: Transfer data among multiple goroutines.\",\"Timeout management: By setting a timeout, the termination time of the coroutine can be conveniently configured.\",\"Terminate coroutine: By using the cancel() method, the coroutine can be easily terminated, and multiple coroutines can be managed in batches.\"]},\"85\":{\"h\":\"Context Interface\",\"t\":[\"// A Context carries a deadline, a cancelation signal, and other values across // API boundaries. // // Context's methods may be called by multiple goroutines simultaneously. type Context interface { Done() <-chan struct{} Deadline() (deadline time.Time, ok bool) Err() error Value(key interface{}) interface{} } \"]},\"86\":{\"h\":\"Root Nodes and Derived Nodes\",\"t\":[\"We can create root nodes and derived nodes for context, forming a tree structure. When the root node is cancel() or terminated due to timeout, all its derived nodes will also be terminated, and the data of the root node will be shared by all derived nodes.\",\"context structure\"]},\"87\":{\"h\":\"Creating Root Nodes\",\"t\":[\"ctx := context.Background() // Create a blank context ctx2 := context.TODO() // TODO is also a blank context \"]},\"88\":{\"h\":\"Creating Derived Nodes\",\"t\":[\"Use context.WithXXX() to create derived context\",\"package main import ( \\\"context\\\" \\\"fmt\\\" ) func main() { ctx := context.WithValue(context.Background(), \\\"base\\\", \\\"baseVal\\\") ctx1 := context.WithValue(ctx, \\\"ctx1\\\", \\\"ctx1Val\\\") ctx2 := context.WithValue(ctx, \\\"ctx2\\\", \\\"ctx2Val\\\") ctx3 := context.WithValue(ctx, \\\"ctx3\\\", \\\"ctx3Val\\\") fmt.Println(ctx) fmt.Println(ctx1) fmt.Println(ctx2) fmt.Println(ctx3) } // Results： // context.Background.WithValue(type string, val baseVal) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx1Val) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx2Val) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx3Val) \"]},\"89\":{\"h\":\"WithValue()\",\"t\":[\"context.WithValue() can be used to create derived nodes and add key-value data, while retaining all data of the parent context.\"]},\"90\":{\"h\":\"WithDeadline() WithTimeout()\",\"t\":[\"context.WithDeadline() and context.WithTimeout() can be used to create a context with timeout control.\",\"Warning\",\"WithTimeout(1*time.Second) is equivalent to WithDeadline(time.Now().Add(1*time.Second))\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func main() { ctx, _ := context.WithTimeout(context.Background(), 3*time.Second) go func(ctx1 context.Context) { for { select { case <-ctx1.Done(): fmt.Println(\\\"time out\\\") return default: fmt.Println(\\\"running...\\\") time.Sleep(time.Second) } } }(ctx) time.Sleep(5 * time.Second) } // Results： // running... // running... // running... // time out \"]},\"91\":{\"h\":\"WithCancel()\",\"t\":[\"Using WithCancel() can create a manually terminated context. Executing cancel() can manually terminate it.\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func main() { ctx, cancel := context.WithCancel(context.Background()) go func(ctx1 context.Context) { for { select { case <-ctx1.Done(): fmt.Println(\\\"canceled\\\") return default: fmt.Println(\\\"running...\\\") time.Sleep(time.Second) } } }(ctx) time.Sleep(3*time.Second) cancel() time.Sleep(5 * time.Second) } // Results： // running... // running... // running... // canceled \"]},\"92\":{\"h\":\"Computer Network\"},\"93\":{\"h\":\"OSI Seven-Layer Model\",\"t\":[\"Layer\",\"Function\",\"Physical\",\"Mainly implements transparent transmission of bitstreams between adjacent nodes, defines the standards of physical devices, such as the type of network cable, the network card also works at this layer.\",\"Data Link\",\"Assembles the bit data packets passed down from the network layer into frames and sends frames on the link of adjacent nodes. The data link layer divides the 0,1 sequence into meaningful data frames and sends them to the other end.\",\"Network\",\"Selects the appropriate route and switch node, can timely transmit data, the data of this layer is called data packet, the focus is on IP protocol.\",\"Transport\",\"Provides a general data transmission service to the host process. The protocol that needs to be focused on in the transport layer is TCP protocol and UDP protocol.\",\"Session\",\"Responsible for establishing, maintaining and terminating communication between two nodes in the network, common protocols are ADSP, RPC, etc.\",\"Presentation\",\"Mainly responsible for data format conversion, solving communication syntax problems between different systems\",\"Application\",\"Provides interactive services for applications, the purpose is to make it more convenient for applications to receive data from the network, the focus is on HTTP protocol\",\"osi\"]},\"94\":{\"h\":\"TCP and IP Model\",\"t\":[\"OSI Seven-Layer Model\",\"TCP/IP Five-Layer Model\",\"TCP/IP Four-Layer Model\",\"Function\",\"TCP/IP Protocol Suite\",\"Application\",\"Application\",\"Application\",\"File transfer, email, file service, virtual terminal, etc.\",\"SMTP, DNS, Telnet, TFTP, HTTP, SNHP, FTP\",\"Presentation\",\"Application\",\"Application\",\"Data formatting, code conversion, data encryption\",\"None\",\"Session\",\"Application\",\"Application\",\"Dissolve or establish contact with other nodes\",\"None\",\"Transport\",\"Transport\",\"Transport\",\"Provides end-to-end interface\",\"TCP, UDP\",\"Network\",\"Network\",\"Network\",\"Selects routes for data packets\",\"IP, ICHP, RIP, OSPF, BCP, ICMF\",\"Data Link\",\"Data Link\",\"Network Interface\",\"Transmits addressed stops and error detection functions\",\"SLIP, CSLIP, PPP, ARP, RARP, MTU\",\"Physical\",\"Physical\",\"Network Interface\",\"Transmits data in binary form on physical media\",\"IS02110, IEEE802, IEEE802.2\"]},\"95\":{\"h\":\"HTTP\"},\"96\":{\"h\":\"Request Methods\",\"t\":[\"Info\",\"HTTP 1.0 supports three request methods:\",\"GET\",\"POST\",\"HEAD\",\"HTTP 1.1 additionally supports 6 request methods\",\"OPTIONS\",\"PUT\",\"PATCH\",\"DELETE\",\"TRACE\",\"CONNECT\",\"Method\",\"Description\",\"GET\",\"Requests a specified resource, used to get data\",\"HEAD\",\"Similar to GET, but only returns the response header, does not return the response body\",\"POST\",\"Used to submit information to the target address, used for data submission and file upload\",\"PUT\",\"Submits updated information, used to replace original data\",\"DELETE\",\"Deletes the specified resource\",\"CONNECT\",\"Establishes a tunnel with the server\",\"OPTIONS\",\"Returns the HTTP request methods supported by a specific server address, can also be used to test the functionality supported by the server\",\"TRACE\",\"Echoes the request received by the server, mainly used for testing or diagnosis\",\"PATCH\",\"Similar to PUT, mainly used for partial updates\"]},\"97\":{\"h\":\"HTTP Status Codes\",\"t\":[\"Number\",\"Meaning\",\"1XX\",\"Indicative information, indicates that the request has been received, continue processing\",\"2XX\",\"Success, indicates that the request has been successfully received, understood, accepted\",\"3XX\",\"The status code indicates that the resource requested by the client has changed, and the client needs to resend the request with a new URL to get the resource, which is redirection\",\"4XX\",\"The status code indicates that the client's request message is incorrect, the server cannot process, which is the meaning of the error code\",\"5XX\",\"The status code indicates that the client's request message is correct, but an internal error occurred during server processing, which is the server-side error code\",\"Common Status Codes\",\"Sure, here is the English translation of your text:\",\"HTTP Status Code\",\"Name\",\"Description\",\"100\",\"Continue\",\"Continue indicates that the client can continue to submit the request\",\"101\",\"Switching Protocols\",\"Switching Protocols switches the transmission protocol, can only switch from a lower version to a higher version, such as HTTP1.0 switching to HTTP1.1\",\"200\",\"OK\",\"OK indicates that the server has successfully returned the data\",\"201\",\"Created\",\"Created indicates that the server has successfully received the request and created the corresponding resource\",\"202\",\"Accepted\",\"Accepted indicates that the server has accepted the request, the request will be processed\",\"203\",\"Non-Authoritative Information\",\"Non-Authoritative Information indicates that the request was successful, but the returned meta information is not on the original server, but a copy\",\"204\",\"No Content\",\"No Content indicates that the server has successfully processed the request\",\"205\",\"Reset Content\",\"Reset Content the server has successfully processed, the user terminal (e.g., browser) should reset the document view. This return code can clear the browser's form field\",\"206\",\"Partial Content\",\"Partial Content the server has successfully processed part of the GET request\",\"300\",\"Multiple Choices\",\"Multiple Choices the requested resource can include multiple locations, the response can return a list of resource characteristics and addresses for the user terminal (e.g., browser) to choose\",\"301\",\"Moved Permanently\",\"Moved Permanently the requested resource has been permanently moved to a new URI, the return information will include the new URI, the browser will automatically redirect to the new URI. Any new requests in the future should use the new URI instead\",\"302\",\"Found\",\"Found similar to 301. But the resource is only temporarily moved. The client should continue to use the original URI\",\"303\",\"See Other\",\"See Other similar to 301. Use GET and POST requests to view\",\"304\",\"Not Modified\",\"Not Modified the requested resource has not been modified, the server returns this status code, will not return any resources. Clients usually cache accessed resources, by providing a header information indicating that the client wants to only return resources modified after a specified date\",\"305\",\"Use Proxy\",\"Use Proxy the requested resource must be accessed through a proxy\",\"307\",\"Temporary Redirect\",\"Temporary Redirect similar to 302. Use GET request to redirect\",\"400\",\"Bad Request\",\"Bad Request indicates that the client's request message is incorrect\",\"401\",\"Unauthorized\",\"Unauthorized missing or incorrect authentication, this status code must be used with the WWW-Authenticate header field\",\"403\",\"Forbidden\",\"Forbidden indicates that the server prohibits access to resources, it is not the client's request error\",\"404\",\"Not Found\",\"Not Found indicates that the requested resource does not exist or was not found on the server, so it cannot be provided to the client\",\"501\",\"Not Implemented\",\"Not Implemented indicates that the functionality requested by the client is not yet supported\",\"502\",\"Bad Gateway\",\"Bad Gateway is usually an error code returned by the server when it acts as a gateway or proxy, indicating that the server itself is working normally, but an error occurred when accessing the backend server\",\"503\",\"Service Unavailable\",\"Service Unavailable indicates that the server is currently very busy and temporarily unable to respond to the server\",\"504\",\"Gateway Timeout\",\"Gateway Timeout is a gateway timeout, used by the server as a proxy or gateway, indicating that it cannot get a response from the remote server in a timely manner\"]},\"98\":{\"h\":\"HTTPS vs HTTP\",\"t\":[\"Feature\",\"HTTP\",\"HTTPS\",\"Definition\",\"HTTP is the Hypertext Transfer Protocol, used to transfer hypertext from the World Wide Web server to the local browser.\",\"HTTPS is HTTP with security, providing encryption processing, data integrity checking and identity authentication through SSL/TLS.\",\"Port\",\"The default HTTP port is 80.\",\"The default HTTPS port is 443.\",\"Security\",\"HTTP itself is not secure, because data is not encrypted during transmission, it may be obtained by third parties.\",\"HTTPS is secure, because data is encrypted during transmission, preventing it from being obtained by third parties.\",\"Speed\",\"HTTP is relatively fast, because there is no encryption and decryption process.\",\"HTTPS is relatively slow, because data needs to be encrypted and decrypted during transmission.\"]},\"99\":{\"h\":\"Working Principle\",\"t\":[\"The HTTPS protocol will encrypt the transmitted data, and the encryption process uses asymmetric encryption\",\"The Client initiates an HTTPS request\",\"The Server returns the pre-configured public key certificate to the client.\",\"The Client verifies the public key certificate: for example, whether it is within the validity period, whether the purpose of the certificate matches the site requested by the Client, whether it is in the CRL revocation list, whether its superior certificate is valid, this is a recursive process, until it is verified to the root certificate (the Root certificate built into the operating system or the Client), if the verification passes, continue, if not, display a warning message.\",\"The Client uses a pseudorandom number generator to generate the symmetric key used for encryption, then encrypts this symmetric key with the certificate's public key, and sends it to the Server.\",\"The Server uses its own private key to decrypt this message, obtaining the symmetric key. At this point, both the Client and Server hold the same symmetric key.\",\"The Server uses the symmetric key to encrypt the plaintext content A and sends it to the Client.\",\"The Client uses the symmetric key to decrypt the response ciphertext, obtaining the plaintext content A.\",\"The Client initiates an HTTPS request again, encrypts the plaintext content B of the request with the symmetric key, and then the Server uses the symmetric key to decrypt the ciphertext, obtaining the plaintext content B.\",\"https\"]},\"100\":{\"h\":\"HTTP 1.0 vs 1.1 vs 2.0\",\"t\":[\"Differences\",\"Feature\",\"HTTP 1.0\",\"HTTP 1.1\",\"HTTP 2.0\",\"Connection\",\"Non-persistent, each request requires a new connection\",\"Persistent, reduces the overhead of repeated TCP connection establishment and termination\",\"Multiplexing, multiple HTTP requests can be concurrent on a single TCP connection\",\"Head-of-line blocking\",\"Exists, the next request can only be sent after the response of the previous request arrives\",\"Exists, although multiple requests can be initiated, the server must send responses in the order of received requests\",\"Solved, multiple requests or responses can be concurrent in a single connection without having to correspond one by one\",\"Header compression\",\"Not supported\",\"Not supported\",\"Supported, uses HPACK algorithm to compress headers\",\"Server push\",\"Not supported\",\"Not supported\",\"Supported\"]},\"101\":{\"h\":\"Digital Certificate\",\"t\":[\"A digital certificate is an authoritative electronic document that provides a way to verify identity on the Internet. Digital certificates verify the online credentials and identity of individuals or organizations, and let network users and recipients know that the data they enter will go to a trusted source. They are similar to security badges for websites and users, and help ensure the security of the Internet.\",\"Digital certificates are issued by Certificate Authorities (CAs) for encrypting online data. Digital certificates are also known as public key certificates or identity certificates. For example, TLS/SSL certificates have two purposes: to encrypt and protect data transmitted between websites, browsers, and web servers, and to help identify and verify the owner of the website.\",\"The basic architecture of a digital certificate is Public Key Infrastructure (PKI), which uses a pair of keys to implement encryption and decryption. The keys include a private key and a public key. The private key is mainly used for signing and decryption, is user-defined, and is known only to the user; the public key is used for signature verification and encryption, and can be shared by multiple users.\",\"The application of digital certificates is very wide. For example, using digital certificates in secure email can construct secure email certificates, mainly for encrypting the transmission of emails, protecting the security of emails during transmission and reception. In addition, digital certificates can also be used for terminal protection. For example, if a digital certificate is installed during the process of e-commerce activities, then even if its account or password and other personal information are stolen, the information and financial security in its account can still be effectively guaranteed.\"]},\"102\":{\"h\":\"How Digital Signature Works\",\"t\":[\"signature\",\"Signature Process\",\"Use the signature hash algorithm (such as sha256md5) to calculate information including the issuer's information, the certificate holder's information, the certificate validity period, the certificate holder's public key, etc. (as in the example of x.509), to generate a certificate digest α.\",\"The issuer generates a pair of private and public keys, then uses the private key to encrypt the fingerprint, and the encrypted data is the issuer's digital signature γ.\",\"Attach the digital signature γ to the digital certificate to form a signed digital certificate.\",\"The issuer gives the signed digital certificate and the public key to the certificate holder.\",\"Verification Process\",\"The user obtains the signed digital certificate through some means (for example, browser access), and after parsing, the digital signature γ and the digital certificate can be obtained.\",\"The user uses the fingerprint algorithm in the digital certificate to recalculate the relevant content of the digital certificate, generating a new fingerprint β.\",\"At the same time, the user uses the obtained issuer's public key to decrypt the digital signature, and obtains the decrypted fingerprint α.\",\"Compare the two fingerprints α and β. If they are the same, it proves that the certificate is legal, and the user can trust and use the information in the certificate (for example, the holder's public key).\",\"Example: Information contained in an X.509 certificate\",\"Certificate version information\",\"Certificate serial number\",\"Signature algorithm used by the certificate\",\"Name of the certificate issuing authority\",\"Certificate validity period, now commonly used certificates generally use UTC time format, its timing range is 1950-2049\",\"Name of the certificate owner\",\"Public key of the certificate owner\",\"Signature of the certificate issuer on the certificate\",\"Functions\",\"Data encryption: Encrypt data to ensure data security\",\"Identity confirmation: Ensure the correct identity of both parties\",\"Non-tampering: Unable to modify signed files\",\"Non-repudiation: Under the supervision of CA, ensure that transactions cannot be denied after they are concluded\"]},\"103\":{\"h\":\"TCP/UDP\"},\"104\":{\"h\":\"TCP\",\"t\":[\"Transmission Control Protocol (TCP) is a connection-oriented, reliable, byte-stream-based transport layer communication protocol.\"]},\"105\":{\"h\":\"TCP Header Structure\",\"t\":[\"tcp header\",\"TCP Header Field\",\"Description\",\"Source Port\",\"Sender's port number, range (0~65535)\",\"Destination Port\",\"Receiver's port number, range (0~65535)\",\"Sequence Number\",\"If the TCP data is too large (greater than the allowable degree of IP packet), it needs to be segmented. This sequence number records the sequence number of each packet, allowing the receiver to reassemble the TCP data. The value of the sequence number field refers to the sequence number of the first byte of data sent by this segment. Abbreviated as seq\",\"Acknowledgment Number\",\"To confirm that the receiver has indeed received the packet data sent out by the sender, when the sender receives this acknowledgment code, it can confirm that the previous packet has been correctly received. This acknowledgment number is the sequence number of the first byte of data from the next segment expected to be received from the other party. Abbreviated as ack\",\"Header Length\",\"Indicates the length of the TCP header, range (0~15), unit 32bit, for example, when the value is 5, it means that the header length is 20Byte(160bit), if the option field is empty, then the TCP header length is 20Byte, that is, the value is 5\",\"URG\",\"URG=1 indicates that there is urgent data, the last byte of the urgent data is pointed out by the urgent data pointer, generally less used\",\"ACK\",\"ACK=1 indicates that the value in the acknowledgment number field is valid, 0 indicates invalid\",\"PSH\",\"URG=1 indicates that the urgent pointer field is valid, representing that this packet is an urgent packet. It tells the system that there is urgent data in this segment and should be transmitted as soon as possible (equivalent to high-priority data)\",\"RST\",\"RSP=1 rebuilds the connection, if the RST bit is received, some errors usually occur\",\"SYN\",\"SYN=1 indicates that this is a connection request or connection acceptance message, generally used in the handshake stage\",\"FIN\",\"FIN=1 indicates that the data of the sender of this segment has been sent and requests to release the transport connection\",\"Receive Window\",\"Used for flow control, indicating the number of bytes the receiver is willing to receive, range 0~65535 bytes\",\"Checksum\",\"The checksum covers the entire TCP segment, i.e., the TCP header and TCP data. This is a mandatory field, it must be calculated and stored by the sender, and verified by the receiver\",\"Urgent Data Pointer\",\"When URG=1 is valid, it is a positive offset, and the sum with the value in the sequence number represents the sequence number of the last byte of urgent data\",\"Options\",\"Used when the sender and receiver negotiate the maximum segment length (MSS) (only exists in SYN messages) or used as a window adjustment factor in high-speed network environments, can also store timestamp data\"]},\"106\":{\"h\":\"TCP State Machine\",\"t\":[\"TCP Stateful\"]},\"107\":{\"h\":\"TCP Three-Way Handshake\",\"t\":[\"TCP Connection\",\"Three-Way Handshake Process\",\"The client sends SYN=1, and specifies the client's initial sequence number ISN, i.e., x.\",\"The server sends its own SYN segment as an acknowledgment, also specifying its own ISN, i.e., y. To acknowledge the client's SYN, it sets ACK to x+1. In this way, each time a SYN is sent, the sequence number will increase by 1. If there is a loss, it will be retransmitted.\",\"To acknowledge the server's SYN, the client sets ACK to y+1 in the returned value.\",\"TCP Four-Way Handshake\",\"The client sends FIN=1, and includes its current sequence number x+2. It also includes an ACK=y+1 to acknowledge the data most recently received from the other side.\",\"The server adds 1 to the value x+2 as the ACK sequence number, indicating that the previous packet has been received. At this time, the upper-layer application will be notified that the other end has initiated a shutdown operation, which usually causes the application to initiate its own shutdown operation.\",\"The server initiates its own FIN=1, seq=y+1.\",\"The client acknowledges, sends ACK=y+2 to the server.\",\"Why is a three-way handshake needed? What is its purpose?\",\"Details\",\"The process of TCP establishing a connection is the process of synchronizing sequence numbers, SYN (Synchronize Sequence Numbers) is to synchronize sequence numbers. Therefore, the purpose of the three-way handshake is to allow the client (Client) and the server (Service) to obtain each other's sequence number.\",\"Why is a four-way handshake needed? What is its purpose?\",\"Details\",\"The reason why a four-way handshake is needed is because TCP is a full-duplex protocol, i.e., both the client and the server can actively send messages, so both ends need to send disconnect instructions after the transmission is completed, and need to send FIN=1 separately to disconnect, and use ACK to determine whether the sending was successful.\",\"What happens if SYN times out during connection?\",\"Details\",\"If the client sends a SYN command, and drops the line before the server returns the SYN command, the server will try to resend the SYN-ACK command. Under Linux, the default is to retry 5 times, the interval time starts to double from 1s, i.e., 1s, 2s, 4s, 8s, 16s, so the timeout time is 1s + 2s + 4s+ 8s+ 16s + 32s = 63s. After the timeout, TCP will disconnect.\"]},\"108\":{\"h\":\"Basic\"},\"109\":{\"h\":\"Pointer\"},\"110\":{\"h\":\"What is a pointer and a pointer variable?\",\"t\":[\"Answer\",\"Ordinary variables store data, while pointer variables store the address of the data.\",\"Learning about pointers mainly involves two operators & and *.\",\"&: Address operator, used to get the address from a variable\",\"// Define an ordinary variable and print it num := 99 fmt.Println(num) //output: 99 ptr := &num fmt.Println(ptr) //output: for example: 0xc000086020 \",\"*: Dereference operator, used to get data from an address\",\"tamp := *ptr fmt.Println(tamp) //output: 99 \"]},\"111\":{\"h\":\"Why use pointers?\",\"t\":[\"Answer\",\"Significance One: Easy Coding\",\"Pointers play an important role in data structures. Through pointers, we can create complex data structures such as linked lists, trees, and graphs. Pointers can easily access and manipulate relationships between nodes in data structures, thereby achieving efficient data storage and retrieval.\",\"Pointers can pass references of data between functions, instead of copying the entire data. This can save memory space and improve the execution efficiency of the program. By passing pointers, functions can directly modify the original data without needing to return a value.\",\"Significance Two: Save Memory\",\"Pointers can directly access and modify data in memory. Through pointers, we can dynamically allocate memory at runtime to meet the needs of the program, and release memory when it is not needed, avoiding memory leaks.\",\"Pointers can dynamically allocate memory during program execution. Through dynamic memory allocation, we can allocate and release memory as needed, thereby improving the flexibility and efficiency of the program.\"]},\"112\":{\"h\":\"Which objects can be addressed and which cannot?\",\"t\":[\"Answer\",\"The following objects can be addressed using & to obtain their memory addresses:\",\"Variables\",\"Pointers\",\"Arrays, slices, and their internal data\",\"Struct pointers\",\"Map\",\"The following objects cannot be addressed:\",\"Structs\",\"Constants\",\"Literals\",\"Functions\",\"Non-pointer elements of maps\",\"Array literals\"]},\"113\":{\"h\":\"Literal\"},\"114\":{\"h\":\"What does literal mean?\",\"t\":[\"Answer\",\"The text of these basic type values below is a basic type literal.\",\"Basic Type\",\"Collection\",\"Boolean Type\",\"bool\",\"String Type\",\"string\",\"Complex Type\",\"complex64complex128\",\"Float Type\",\"float32float64\",\"Integer Type\",\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",\"For example:\",\"s := \\\"hello world\\\" // \\\"hello world\\\" is the literal value n := 10 // 10 is the literal value \",\"An unnamed constant is a special kind of constant that doesn't have a specific name. This kind of constant only has a value, and there is no variable name associated with it. The following strings are string literals, which are unnamed constants.\",\"\\\"hello，world\\\" \\\"123\\\" \"]},\"115\":{\"h\":\"Can different literals have the same value?\",\"t\":[\"Answer\",\"A value can be represented by multiple literals. For example, the decimal value 21 can be represented by three different literals\",\"Decimal\",\"Octal\",\"Binary\",\"Hexadecimal\",\"21\",\"0o25\",\"0b0001 0101\",\"0x15\",\"import \\\"fmt\\\" func main() { fmt.Println(21 == 0o25) fmt.Println(21 == 0x15 ) fmt.Println(21 == 0b0001 0101) }// The result of the run shows that they are equal \"]},\"116\":{\"h\":\"What is the difference between a literal and a variable?\",\"t\":[\"Answer\",\"A literal is an unnamed constant, just like a constant, it is not addressable.\",\"For example\",\"func run() string { return \\\"fast\\\" } func main() { fmt.Println(&run()) } \",\"./main.go:10:14: cannot take the address of run() \",\"If you do not use a variable name to hold it, the text value of a string returned by a function, which is a string literal, and this kind of literal is not addressable, an error will occur. To use & to address, you must use a variable name to hold it.\",\"But the following is correct\",\"func run() string { return \\\"fast\\\" } func main() { t := run() fmt.Println(&t) } \"]},\"117\":{\"h\":\"What is a composite literal?\",\"t\":[\"Answer\",\"A composite literal is a way to define and initialize an object together. In other words, a composite literal is used to construct values for structures, arrays, slices, and maps, and each time a new value is created. They are followed by the type of the literal, curly braces, and a list of elements. Each element can optionally be preceded by a related key.\",\"Using composite literals can be simpler, and the composite literal methods for structures, arrays, slices, and maps are as follows.\",\"Structures use composite literals to define and initialize\",\"type man struct { nationality string height int } func main() { // Declare and assign properties su := man{ nationality: \\\"China\\\", height: 180, } } \",\"Structures use the cumbersome conventional method as follows\",\"type man struct { nationality string height int } func main() { // Declare object var su man // Assign properties su.nationality = \\\"China\\\" su.height = 180 } \",\"Map uses composite literal method for definition and initialization as follows\",\"m := map[string]int { \\\"math\\\": 96, \\\"Chinese\\\": 90, } \",\"Similarly, arrays use composite literal method for definition and initialization as follows\",\"colours := [3]string{\\\"black\\\", \\\"red\\\", \\\"white\\\"} \",\"Slices use composite literal method as follows\",\"s := []string{\\\"red\\\", \\\"black\\\"} // The capacity and length of the slice will be automatically filled in \"]},\"118\":{\"h\":\"Others\"},\"119\":{\"h\":\"What is the difference between and in Go?\",\"t\":[\"Answer\",\"In Go language, byte and rune are both types used to represent characters, but there are some differences between them:\"]},\"120\":{\"h\":\"Different types:\",\"t\":[\"byte: byte, is an alias type of uint8\",\"rune: character, is an alias type of int32\"]},\"121\":{\"h\":\"Different stored characters:\",\"t\":[\"//byte is used to represent ASCII code characters, can only store characters within the range of 0-255. var a byte = 'Y' // ASCII code character //rune is used to represent Unicode characters, can store any Unicode character. var b rune = '酥' // Unicode character \"]},\"122\":{\"h\":\"Different byte sizes occupied: byte occupies 1 byte, rune occupies 4 bytes.\",\"t\":[\"import \\\"unsafe\\\" var a byte = 'Y' var b rune = '酥' fmt.Printf(\\\"a occupies %d bytes\\\\nb occupies %d bytes\\\", unsafe.Sizeof(a), unsafe.Sizeof(b)) // Output: a occupies 1 byte b occupies 4 bytes \"]},\"123\":{\"h\":\"Different character ranges represented:\",\"t\":[\"Since the value that the byte type can represent is limited, there are only 2^8=256. So if you want to represent Chinese, you can only use the rune type.\",\"Here is the English translation of your text:\"]},\"124\":{\"h\":\"What are deep copy and shallow copy in golang?\",\"t\":[\"Answer\",\"What is copying?\",\"The simplest form of copying is as follows\",\"a := 648 b := a //copy a to b \",\"So what are deep copy and shallow copy?\",\"Deep and shallow copying also depend on the type.\",\"Type\",\"Details\",\"Reference type\",\"SliceMapChannelsInterfacesFunctions\",\"Value type\",\"StringArrayIntStructFloatBool\",\"The effects of copying two types are different. Let's first talk about the value type that we are more familiar with. As can be seen from the question of what is copying, if it is a value type, a new space will be allocated to store the value every time it is copied, and the two copied value types are independent and do not affect each other.\",\"Take the reference type slice as an example to talk about deep copy and shallow copy\",\"Type\",\"Example\",\"Deep copy\",\"copy(slice1, slice2)\",\"Shallow copy\",\"slice1 = slice2\",\"Shallow copy only changes the pointer, as follows\",\"package main import \\\"fmt\\\" func main() { var slice1 = []int{7, 8, 9} var slice2 = make([]int, 3) //slice initialization slice2 = slice1 //shallow copy changes the pointer of slice2 fmt.Println(slice1) slice2[0] = 648 // change slice2[0], slice1[0] also changes fmt.Println(slice2) fmt.Println(slice1) } \",\"The output is as follows\",\"[7 8 9] [648 8 9] [648 8 9] \",\"So for slices, shallow copy changes its address.\",\"And deep copy will change the array value in the memory of the address, as follows\",\"package main import \\\"fmt\\\" func main() { var slice1 = []int{7, 8, 9} var slice2 = make([]int, 3) //slice initialization copy(slice2, slice1) //deep copy will change the array value in the memory of the address fmt.Println(slice2) slice2[0] = 648 // change slice2[0], slice1[0] remains unchanged fmt.Println(slice2) fmt.Println(slice1) } \",\"[7 8 9] [648 8 9] [7 8 9] \"]},\"125\":{\"h\":\"What's the difference between and ?\",\"t\":[\"Answer\",\"new is used to allocate memory for any type and return a pointer to that type, initializing the value to zero.\",\"new is not commonly used\",\"package main import \\\"fmt\\\" func main() { s := new(string) n := new(int) fmt.Println(s) // 0xc00008a030 fmt.Println(*s) // \\\"\\\" fmt.Println(n) // 0xc00000a0d8 fmt.Println(*n) // 0 } \",\"make is mainly used for initializing slices, map, and channel.\",\"package main import \\\"fmt\\\" func main() { m := make(map[string]int, 10) fmt.Println(m) // map[] } \"]},\"126\":{\"h\":\"What's the difference between arrays and slices?\",\"t\":[\"Answer\",\"The length of an array is fixed, determined at creation, and cannot be changed. The length of a slice is dynamic and will automatically expand based on the data added.\",\"When passing parameters in functions, data is passed by value, while slices are passed by reference.\",\"Slices have a capacity (capacity) parameter, arrays do not.\"]},\"127\":{\"h\":\"If adds data at the same time, will execute indefinitely?\",\"t\":[\"Answer\",\"No, when executing for range, what is actually traversed is a copy of the variable, so changing the traversed variable will not have an impact.\",\"package main import \\\"fmt\\\" func main() { n := []int{1, 2, 3} for _, v := range n { n = append(n, v) } fmt.Println(n) // Result: [1 2 3 1 2 3] } \"]},\"128\":{\"h\":\"What is the execution order of multiple defers?\",\"t\":[\"Answer\",\"The execution order is similar to a stack, first in, last out.\",\"package main import \\\"fmt\\\" func main() { defer func() { fmt.Println(1) }() defer func() { fmt.Println(2) }() defer func() { fmt.Println(3) }() } // Result: // 3 // 2 // 1 \"]},\"129\":{\"h\":\"What is data overflow?\",\"t\":[\"Answer\",\"When using numeric types, if the data reaches the maximum value, the next data will overflow, such as uint will start from 0 after overflow, int will become negative after overflow.\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { var n int8 = math.MaxInt8 var m uint8 = math.MaxUint8 n += 2 m += 1 fmt.Println(n) // -127 fmt.Println(m) // 0 } \",\"How to avoid?\",\"Use uint for positive numbers first, the range is larger\",\"Add judgment code to determine whether it overflows\"]},\"130\":{\"h\":\"Should function parameters use value or pointer?\",\"t\":[\"Answer\",\"Value transfer\",\"Generally speaking, value transfer can be used for common types. The advantage of value transfer is that modifications to the value within the function will not affect the original variable and will not cause concurrency problems. The disadvantage is that value transfer will copy a copy of the corresponding variable, which will occupy more memory. If the input structure is very large, it is not suitable to use value transfer.\",\"Pointer and reference transfer\",\"The advantage of using pointer transfer is that it directly transfers the address of the variable, without the need for extra space. The disadvantage is that data modification during concurrent operations will affect the original data. Passing in a slice is actually passing the pointer of the slice to avoid repeated copying. If an array is passed in, it is value transfer, and a copy will be made.\"]},\"131\":{\"h\":\"Map\"},\"132\":{\"h\":\"Can an uninitialized Map read a key?\",\"t\":[\"Answer\",\"Yes, an uninitialized map that hasn't undergone make initialization will return the zero value of the current type for any key read.\",\"package main import \\\"fmt\\\" func main() { var m map[int]int fmt.Println(m[1]) } // Output: // 0 \"]},\"133\":{\"h\":\"What happens if you assign a value to an uninitialized Map?\",\"t\":[\"Answer\",\"It will trigger a panic exception error.\",\"package main func main() { var m map[int]int m[1] = 1 } // Output: // panic: assignment to entry in nil map \"]},\"134\":{\"h\":\"What happens if you delete a key from an uninitialized Map?\",\"t\":[\"Answer\",\"In earlier versions, performing a delete operation on an uninitialized map would throw a panic error. In current versions, performing a delete operation on an uninitialized map will not cause an error.\",\"package main func main() { var m map[int]int delete(m, 1) } // Output: // \"]},\"135\":{\"h\":\"Medium\"},\"136\":{\"h\":\"Have you used ? What are the use cases for ?\",\"t\":[\"Answer\",\"Scenario\",\"Introduction\",\"Timeout handling\",\"By using context, you can easily set a timeout, and the coroutine will automatically terminate after the timeout\",\"Terminate coroutine\",\"By using the cancel() method, coroutines can be easily terminated\",\"Data transfer\",\"We can write data into context to transfer data between different coroutines\"]},\"137\":{\"h\":\"Is thread-safe?\",\"t\":[\"Answer\",\"channel is thread-safe, the reason is that channel has implemented a lock mechanism internally,\"]},\"138\":{\"h\":\"Is the traversal of a Map using range ordered or unordered?\",\"t\":[\"Answer\",\"Unordered\",\"Internally, Map uses a hash algorithm to place elements. When it automatically expands, it recalculates the hash values, so the addresses of the elements keep changing. To prevent users from thinking that the arrangement of Map elements is ordered, it directly returns in a random order, so the traversal is unordered.\"]},\"139\":{\"h\":\"Is Map concurrency-safe?\",\"t\":[\"Answer\",\"Map cannot guarantee concurrency safety\",\"To ensure concurrency safety, use the following methods:\",\"Manually add read-write locks\",\"Use sync.Map\"]},\"140\":{\"h\":\"Will the memory of a key be released after the key is deleted from the Map?\",\"t\":[\"Answer\",\"If the value of the map is\",\"Value type (intuintfloat32stringstruct{}...), then the value will not be garbage collected after the key is deleted\",\"Reference type (mapsliceschan ...), then the value will be garbage collected after the key is deleted\",\"If we want to force garbage collection, how do we operate?\",\"Set the map to nil\",\"Place the values that need to be retained in a new map and assign it to the current map\",\"Exclusive for members\",\"Code combat analysis\"]}},\"dirtCount\":0,\"index\":[[\"酥\",{\"1\":{\"121\":1,\"122\":1}}],[\"β\",{\"1\":{\"102\":2}}],[\"γ\",{\"1\":{\"102\":3}}],[\"α\",{\"1\":{\"102\":3}}],[\"^=\",{\"1\":{\"53\":2}}],[\"^\",{\"1\":{\"52\":3,\"53\":1,\"55\":2}}],[\"||\",{\"1\":{\"55\":1}}],[\"|=\",{\"1\":{\"53\":2}}],[\"|\",{\"1\":{\"52\":3,\"53\":1,\"55\":1}}],[\"q\",{\"1\":{\"52\":4}}],[\"quit\",{\"1\":{\"32\":6}}],[\"question\",{\"1\":{\"124\":1}}],[\"questions\",{\"1\":{\"1\":1}}],[\"query\",{\"1\":{\"12\":2}}],[\"queries\",{\"1\":{\"5\":1}}],[\"~\",{\"1\":{\"37\":2}}],[\"∞\",{\"1\":{\"37\":1}}],[\"zero\",{\"0\":{\"47\":1},\"1\":{\"34\":1,\"47\":2,\"79\":2,\"125\":1,\"132\":1}}],[\"z=\",{\"1\":{\"4\":1}}],[\"vs\",{\"0\":{\"98\":1,\"100\":2}}],[\"view\",{\"1\":{\"97\":2}}],[\"virtual\",{\"1\":{\"94\":1}}],[\"verify\",{\"1\":{\"101\":3}}],[\"verification\",{\"1\":{\"99\":1,\"101\":1,\"102\":1}}],[\"verified\",{\"1\":{\"99\":1,\"105\":1}}],[\"verifies\",{\"1\":{\"99\":1}}],[\"versions\",{\"1\":{\"134\":2}}],[\"version\",{\"1\":{\"97\":2,\"102\":1}}],[\"very\",{\"1\":{\"84\":1,\"97\":1,\"101\":1,\"130\":1}}],[\"v\",{\"1\":{\"30\":6,\"127\":2}}],[\"valid\",{\"1\":{\"99\":1,\"105\":3}}],[\"validity\",{\"1\":{\"99\":1,\"102\":2}}],[\"val\",{\"1\":{\"64\":4,\"66\":4,\"79\":1,\"80\":1,\"88\":7}}],[\"val2\",{\"1\":{\"21\":4}}],[\"val1\",{\"1\":{\"21\":4}}],[\"valuetype\",{\"1\":{\"44\":2,\"63\":2}}],[\"values\",{\"1\":{\"17\":1,\"34\":1,\"41\":1,\"47\":1,\"64\":1,\"85\":1,\"114\":1,\"117\":1,\"138\":1,\"140\":1}}],[\"value2\",{\"1\":{\"16\":1}}],[\"value1\",{\"1\":{\"16\":1}}],[\"value\",{\"0\":{\"47\":1,\"65\":1,\"115\":1,\"130\":1,\"133\":1},\"1\":{\"16\":2,\"25\":1,\"44\":5,\"47\":1,\"52\":1,\"63\":5,\"64\":23,\"65\":10,\"66\":3,\"79\":2,\"85\":1,\"89\":1,\"105\":5,\"107\":2,\"111\":1,\"114\":3,\"115\":2,\"116\":1,\"117\":1,\"123\":1,\"124\":7,\"125\":1,\"126\":1,\"129\":1,\"130\":7,\"132\":1,\"140\":4}}],[\"var\",{\"1\":{\"21\":7,\"29\":1,\"39\":1,\"40\":1,\"41\":1,\"43\":1,\"44\":1,\"46\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"70\":1,\"117\":1,\"121\":2,\"122\":2,\"124\":4,\"129\":2,\"132\":1,\"133\":1,\"134\":1}}],[\"variables\",{\"1\":{\"21\":3,\"34\":1,\"110\":2,\"112\":1}}],[\"variable\",{\"0\":{\"110\":1,\"116\":1},\"1\":{\"20\":1,\"21\":2,\"46\":3,\"52\":1,\"74\":1,\"110\":2,\"114\":1,\"116\":2,\"127\":2,\"130\":3}}],[\"variadic\",{\"1\":{\"17\":1}}],[\"various\",{\"1\":{\"14\":1}}],[\"+∞\",{\"1\":{\"37\":2}}],[\"+=\",{\"1\":{\"34\":1,\"53\":2,\"129\":2}}],[\"++\",{\"1\":{\"31\":1,\"34\":1,\"43\":1,\"49\":1}}],[\"+\",{\"1\":{\"30\":1,\"39\":4,\"49\":2,\"53\":2,\"55\":1,\"107\":3}}],[\">>=\",{\"1\":{\"53\":2}}],[\">>\",{\"1\":{\"52\":2,\"53\":1,\"55\":1}}],[\">=\",{\"1\":{\"30\":1,\"50\":2,\"55\":1}}],[\">\",{\"1\":{\"28\":1,\"50\":2,\"55\":1}}],[\"<<=\",{\"1\":{\"53\":2}}],[\"<<\",{\"1\":{\"52\":2,\"53\":1,\"55\":1}}],[\"<=\",{\"1\":{\"30\":1,\"50\":2,\"55\":1}}],[\"<\",{\"1\":{\"23\":1,\"30\":1,\"31\":1,\"32\":5,\"34\":1,\"43\":1,\"50\":2,\"55\":1,\"78\":4,\"79\":1,\"80\":3,\"81\":1,\"85\":1,\"90\":1,\"91\":1}}],[\"language\",{\"1\":{\"119\":1}}],[\"larger\",{\"1\":{\"129\":1}}],[\"large\",{\"1\":{\"105\":1,\"130\":1}}],[\"layer\",{\"0\":{\"93\":1},\"1\":{\"93\":6,\"94\":3,\"104\":1,\"107\":1}}],[\"last\",{\"1\":{\"34\":1,\"105\":2,\"128\":1}}],[\"lucky\",{\"1\":{\"45\":1}}],[\"locks\",{\"1\":{\"139\":1}}],[\"lock\",{\"1\":{\"137\":1}}],[\"local\",{\"1\":{\"98\":1}}],[\"locations\",{\"1\":{\"97\":1}}],[\"location\",{\"1\":{\"31\":1}}],[\"loss\",{\"1\":{\"107\":1}}],[\"lower\",{\"1\":{\"97\":1}}],[\"low\",{\"1\":{\"55\":1}}],[\"logical\",{\"0\":{\"51\":1}}],[\"loop\",{\"1\":{\"30\":3,\"79\":1}}],[\"limited\",{\"1\":{\"123\":1}}],[\"literal\",{\"0\":{\"113\":1,\"114\":1,\"116\":1,\"117\":1},\"1\":{\"114\":3,\"116\":3,\"117\":7}}],[\"literals\",{\"0\":{\"115\":1},\"1\":{\"112\":2,\"114\":1,\"115\":2,\"117\":2}}],[\"linux\",{\"1\":{\"107\":1}}],[\"linked\",{\"1\":{\"111\":1}}],[\"link\",{\"1\":{\"93\":3,\"94\":2}}],[\"line\",{\"1\":{\"18\":2,\"100\":1,\"107\":1}}],[\"like\",{\"1\":{\"64\":1,\"65\":1,\"116\":1}}],[\"lib\",{\"1\":{\"18\":3}}],[\"lists\",{\"1\":{\"111\":1}}],[\"list\",{\"1\":{\"17\":1,\"97\":1,\"99\":1,\"117\":1}}],[\"leaks\",{\"1\":{\"111\":1}}],[\"learning\",{\"1\":{\"110\":1}}],[\"learn\",{\"1\":{\"4\":1}}],[\"legal\",{\"1\":{\"102\":1}}],[\"let\",{\"1\":{\"101\":1,\"124\":1}}],[\"len\",{\"1\":{\"67\":2,\"72\":2,\"74\":1}}],[\"length\",{\"0\":{\"67\":1,\"72\":1},\"1\":{\"67\":1,\"72\":2,\"74\":1,\"105\":5,\"117\":1,\"126\":2}}],[\"less\",{\"1\":{\"50\":2,\"105\":1}}],[\"left\",{\"0\":{\"10\":1},\"1\":{\"10\":1,\"12\":1,\"50\":4,\"52\":1,\"53\":1,\"78\":1}}],[\"place\",{\"1\":{\"138\":1,\"140\":1}}],[\"play\",{\"1\":{\"111\":1}}],[\"plaintext\",{\"1\":{\"99\":4}}],[\"ptr\",{\"1\":{\"110\":3}}],[\"psh\",{\"1\":{\"105\":1}}],[\"pseudorandom\",{\"1\":{\"99\":1}}],[\"pki\",{\"1\":{\"101\":1}}],[\"ppp\",{\"1\":{\"94\":1}}],[\"push\",{\"1\":{\"100\":1}}],[\"put\",{\"1\":{\"96\":3}}],[\"purposes\",{\"1\":{\"101\":1}}],[\"purpose\",{\"1\":{\"93\":1,\"99\":1,\"107\":3}}],[\"public\",{\"1\":{\"18\":1,\"21\":2,\"99\":3,\"101\":4,\"102\":6}}],[\"physical\",{\"1\":{\"93\":2,\"94\":3}}],[\"pieces\",{\"1\":{\"73\":1}}],[\"piece\",{\"1\":{\"73\":1}}],[\"port\",{\"1\":{\"98\":3,\"105\":4}}],[\"possible\",{\"1\":{\"105\":1}}],[\"post\",{\"1\":{\"96\":2,\"97\":1}}],[\"positive\",{\"1\":{\"37\":2,\"105\":1,\"129\":1}}],[\"position\",{\"1\":{\"31\":1}}],[\"pointed\",{\"1\":{\"105\":1}}],[\"pointer\",{\"0\":{\"46\":1,\"109\":1,\"110\":2,\"130\":1},\"1\":{\"46\":1,\"47\":1,\"54\":1,\"105\":3,\"110\":1,\"112\":1,\"124\":2,\"125\":1,\"130\":3}}],[\"pointers\",{\"0\":{\"46\":1,\"111\":1},\"1\":{\"46\":2,\"110\":1,\"111\":8,\"112\":2}}],[\"pointing\",{\"1\":{\"78\":1}}],[\"point\",{\"0\":{\"38\":1},\"1\":{\"38\":2,\"39\":1,\"99\":1}}],[\"persistent\",{\"1\":{\"100\":2}}],[\"personal\",{\"1\":{\"101\":1}}],[\"person\",{\"1\":{\"26\":1}}],[\"period\",{\"1\":{\"99\":1,\"102\":2}}],[\"permanently\",{\"1\":{\"97\":3}}],[\"performing\",{\"1\":{\"134\":2}}],[\"perform\",{\"1\":{\"29\":1,\"34\":1,\"35\":1}}],[\"passing\",{\"1\":{\"111\":1,\"126\":1,\"130\":2}}],[\"pass\",{\"1\":{\"111\":1}}],[\"password\",{\"1\":{\"101\":1}}],[\"passes\",{\"1\":{\"99\":1}}],[\"passed\",{\"1\":{\"93\":1,\"126\":2,\"130\":1}}],[\"patch\",{\"1\":{\"96\":2}}],[\"path\",{\"1\":{\"44\":2,\"63\":2}}],[\"packet\",{\"1\":{\"93\":1,\"105\":6,\"107\":1}}],[\"packets\",{\"1\":{\"93\":1,\"94\":1}}],[\"package\",{\"1\":{\"18\":3,\"19\":2,\"29\":1,\"31\":1,\"32\":1,\"34\":2,\"35\":1,\"40\":1,\"43\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"64\":1,\"65\":1,\"66\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":1,\"81\":1,\"88\":1,\"90\":1,\"91\":1,\"124\":2,\"125\":2,\"127\":1,\"128\":1,\"129\":1,\"132\":1,\"133\":1,\"134\":1}}],[\"packages\",{\"1\":{\"18\":3}}],[\"panic\",{\"1\":{\"79\":1,\"133\":2,\"134\":1}}],[\"pair\",{\"1\":{\"65\":2,\"101\":1,\"102\":1}}],[\"pairs\",{\"0\":{\"65\":1},\"1\":{\"25\":1,\"64\":2}}],[\"padded\",{\"1\":{\"52\":2}}],[\"parsing\",{\"1\":{\"102\":1}}],[\"parent\",{\"1\":{\"89\":1}}],[\"parentheses\",{\"1\":{\"21\":1,\"55\":1}}],[\"party\",{\"1\":{\"105\":1}}],[\"parties\",{\"1\":{\"98\":2,\"102\":1}}],[\"partial\",{\"1\":{\"96\":1,\"97\":2}}],[\"part\",{\"1\":{\"39\":1,\"97\":1}}],[\"parameter\",{\"1\":{\"17\":1,\"126\":1}}],[\"parameters\",{\"0\":{\"130\":1},\"1\":{\"17\":2,\"126\":1}}],[\"p1\",{\"1\":{\"17\":1}}],[\"p\",{\"1\":{\"17\":4,\"52\":4}}],[\"prevent\",{\"1\":{\"138\":1}}],[\"preventing\",{\"1\":{\"98\":1}}],[\"previous\",{\"1\":{\"100\":1,\"105\":1,\"107\":1}}],[\"pre\",{\"1\":{\"99\":1}}],[\"presentation\",{\"1\":{\"93\":1,\"94\":1}}],[\"preceded\",{\"1\":{\"117\":1}}],[\"precedence\",{\"0\":{\"55\":1},\"1\":{\"55\":2}}],[\"precautions\",{\"0\":{\"82\":1}}],[\"priority\",{\"1\":{\"105\":1}}],[\"principle\",{\"0\":{\"99\":1}}],[\"print\",{\"1\":{\"63\":1,\"64\":6,\"80\":1,\"110\":1}}],[\"printf\",{\"1\":{\"40\":1,\"64\":3,\"122\":1}}],[\"println\",{\"1\":{\"28\":2,\"29\":11,\"30\":5,\"31\":2,\"32\":2,\"34\":3,\"35\":3,\"43\":1,\"44\":1,\"45\":1,\"58\":1,\"59\":2,\"60\":4,\"61\":1,\"63\":1,\"64\":3,\"65\":2,\"66\":4,\"70\":1,\"71\":1,\"72\":1,\"73\":3,\"74\":2,\"80\":4,\"81\":2,\"88\":4,\"90\":2,\"91\":2,\"110\":3,\"115\":3,\"116\":2,\"124\":6,\"125\":5,\"127\":1,\"128\":3,\"129\":2,\"132\":1}}],[\"private\",{\"1\":{\"21\":2,\"99\":1,\"101\":2,\"102\":2}}],[\"primary\",{\"1\":{\"3\":10}}],[\"properties\",{\"1\":{\"117\":2}}],[\"proves\",{\"1\":{\"102\":1}}],[\"provided\",{\"1\":{\"97\":1}}],[\"provides\",{\"1\":{\"1\":1,\"57\":1,\"58\":1,\"93\":2,\"94\":1,\"101\":1}}],[\"providing\",{\"1\":{\"97\":1,\"98\":1}}],[\"protection\",{\"1\":{\"101\":1}}],[\"protecting\",{\"1\":{\"101\":1}}],[\"protect\",{\"1\":{\"101\":1}}],[\"protocols\",{\"1\":{\"93\":1,\"97\":2}}],[\"protocol\",{\"1\":{\"93\":5,\"94\":1,\"97\":1,\"98\":1,\"99\":1,\"104\":2,\"107\":1}}],[\"prohibits\",{\"1\":{\"97\":1}}],[\"proxy\",{\"1\":{\"97\":5}}],[\"processed\",{\"1\":{\"97\":4}}],[\"processing\",{\"1\":{\"97\":2,\"98\":1}}],[\"process\",{\"1\":{\"93\":1,\"97\":1,\"98\":1,\"99\":2,\"101\":1,\"102\":2,\"107\":3}}],[\"problems\",{\"1\":{\"82\":1,\"93\":1,\"130\":1}}],[\"problem\",{\"1\":{\"68\":1}}],[\"program\",{\"1\":{\"14\":2,\"35\":1,\"111\":4}}],[\"product\",{\"1\":{\"4\":6}}],[\"0xc00000a0d8\",{\"1\":{\"125\":1}}],[\"0xc00008a030\",{\"1\":{\"125\":1}}],[\"0xc000086020\",{\"1\":{\"110\":1}}],[\"0x15\",{\"1\":{\"115\":2}}],[\"0101\",{\"1\":{\"115\":2}}],[\"0111\",{\"1\":{\"52\":2}}],[\"0110\",{\"1\":{\"52\":2}}],[\"0b0001\",{\"1\":{\"115\":2}}],[\"0o25\",{\"1\":{\"115\":2}}],[\"0~15\",{\"1\":{\"105\":1}}],[\"0~65535\",{\"1\":{\"105\":3}}],[\"0001\",{\"1\":{\"52\":2}}],[\"0000\",{\"1\":{\"52\":2}}],[\"0011\",{\"1\":{\"52\":1}}],[\"0+0i\",{\"1\":{\"47\":1}}],[\"0\",{\"0\":{\"100\":2},\"1\":{\"16\":1,\"28\":1,\"31\":2,\"32\":3,\"34\":1,\"37\":2,\"43\":2,\"47\":6,\"52\":12,\"71\":1,\"72\":5,\"73\":4,\"74\":3,\"93\":1,\"96\":1,\"97\":1,\"100\":2,\"105\":1,\"121\":1,\"124\":6,\"125\":1,\"129\":2,\"132\":1}}],[\"hpack\",{\"1\":{\"100\":1}}],[\"how\",{\"0\":{\"102\":1},\"1\":{\"129\":1,\"140\":1}}],[\"holder\",{\"1\":{\"102\":4}}],[\"hold\",{\"1\":{\"99\":1,\"116\":2}}],[\"host\",{\"1\":{\"93\":1}}],[\"hypertext\",{\"1\":{\"98\":2}}],[\"https\",{\"0\":{\"98\":1},\"1\":{\"98\":5,\"99\":4}}],[\"http1\",{\"1\":{\"97\":2}}],[\"http\",{\"0\":{\"95\":1,\"97\":1,\"98\":1,\"100\":1},\"1\":{\"93\":1,\"94\":1,\"96\":3,\"97\":1,\"98\":6,\"100\":4}}],[\"higher\",{\"1\":{\"97\":1}}],[\"high\",{\"1\":{\"55\":1,\"105\":2}}],[\"hi\",{\"1\":{\"40\":1}}],[\"height\",{\"1\":{\"117\":4}}],[\"hexadecimal\",{\"1\":{\"115\":1}}],[\"help\",{\"1\":{\"101\":2}}],[\"hello\",{\"1\":{\"16\":1,\"28\":1,\"29\":1,\"34\":2,\"114\":3}}],[\"headers\",{\"1\":{\"100\":1}}],[\"header\",{\"0\":{\"105\":1},\"1\":{\"96\":1,\"97\":2,\"100\":1,\"105\":7}}],[\"head\",{\"1\":{\"96\":2,\"100\":1}}],[\"here\",{\"1\":{\"26\":1,\"97\":1,\"123\":1}}],[\"happens\",{\"0\":{\"133\":1,\"134\":1},\"1\":{\"107\":1}}],[\"handshake\",{\"0\":{\"107\":1},\"1\":{\"105\":1,\"107\":6}}],[\"handling\",{\"0\":{\"56\":1},\"1\":{\"136\":1}}],[\"having\",{\"1\":{\"100\":1}}],[\"have\",{\"0\":{\"115\":1,\"136\":1},\"1\":{\"3\":3,\"101\":1,\"114\":1,\"126\":1,\"127\":1}}],[\"hasn\",{\"1\":{\"132\":1}}],[\"hash\",{\"1\":{\"25\":1,\"102\":1,\"138\":2}}],[\"has\",{\"1\":{\"14\":1,\"34\":1,\"74\":1,\"79\":1,\"97\":11,\"105\":3,\"107\":2,\"114\":1,\"137\":1}}],[\"==\",{\"1\":{\"30\":1,\"31\":1,\"50\":2,\"55\":1,\"115\":3}}],[\"=range\",{\"1\":{\"30\":3}}],[\"=0\",{\"1\":{\"30\":1}}],[\"=\",{\"1\":{\"16\":6,\"20\":1,\"21\":4,\"23\":2,\"25\":2,\"29\":2,\"30\":2,\"31\":1,\"32\":5,\"34\":2,\"39\":2,\"40\":2,\"41\":2,\"42\":1,\"43\":2,\"44\":2,\"45\":1,\"46\":2,\"50\":2,\"51\":2,\"53\":22,\"55\":1,\"58\":2,\"59\":3,\"60\":3,\"61\":3,\"63\":3,\"64\":8,\"65\":5,\"66\":6,\"70\":3,\"71\":1,\"72\":1,\"73\":3,\"74\":3,\"77\":2,\"79\":1,\"80\":1,\"81\":1,\"87\":2,\"88\":4,\"90\":1,\"91\":1,\"107\":1,\"110\":3,\"114\":2,\"116\":1,\"117\":6,\"121\":2,\"122\":2,\"124\":10,\"125\":3,\"127\":3,\"129\":2,\"133\":1}}],[\"8s+\",{\"1\":{\"107\":1}}],[\"8s\",{\"1\":{\"107\":1}}],[\"80\",{\"1\":{\"98\":1}}],[\"8\",{\"1\":{\"7\":3,\"8\":1,\"10\":3,\"11\":1,\"12\":3,\"37\":1,\"43\":1,\"124\":8}}],[\"90\",{\"1\":{\"117\":1}}],[\"96\",{\"1\":{\"117\":1}}],[\"99\",{\"1\":{\"110\":3}}],[\"9\",{\"1\":{\"7\":2,\"10\":2,\"12\":2,\"43\":1,\"72\":3,\"124\":8}}],[\"70\",{\"1\":{\"49\":1}}],[\"7\",{\"1\":{\"7\":1,\"10\":1,\"12\":1,\"29\":1,\"34\":1,\"43\":1,\"124\":5}}],[\"63s\",{\"1\":{\"107\":1}}],[\"66\",{\"1\":{\"44\":1,\"63\":1}}],[\"648\",{\"1\":{\"124\":6}}],[\"64\",{\"1\":{\"37\":2,\"38\":1,\"39\":1}}],[\"6\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"29\":1,\"43\":1,\"73\":2,\"96\":1}}],[\"5xx\",{\"1\":{\"97\":1}}],[\"51\",{\"1\":{\"49\":1}}],[\"509\",{\"1\":{\"102\":2}}],[\"504\",{\"1\":{\"97\":1}}],[\"503\",{\"1\":{\"97\":1}}],[\"502\",{\"1\":{\"97\":1}}],[\"501\",{\"1\":{\"97\":1}}],[\"50\",{\"1\":{\"49\":1,\"50\":1}}],[\"5\",{\"1\":{\"7\":3,\"8\":1,\"10\":3,\"11\":1,\"12\":3,\"29\":1,\"30\":1,\"31\":1,\"35\":1,\"39\":3,\"42\":2,\"43\":1,\"55\":1,\"71\":1,\"72\":3,\"73\":2,\"74\":2,\"90\":1,\"91\":1,\"105\":2,\"107\":1}}],[\"jack\",{\"1\":{\"40\":1,\"70\":1}}],[\"jamie\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"just\",{\"1\":{\"116\":1}}],[\"justin\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"jump\",{\"1\":{\"31\":2}}],[\"judgment\",{\"1\":{\"30\":1,\"129\":1}}],[\"judgments\",{\"1\":{\"28\":1}}],[\"joins\",{\"1\":{\"12\":1}}],[\"join\",{\"0\":{\"4\":1,\"5\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"59\":1},\"1\":{\"4\":2,\"5\":1,\"8\":6,\"10\":1,\"11\":1,\"12\":10,\"59\":3,\"60\":2,\"61\":2}}],[\"4s+\",{\"1\":{\"107\":1}}],[\"4s\",{\"1\":{\"107\":1}}],[\"443\",{\"1\":{\"98\":1}}],[\"404\",{\"1\":{\"97\":1}}],[\"403\",{\"1\":{\"97\":1}}],[\"401\",{\"1\":{\"97\":1}}],[\"400\",{\"1\":{\"97\":1}}],[\"4xx\",{\"1\":{\"97\":1}}],[\"49\",{\"1\":{\"49\":1}}],[\"4\",{\"0\":{\"122\":1},\"1\":{\"6\":1,\"7\":3,\"8\":4,\"10\":5,\"11\":4,\"12\":5,\"29\":2,\"30\":1,\"31\":1,\"34\":1,\"42\":1,\"43\":1,\"55\":1,\"71\":2,\"73\":2,\"74\":2,\"122\":1}}],[\"3xx\",{\"1\":{\"97\":1}}],[\"307\",{\"1\":{\"97\":1}}],[\"305\",{\"1\":{\"97\":1}}],[\"304\",{\"1\":{\"97\":1}}],[\"303\",{\"1\":{\"97\":1}}],[\"302\",{\"1\":{\"97\":2}}],[\"301\",{\"1\":{\"97\":3}}],[\"300\",{\"1\":{\"97\":1}}],[\"30\",{\"1\":{\"49\":1}}],[\"3i\",{\"1\":{\"39\":2}}],[\"32s\",{\"1\":{\"107\":1}}],[\"32bit\",{\"1\":{\"105\":1}}],[\"32\",{\"1\":{\"37\":2,\"38\":1,\"39\":1}}],[\"3\",{\"1\":{\"6\":1,\"7\":3,\"8\":5,\"10\":5,\"11\":5,\"12\":5,\"29\":1,\"30\":2,\"31\":1,\"39\":1,\"42\":1,\"43\":1,\"55\":1,\"71\":2,\"73\":2,\"74\":2,\"81\":1,\"90\":1,\"91\":1,\"117\":1,\"124\":2,\"127\":3,\"128\":2}}],[\"2^8=256\",{\"1\":{\"123\":1}}],[\"21\",{\"1\":{\"115\":5}}],[\"2s\",{\"1\":{\"107\":2}}],[\"2xx\",{\"1\":{\"97\":1}}],[\"20byte\",{\"1\":{\"105\":2}}],[\"206\",{\"1\":{\"97\":1}}],[\"205\",{\"1\":{\"97\":1}}],[\"2049\",{\"1\":{\"102\":1}}],[\"204\",{\"1\":{\"97\":1}}],[\"203\",{\"1\":{\"97\":1}}],[\"202\",{\"1\":{\"97\":1}}],[\"201\",{\"1\":{\"97\":1}}],[\"200\",{\"1\":{\"97\":1}}],[\"20\",{\"1\":{\"23\":1,\"49\":1,\"50\":1,\"59\":1}}],[\"255\",{\"1\":{\"121\":1}}],[\"25\",{\"1\":{\"14\":1}}],[\"2\",{\"0\":{\"100\":1},\"1\":{\"4\":3,\"6\":1,\"7\":3,\"8\":5,\"10\":5,\"11\":5,\"12\":5,\"29\":3,\"30\":3,\"31\":1,\"35\":2,\"40\":1,\"42\":1,\"43\":1,\"49\":1,\"52\":4,\"53\":10,\"55\":1,\"71\":3,\"73\":4,\"74\":3,\"77\":1,\"94\":1,\"100\":1,\"127\":3,\"128\":2,\"129\":1}}],[\"180\",{\"1\":{\"117\":2}}],[\"14\",{\"1\":{\"116\":1}}],[\"1s\",{\"1\":{\"107\":3}}],[\"1950\",{\"1\":{\"102\":1}}],[\"1xx\",{\"1\":{\"97\":1}}],[\"16s\",{\"1\":{\"107\":2}}],[\"160bit\",{\"1\":{\"105\":1}}],[\"16\",{\"1\":{\"37\":1}}],[\"13\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"101\",{\"1\":{\"97\":1}}],[\"1010\",{\"1\":{\"52\":2}}],[\"1011\",{\"1\":{\"52\":2}}],[\"1000\",{\"1\":{\"49\":1,\"52\":1}}],[\"100\",{\"1\":{\"16\":1,\"97\":1}}],[\"10\",{\"1\":{\"7\":2,\"8\":1,\"10\":2,\"11\":1,\"12\":2,\"25\":2,\"30\":1,\"31\":1,\"32\":1,\"43\":1,\"46\":1,\"49\":1,\"63\":1,\"70\":1,\"78\":1,\"114\":2,\"116\":1,\"125\":1}}],[\"11\",{\"1\":{\"7\":5,\"8\":3,\"10\":5,\"11\":3,\"12\":5}}],[\"127\",{\"1\":{\"129\":1}}],[\"123\",{\"1\":{\"114\":1}}],[\"12\",{\"1\":{\"7\":7,\"8\":4,\"10\":7,\"11\":4,\"12\":7}}],[\"15\",{\"1\":{\"6\":1,\"11\":1,\"12\":1}}],[\"1\",{\"0\":{\"100\":3,\"122\":1},\"1\":{\"4\":3,\"6\":1,\"7\":2,\"8\":4,\"10\":4,\"11\":4,\"12\":4,\"16\":1,\"29\":2,\"30\":2,\"31\":1,\"32\":1,\"34\":1,\"35\":2,\"42\":1,\"43\":1,\"52\":10,\"55\":1,\"59\":1,\"71\":1,\"73\":4,\"74\":3,\"90\":2,\"93\":1,\"96\":3,\"97\":1,\"100\":3,\"107\":2,\"122\":1,\"127\":3,\"128\":2,\"129\":1,\"132\":1,\"133\":2,\"134\":1}}],[\"y+1\",{\"1\":{\"107\":1}}],[\"yet\",{\"1\":{\"97\":1}}],[\"yes\",{\"1\":{\"50\":6,\"132\":1}}],[\"y=\",{\"1\":{\"4\":1}}],[\"y\",{\"1\":{\"4\":3,\"32\":3,\"107\":1,\"121\":1,\"122\":1}}],[\"your\",{\"1\":{\"97\":1,\"123\":1}}],[\"you\",{\"0\":{\"133\":1,\"134\":1,\"136\":1},\"1\":{\"4\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"29\":3,\"34\":1,\"44\":1,\"46\":1,\"63\":1,\"64\":1,\"65\":1,\"68\":1,\"70\":1,\"74\":4,\"79\":1,\"80\":1,\"116\":2,\"123\":2,\"136\":1}}],[\"x+2\",{\"1\":{\"107\":2}}],[\"x+1\",{\"1\":{\"107\":1}}],[\"x+y\",{\"1\":{\"32\":1}}],[\"xor\",{\"1\":{\"52\":1}}],[\"x=\",{\"1\":{\"4\":1}}],[\"x\",{\"1\":{\"4\":3,\"32\":3,\"102\":2,\"107\":1}}],[\"nb\",{\"1\":{\"122\":1}}],[\"nationality\",{\"1\":{\"117\":4}}],[\"name2\",{\"1\":{\"21\":4}}],[\"name1\",{\"1\":{\"21\":4}}],[\"name\",{\"1\":{\"3\":4,\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"18\":2,\"19\":1,\"20\":1,\"21\":2,\"26\":1,\"40\":1,\"41\":1,\"45\":3,\"97\":1,\"102\":2,\"114\":2,\"116\":2}}],[\"nil\",{\"1\":{\"47\":6,\"133\":1,\"140\":1}}],[\"n\",{\"1\":{\"46\":2,\"64\":3,\"114\":1,\"125\":3,\"127\":5,\"129\":3}}],[\"negotiate\",{\"1\":{\"105\":1}}],[\"negative\",{\"1\":{\"37\":1,\"129\":1}}],[\"network\",{\"0\":{\"92\":1},\"1\":{\"93\":6,\"94\":5,\"101\":1,\"105\":1}}],[\"next\",{\"1\":{\"29\":1,\"30\":1,\"100\":1,\"105\":1,\"129\":1}}],[\"nested\",{\"1\":{\"28\":1}}],[\"newticker\",{\"1\":{\"81\":1}}],[\"new\",{\"1\":{\"20\":1,\"58\":3,\"59\":2,\"60\":2,\"61\":2,\"97\":6,\"100\":1,\"102\":1,\"117\":1,\"124\":1,\"125\":4,\"140\":1}}],[\"needing\",{\"1\":{\"111\":1}}],[\"needed\",{\"1\":{\"107\":3,\"111\":2}}],[\"needs\",{\"1\":{\"93\":1,\"97\":1,\"98\":1,\"105\":1,\"111\":1}}],[\"need\",{\"1\":{\"4\":1,\"29\":1,\"107\":2,\"130\":1,\"140\":1}}],[\"non\",{\"1\":{\"97\":2,\"100\":1,\"102\":2,\"112\":1}}],[\"none\",{\"1\":{\"94\":2}}],[\"now\",{\"1\":{\"90\":1,\"102\":1}}],[\"node\",{\"1\":{\"86\":2,\"93\":1}}],[\"nodes\",{\"0\":{\"86\":2,\"87\":1,\"88\":1},\"1\":{\"86\":4,\"89\":1,\"93\":3,\"94\":1,\"111\":1}}],[\"no\",{\"1\":{\"35\":4,\"97\":2,\"98\":1,\"114\":1,\"127\":1}}],[\"normally\",{\"1\":{\"97\":1}}],[\"normalerr\",{\"1\":{\"61\":4}}],[\"normal\",{\"1\":{\"18\":1}}],[\"notified\",{\"1\":{\"107\":1}}],[\"note\",{\"1\":{\"34\":1}}],[\"not\",{\"1\":{\"3\":1,\"10\":1,\"11\":1,\"12\":1,\"17\":1,\"50\":1,\"66\":2,\"68\":1,\"74\":1,\"96\":1,\"97\":13,\"98\":2,\"99\":1,\"100\":4,\"111\":1,\"116\":3,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"130\":3,\"134\":1,\"140\":1}}],[\"numeric\",{\"1\":{\"129\":1}}],[\"num\",{\"1\":{\"20\":2,\"34\":3,\"46\":2,\"110\":3}}],[\"numbers\",{\"0\":{\"38\":1,\"39\":1},\"1\":{\"37\":2,\"38\":2,\"39\":2,\"50\":2,\"107\":3,\"129\":1}}],[\"number\",{\"1\":{\"3\":2,\"12\":1,\"39\":2,\"97\":1,\"99\":1,\"102\":1,\"105\":14,\"107\":5}}],[\"null\",{\"1\":{\"3\":3}}],[\"mss\",{\"1\":{\"105\":1}}],[\"missing\",{\"1\":{\"97\":1}}],[\"mike\",{\"1\":{\"70\":1}}],[\"mtu\",{\"1\":{\"94\":1}}],[\"m\",{\"1\":{\"18\":2,\"25\":2,\"44\":4,\"63\":5,\"117\":1,\"125\":2,\"129\":3,\"132\":2,\"133\":2,\"134\":2}}],[\"most\",{\"1\":{\"107\":1}}],[\"moved\",{\"1\":{\"97\":4}}],[\"model\",{\"0\":{\"93\":1,\"94\":1},\"1\":{\"94\":3}}],[\"modulus\",{\"1\":{\"49\":1}}],[\"modification\",{\"1\":{\"130\":1}}],[\"modifications\",{\"1\":{\"130\":1}}],[\"modified\",{\"1\":{\"40\":1,\"42\":1,\"97\":4}}],[\"modifiers\",{\"0\":{\"33\":1},\"1\":{\"14\":1}}],[\"modify\",{\"1\":{\"14\":1,\"18\":2,\"40\":1,\"46\":1,\"102\":1,\"111\":2}}],[\"more\",{\"1\":{\"34\":1,\"93\":1,\"124\":1,\"130\":1}}],[\"morris\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"monday\",{\"1\":{\"29\":1}}],[\"members\",{\"1\":{\"140\":1}}],[\"memory\",{\"0\":{\"140\":1},\"1\":{\"46\":1,\"74\":1,\"111\":9,\"112\":1,\"124\":2,\"125\":1,\"130\":1}}],[\"mechanism\",{\"1\":{\"137\":1}}],[\"medium\",{\"0\":{\"135\":1}}],[\"media\",{\"1\":{\"94\":1}}],[\"meta\",{\"1\":{\"97\":1}}],[\"method\",{\"1\":{\"57\":1,\"65\":1,\"74\":1,\"84\":1,\"96\":1,\"117\":4,\"136\":1}}],[\"methods\",{\"0\":{\"96\":1},\"1\":{\"8\":1,\"85\":1,\"96\":3,\"117\":1,\"139\":1}}],[\"mean\",{\"0\":{\"114\":1}}],[\"meaning\",{\"1\":{\"97\":2}}],[\"meaningful\",{\"1\":{\"93\":1}}],[\"means\",{\"1\":{\"34\":1,\"78\":2,\"102\":1,\"105\":1}}],[\"messages\",{\"1\":{\"105\":1,\"107\":1}}],[\"message\",{\"1\":{\"79\":1,\"97\":3,\"99\":2,\"105\":1}}],[\"meet\",{\"1\":{\"12\":1,\"111\":1}}],[\"multi\",{\"1\":{\"18\":1}}],[\"multiplication\",{\"1\":{\"49\":1}}],[\"multiplied\",{\"1\":{\"4\":1}}],[\"multiplexing\",{\"1\":{\"100\":1}}],[\"multiple\",{\"0\":{\"128\":1},\"1\":{\"3\":2,\"12\":1,\"16\":1,\"17\":1,\"18\":1,\"21\":2,\"32\":2,\"59\":2,\"60\":1,\"61\":1,\"73\":1,\"80\":2,\"84\":2,\"85\":1,\"97\":3,\"100\":3,\"101\":1,\"115\":1}}],[\"must\",{\"1\":{\"16\":1,\"82\":1,\"97\":2,\"100\":1,\"105\":1,\"116\":1}}],[\"music\",{\"1\":{\"6\":1,\"8\":2,\"10\":2,\"11\":2,\"12\":2}}],[\"murphy\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"made\",{\"1\":{\"130\":1}}],[\"maxuint8\",{\"1\":{\"129\":1}}],[\"maxint8\",{\"1\":{\"129\":1}}],[\"maximum\",{\"1\":{\"105\":1,\"129\":1}}],[\"machine\",{\"0\":{\"106\":1}}],[\"man\",{\"1\":{\"117\":4}}],[\"manipulate\",{\"1\":{\"111\":1}}],[\"mandatory\",{\"1\":{\"105\":1}}],[\"manner\",{\"1\":{\"97\":1}}],[\"manually\",{\"1\":{\"91\":2,\"139\":1}}],[\"managed\",{\"1\":{\"84\":1}}],[\"management\",{\"1\":{\"84\":1}}],[\"may\",{\"1\":{\"85\":1,\"98\":1}}],[\"maintaining\",{\"1\":{\"93\":1}}],[\"main\",{\"1\":{\"29\":2,\"31\":2,\"32\":2,\"34\":4,\"35\":2,\"40\":2,\"43\":2,\"58\":2,\"59\":2,\"60\":2,\"61\":2,\"64\":2,\"65\":2,\"66\":2,\"70\":2,\"72\":2,\"73\":2,\"74\":2,\"81\":2,\"88\":2,\"90\":2,\"91\":2,\"115\":1,\"116\":3,\"117\":2,\"124\":4,\"125\":4,\"127\":2,\"128\":2,\"129\":2,\"132\":2,\"133\":2,\"134\":2}}],[\"mainly\",{\"1\":{\"1\":1,\"93\":2,\"96\":2,\"101\":2,\"110\":1,\"125\":1}}],[\"mapsliceschan\",{\"1\":{\"140\":1}}],[\"maps\",{\"1\":{\"68\":1,\"112\":1,\"117\":2}}],[\"mapping\",{\"1\":{\"44\":1,\"63\":1}}],[\"map\",{\"0\":{\"44\":2,\"62\":1,\"63\":1,\"64\":1,\"67\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"138\":1,\"139\":1,\"140\":1},\"1\":{\"25\":7,\"44\":7,\"47\":1,\"63\":9,\"64\":5,\"65\":7,\"66\":3,\"67\":1,\"68\":1,\"112\":1,\"117\":2,\"125\":3,\"132\":2,\"133\":2,\"134\":3,\"138\":2,\"139\":2,\"140\":4}}],[\"make\",{\"1\":{\"23\":2,\"25\":2,\"32\":2,\"44\":2,\"63\":4,\"64\":1,\"65\":1,\"66\":1,\"70\":2,\"72\":1,\"74\":1,\"77\":3,\"93\":1,\"124\":2,\"125\":2,\"132\":1}}],[\"male\",{\"1\":{\"16\":1}}],[\"matches\",{\"1\":{\"61\":1,\"99\":1}}],[\"matching\",{\"1\":{\"8\":1}}],[\"math\",{\"1\":{\"6\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"18\":4,\"117\":1,\"129\":3}}],[\"every\",{\"1\":{\"124\":1}}],[\"even\",{\"1\":{\"101\":1}}],[\"efficiency\",{\"1\":{\"111\":2}}],[\"efficient\",{\"1\":{\"111\":1}}],[\"effects\",{\"1\":{\"124\":1}}],[\"effectively\",{\"1\":{\"101\":1}}],[\"effect\",{\"1\":{\"12\":1}}],[\"echoes\",{\"1\":{\"96\":1}}],[\"emails\",{\"1\":{\"101\":2}}],[\"email\",{\"1\":{\"94\":1,\"101\":2}}],[\"empty\",{\"1\":{\"25\":1,\"105\":1}}],[\"etc\",{\"1\":{\"93\":1,\"94\":1,\"102\":1}}],[\"err\",{\"1\":{\"85\":1}}],[\"err4\",{\"1\":{\"61\":3}}],[\"err3\",{\"1\":{\"59\":2,\"60\":4,\"61\":2}}],[\"err2\",{\"1\":{\"58\":2,\"59\":3,\"60\":4,\"61\":2}}],[\"err1\",{\"1\":{\"58\":2,\"59\":3,\"60\":6,\"61\":2}}],[\"errorf\",{\"1\":{\"58\":2,\"59\":1,\"60\":1}}],[\"errors\",{\"0\":{\"58\":1,\"59\":1,\"60\":1,\"61\":1},\"1\":{\"58\":4,\"59\":6,\"60\":8,\"61\":6,\"105\":1}}],[\"error\",{\"0\":{\"56\":1},\"1\":{\"40\":1,\"57\":5,\"58\":5,\"59\":8,\"60\":12,\"61\":7,\"85\":1,\"94\":1,\"97\":6,\"116\":1,\"133\":1,\"134\":2}}],[\"either\",{\"1\":{\"51\":1}}],[\"equal\",{\"1\":{\"50\":4,\"115\":1}}],[\"equals\",{\"1\":{\"39\":1}}],[\"equivalent\",{\"1\":{\"8\":1,\"20\":1,\"37\":3,\"53\":1,\"90\":1,\"105\":1}}],[\"environments\",{\"1\":{\"105\":1}}],[\"entry\",{\"1\":{\"133\":1}}],[\"entire\",{\"1\":{\"105\":1,\"111\":1}}],[\"enter\",{\"1\":{\"101\":1}}],[\"ensure\",{\"1\":{\"101\":1,\"102\":3,\"139\":1}}],[\"encrypting\",{\"1\":{\"101\":2}}],[\"encryption\",{\"1\":{\"94\":1,\"98\":2,\"99\":3,\"101\":2,\"102\":1}}],[\"encrypts\",{\"1\":{\"99\":2}}],[\"encrypt\",{\"1\":{\"99\":2,\"101\":1,\"102\":2}}],[\"encrypted\",{\"1\":{\"98\":3,\"102\":1}}],[\"ends\",{\"1\":{\"107\":1}}],[\"endindex\",{\"1\":{\"71\":2}}],[\"end\",{\"1\":{\"31\":5,\"76\":2,\"82\":1,\"93\":1,\"94\":2,\"107\":1}}],[\"english\",{\"1\":{\"26\":1,\"97\":1,\"123\":1}}],[\"enumeration\",{\"1\":{\"16\":1}}],[\"earlier\",{\"1\":{\"134\":1}}],[\"easy\",{\"1\":{\"111\":1}}],[\"easily\",{\"1\":{\"84\":1,\"111\":1,\"136\":2}}],[\"eat\",{\"1\":{\"20\":1}}],[\"each\",{\"1\":{\"3\":1,\"29\":1,\"100\":1,\"105\":1,\"107\":2,\"117\":2,\"124\":1}}],[\"exclusive\",{\"1\":{\"140\":1}}],[\"excluding\",{\"1\":{\"71\":1}}],[\"exception\",{\"1\":{\"133\":1}}],[\"extra\",{\"1\":{\"130\":1}}],[\"exist\",{\"1\":{\"97\":1}}],[\"exists\",{\"0\":{\"66\":1},\"1\":{\"66\":3,\"100\":2,\"105\":1}}],[\"exit\",{\"1\":{\"29\":1}}],[\"expected\",{\"1\":{\"105\":1}}],[\"expands\",{\"1\":{\"138\":1}}],[\"expand\",{\"1\":{\"25\":1,\"126\":1}}],[\"explanation\",{\"1\":{\"18\":1}}],[\"executing\",{\"1\":{\"29\":2,\"31\":1,\"34\":2,\"91\":1,\"127\":1}}],[\"execution\",{\"0\":{\"128\":1},\"1\":{\"14\":1,\"34\":2,\"111\":2,\"128\":1}}],[\"execute\",{\"0\":{\"127\":1},\"1\":{\"18\":1,\"29\":1,\"31\":1}}],[\"executed\",{\"1\":{\"12\":1,\"32\":1}}],[\"example\",{\"0\":{\"81\":1},\"1\":{\"3\":3,\"4\":1,\"7\":1,\"8\":1,\"16\":1,\"17\":1,\"18\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"34\":1,\"35\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"72\":1,\"73\":1,\"74\":1,\"99\":1,\"101\":3,\"102\":4,\"105\":1,\"110\":1,\"114\":1,\"115\":1,\"116\":1,\"124\":2}}],[\"element\",{\"1\":{\"117\":1}}],[\"elements\",{\"1\":{\"4\":3,\"14\":1,\"112\":1,\"117\":1,\"138\":3}}],[\"electronic\",{\"1\":{\"101\":1}}],[\"else\",{\"1\":{\"28\":1,\"66\":2}}],[\"elaine\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"establishment\",{\"1\":{\"100\":1}}],[\"establishes\",{\"1\":{\"96\":1}}],[\"establishing\",{\"1\":{\"93\":1,\"107\":1}}],[\"establish\",{\"1\":{\"3\":1,\"94\":1}}],[\"e\",{\"1\":{\"3\":1,\"61\":2,\"97\":2,\"101\":1,\"105\":1,\"107\":4}}],[\"scenario\",{\"1\":{\"136\":1}}],[\"ssl\",{\"1\":{\"98\":1,\"101\":1}}],[\"snhp\",{\"1\":{\"94\":1}}],[\"smtp\",{\"1\":{\"94\":1}}],[\"shows\",{\"1\":{\"115\":1}}],[\"should\",{\"0\":{\"130\":1},\"1\":{\"97\":3,\"105\":1}}],[\"shutdown\",{\"1\":{\"107\":2}}],[\"shallow\",{\"0\":{\"124\":1},\"1\":{\"124\":7}}],[\"sha256md5\",{\"1\":{\"102\":1}}],[\"shared\",{\"1\":{\"74\":1,\"86\":1,\"101\":1}}],[\"sharing\",{\"1\":{\"74\":1,\"76\":1}}],[\"shift\",{\"1\":{\"52\":2}}],[\"soon\",{\"1\":{\"105\":1}}],[\"source\",{\"1\":{\"101\":1,\"105\":1}}],[\"so\",{\"1\":{\"97\":1,\"107\":2,\"123\":1,\"124\":2,\"127\":1,\"138\":2}}],[\"solving\",{\"1\":{\"93\":1}}],[\"solved\",{\"1\":{\"100\":1}}],[\"solve\",{\"1\":{\"68\":1}}],[\"some\",{\"1\":{\"14\":1,\"102\":1,\"105\":1,\"119\":1}}],[\"symmetric\",{\"1\":{\"99\":8}}],[\"symbol\",{\"0\":{\"55\":1}}],[\"symbols\",{\"0\":{\"54\":1}}],[\"syn=1\",{\"1\":{\"105\":1,\"107\":1}}],[\"syn\",{\"1\":{\"105\":2,\"107\":9}}],[\"syntax\",{\"1\":{\"93\":1}}],[\"synchronize\",{\"1\":{\"107\":2}}],[\"synchronizing\",{\"1\":{\"107\":1}}],[\"sync\",{\"1\":{\"68\":1,\"139\":1}}],[\"systems\",{\"1\":{\"93\":1}}],[\"system\",{\"1\":{\"37\":1,\"99\":1,\"105\":1}}],[\"slow\",{\"1\":{\"98\":1}}],[\"slip\",{\"1\":{\"94\":1}}],[\"slicing\",{\"0\":{\"71\":1}}],[\"slice2\",{\"1\":{\"124\":14}}],[\"slice1\",{\"1\":{\"124\":11}}],[\"slicemapchannelsinterfacesfunctions\",{\"1\":{\"124\":1}}],[\"slice\",{\"1\":{\"47\":1,\"71\":2,\"72\":3,\"74\":2,\"117\":1,\"124\":3,\"126\":1,\"130\":2}}],[\"slices\",{\"0\":{\"43\":2,\"69\":1,\"70\":1,\"71\":1,\"74\":1,\"126\":1},\"1\":{\"43\":1,\"70\":1,\"74\":2,\"112\":1,\"117\":3,\"124\":1,\"125\":1,\"126\":2}}],[\"sleep\",{\"1\":{\"35\":1,\"90\":2,\"91\":3}}],[\"site\",{\"1\":{\"99\":1}}],[\"situations\",{\"1\":{\"84\":1}}],[\"simplest\",{\"1\":{\"124\":1}}],[\"simpler\",{\"1\":{\"117\":1}}],[\"similarly\",{\"1\":{\"117\":1}}],[\"similar\",{\"1\":{\"96\":2,\"97\":3,\"101\":1,\"128\":1}}],[\"simultaneously\",{\"1\":{\"85\":1}}],[\"significance\",{\"1\":{\"111\":2}}],[\"signing\",{\"1\":{\"101\":1}}],[\"signature\",{\"0\":{\"102\":1},\"1\":{\"101\":1,\"102\":9}}],[\"signal\",{\"1\":{\"85\":1}}],[\"signed\",{\"1\":{\"37\":3,\"102\":4}}],[\"sides\",{\"1\":{\"51\":2}}],[\"side\",{\"1\":{\"50\":8,\"51\":1,\"78\":1,\"97\":1,\"107\":1}}],[\"sizeof\",{\"1\":{\"122\":2}}],[\"sizes\",{\"0\":{\"122\":1}}],[\"size\",{\"1\":{\"43\":1,\"77\":1}}],[\"since\",{\"1\":{\"60\":1,\"123\":1}}],[\"sin\",{\"1\":{\"18\":3}}],[\"single\",{\"1\":{\"3\":1,\"18\":2,\"30\":1,\"100\":2}}],[\"skip\",{\"1\":{\"30\":1}}],[\"switches\",{\"1\":{\"97\":1}}],[\"switching\",{\"1\":{\"97\":3}}],[\"switch\",{\"1\":{\"29\":3,\"93\":1,\"97\":1}}],[\"still\",{\"1\":{\"101\":1}}],[\"storage\",{\"1\":{\"111\":1}}],[\"stored\",{\"0\":{\"121\":1},\"1\":{\"105\":1}}],[\"store\",{\"1\":{\"37\":2,\"46\":1,\"105\":1,\"110\":2,\"121\":2,\"124\":1}}],[\"stolen\",{\"1\":{\"101\":1}}],[\"stops\",{\"1\":{\"94\":1}}],[\"stack\",{\"1\":{\"128\":1}}],[\"stage\",{\"1\":{\"105\":1}}],[\"stateful\",{\"1\":{\"106\":1}}],[\"state\",{\"0\":{\"106\":1}}],[\"statements\",{\"1\":{\"29\":1,\"30\":1}}],[\"status\",{\"0\":{\"97\":1},\"1\":{\"97\":7}}],[\"standards\",{\"1\":{\"93\":1}}],[\"starts\",{\"1\":{\"107\":1}}],[\"starting\",{\"1\":{\"37\":2}}],[\"start\",{\"1\":{\"35\":2,\"81\":1,\"129\":1}}],[\"stream\",{\"1\":{\"104\":1}}],[\"str\",{\"1\":{\"40\":3}}],[\"stringarrayintstructfloatbool\",{\"1\":{\"124\":1}}],[\"strings\",{\"0\":{\"40\":1},\"1\":{\"40\":1,\"114\":1}}],[\"string\",{\"0\":{\"40\":1},\"1\":{\"20\":1,\"25\":4,\"26\":1,\"40\":3,\"44\":2,\"45\":1,\"47\":1,\"57\":1,\"61\":2,\"63\":3,\"64\":6,\"65\":6,\"66\":4,\"70\":4,\"88\":7,\"114\":3,\"116\":4,\"117\":5,\"125\":2}}],[\"structs\",{\"1\":{\"112\":1}}],[\"struct\",{\"0\":{\"45\":1},\"1\":{\"20\":1,\"26\":2,\"45\":1,\"47\":1,\"61\":1,\"85\":1,\"112\":1,\"117\":2}}],[\"structures\",{\"0\":{\"45\":1},\"1\":{\"26\":1,\"45\":1,\"111\":3,\"117\":4}}],[\"structure\",{\"0\":{\"105\":1},\"1\":{\"20\":1,\"57\":1,\"86\":2,\"130\":1}}],[\"student\",{\"0\":{\"7\":1},\"1\":{\"3\":11,\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"space\",{\"1\":{\"111\":1,\"124\":1,\"130\":1}}],[\"speaking\",{\"1\":{\"130\":1}}],[\"speed\",{\"1\":{\"98\":1,\"105\":1}}],[\"specifies\",{\"1\":{\"107\":1}}],[\"specified\",{\"1\":{\"31\":1,\"96\":2,\"97\":1}}],[\"specific\",{\"1\":{\"96\":1,\"114\":1}}],[\"specifying\",{\"1\":{\"107\":1}}],[\"specify\",{\"1\":{\"16\":1}}],[\"special\",{\"1\":{\"14\":2,\"114\":1}}],[\"sport\",{\"1\":{\"6\":1,\"11\":1,\"12\":1}}],[\"s\",{\"0\":{\"125\":1,\"126\":1},\"1\":{\"8\":3,\"10\":3,\"11\":3,\"12\":3,\"18\":1,\"34\":1,\"40\":1,\"46\":1,\"58\":1,\"59\":1,\"60\":1,\"64\":4,\"85\":1,\"97\":5,\"99\":1,\"102\":6,\"105\":2,\"107\":4,\"114\":1,\"117\":1,\"124\":1,\"125\":3}}],[\"separately\",{\"1\":{\"107\":1}}],[\"seq=y+1\",{\"1\":{\"107\":1}}],[\"seq\",{\"1\":{\"105\":1}}],[\"sequence\",{\"1\":{\"40\":1,\"93\":1,\"105\":8,\"107\":8}}],[\"segment\",{\"1\":{\"105\":6,\"107\":1}}],[\"segmented\",{\"1\":{\"105\":1}}],[\"secure\",{\"1\":{\"98\":2,\"101\":2}}],[\"security\",{\"1\":{\"98\":2,\"101\":4,\"102\":1}}],[\"second\",{\"1\":{\"7\":1,\"35\":1,\"58\":1,\"59\":3,\"60\":3,\"61\":2,\"64\":6,\"65\":6,\"66\":2,\"70\":1,\"81\":1,\"90\":5,\"91\":3}}],[\"session\",{\"1\":{\"93\":1,\"94\":1}}],[\"serial\",{\"1\":{\"102\":1}}],[\"series\",{\"1\":{\"42\":1,\"45\":1}}],[\"servers\",{\"1\":{\"101\":1}}],[\"server\",{\"1\":{\"96\":4,\"97\":20,\"98\":1,\"99\":6,\"100\":2,\"107\":9}}],[\"services\",{\"1\":{\"93\":1}}],[\"service\",{\"1\":{\"93\":1,\"94\":1,\"97\":2,\"107\":1}}],[\"seven\",{\"0\":{\"93\":1},\"1\":{\"94\":1}}],[\"several\",{\"1\":{\"58\":1}}],[\"sender\",{\"1\":{\"105\":6}}],[\"sends\",{\"1\":{\"93\":2,\"99\":2,\"107\":5}}],[\"send\",{\"1\":{\"79\":1,\"80\":1,\"100\":1,\"107\":3}}],[\"sending\",{\"0\":{\"78\":1},\"1\":{\"23\":2,\"78\":1,\"107\":1}}],[\"sent\",{\"1\":{\"77\":1,\"100\":1,\"105\":3,\"107\":1}}],[\"seen\",{\"1\":{\"124\":1}}],[\"see\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"97\":2}}],[\"selects\",{\"1\":{\"93\":1,\"94\":1}}],[\"select\",{\"0\":{\"80\":1},\"1\":{\"8\":4,\"10\":1,\"11\":1,\"12\":1,\"32\":3,\"80\":4,\"90\":1,\"91\":1}}],[\"setting\",{\"1\":{\"84\":1}}],[\"set\",{\"1\":{\"4\":1,\"18\":1,\"44\":1,\"63\":2,\"80\":1,\"136\":1,\"140\":1}}],[\"sets\",{\"1\":{\"3\":1,\"107\":2}}],[\"save\",{\"1\":{\"111\":2}}],[\"safety\",{\"1\":{\"139\":2}}],[\"safe\",{\"0\":{\"137\":1,\"139\":1},\"1\":{\"68\":1,\"137\":1}}],[\"saturday\",{\"1\":{\"29\":2}}],[\"satisfy\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"same\",{\"0\":{\"115\":1,\"127\":1},\"1\":{\"8\":1,\"21\":2,\"32\":1,\"74\":3,\"80\":2,\"99\":1,\"102\":2}}],[\"sample\",{\"1\":{\"5\":3}}],[\"sanchez\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"sql\",{\"1\":{\"5\":1}}],[\"suitable\",{\"1\":{\"130\":1}}],[\"suite\",{\"1\":{\"94\":1}}],[\"su\",{\"1\":{\"117\":4}}],[\"sum\",{\"1\":{\"105\":1}}],[\"sure\",{\"1\":{\"97\":1}}],[\"successful\",{\"1\":{\"97\":1,\"107\":1}}],[\"successfully\",{\"1\":{\"97\":6}}],[\"success\",{\"1\":{\"97\":1}}],[\"such\",{\"1\":{\"3\":1,\"12\":2,\"16\":1,\"53\":1,\"78\":2,\"93\":1,\"97\":1,\"102\":1,\"111\":1,\"129\":1}}],[\"submission\",{\"1\":{\"96\":1}}],[\"submits\",{\"1\":{\"96\":1}}],[\"submit\",{\"1\":{\"96\":1,\"97\":1}}],[\"subtraction\",{\"1\":{\"49\":1}}],[\"subset\",{\"1\":{\"3\":1}}],[\"sunday\",{\"1\":{\"29\":1}}],[\"support\",{\"1\":{\"17\":1}}],[\"supports\",{\"1\":{\"17\":1,\"18\":1,\"96\":2}}],[\"supported\",{\"1\":{\"12\":1,\"96\":2,\"97\":1,\"100\":6}}],[\"supervision\",{\"1\":{\"102\":1}}],[\"superior\",{\"1\":{\"99\":1}}],[\"super\",{\"1\":{\"3\":8}}],[\"braces\",{\"1\":{\"117\":1}}],[\"browsers\",{\"1\":{\"101\":1}}],[\"browser\",{\"1\":{\"97\":4,\"98\":1,\"102\":1}}],[\"break\",{\"1\":{\"29\":1,\"30\":3}}],[\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",{\"1\":{\"14\":1}}],[\"binary\",{\"1\":{\"94\":1,\"115\":1}}],[\"bitwise\",{\"0\":{\"52\":1},\"1\":{\"52\":3}}],[\"bit\",{\"1\":{\"39\":2,\"93\":1,\"105\":1}}],[\"bitstreams\",{\"1\":{\"93\":1}}],[\"bits\",{\"1\":{\"37\":1,\"38\":1,\"39\":1,\"52\":2}}],[\"bcp\",{\"1\":{\"94\":1}}],[\"black\",{\"1\":{\"117\":2}}],[\"blank\",{\"1\":{\"87\":2}}],[\"blocking\",{\"1\":{\"100\":1}}],[\"blocked\",{\"1\":{\"77\":2}}],[\"block\",{\"1\":{\"32\":1}}],[\"backend\",{\"1\":{\"97\":1}}],[\"background\",{\"1\":{\"35\":1,\"87\":1,\"88\":5,\"90\":1,\"91\":1}}],[\"badges\",{\"1\":{\"101\":1}}],[\"bad\",{\"1\":{\"97\":4}}],[\"batches\",{\"1\":{\"84\":1}}],[\"baseval\",{\"1\":{\"88\":5}}],[\"base\",{\"1\":{\"88\":1}}],[\"based\",{\"1\":{\"21\":1,\"29\":1,\"37\":1,\"43\":1,\"104\":1,\"126\":1}}],[\"basic\",{\"0\":{\"2\":1,\"108\":1},\"1\":{\"1\":1,\"101\":1,\"114\":3}}],[\"body\",{\"1\":{\"96\":1}}],[\"boundaries\",{\"1\":{\"85\":1}}],[\"both\",{\"1\":{\"51\":2,\"99\":1,\"102\":1,\"107\":2,\"119\":1}}],[\"boolean\",{\"1\":{\"41\":1,\"114\":1}}],[\"booleans\",{\"0\":{\"41\":1}}],[\"bool\",{\"0\":{\"41\":1},\"1\":{\"24\":2,\"41\":2,\"47\":1,\"85\":1,\"114\":1}}],[\"bobby\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"built\",{\"1\":{\"99\":1}}],[\"busy\",{\"1\":{\"97\":1}}],[\"buffer\",{\"1\":{\"24\":2,\"77\":1}}],[\"buffered\",{\"1\":{\"23\":1,\"77\":2}}],[\"burns\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"but\",{\"1\":{\"3\":1,\"10\":1,\"11\":1,\"12\":1,\"96\":1,\"97\":5,\"116\":1,\"119\":1}}],[\"bytes\",{\"0\":{\"122\":1},\"1\":{\"105\":2,\"122\":3}}],[\"byte\",{\"0\":{\"122\":3},\"1\":{\"37\":1,\"47\":1,\"104\":1,\"105\":4,\"119\":1,\"120\":2,\"121\":2,\"122\":2,\"123\":1}}],[\"by\",{\"1\":{\"4\":1,\"29\":1,\"42\":1,\"52\":2,\"63\":1,\"84\":2,\"85\":1,\"86\":1,\"96\":3,\"97\":5,\"98\":2,\"99\":1,\"100\":1,\"101\":2,\"102\":1,\"105\":5,\"107\":1,\"111\":1,\"115\":2,\"116\":1,\"117\":2,\"126\":2,\"136\":2}}],[\"b\",{\"1\":{\"3\":2,\"4\":3,\"8\":3,\"12\":2,\"16\":2,\"24\":2,\"49\":6,\"50\":7,\"51\":3,\"52\":4,\"53\":11,\"99\":2,\"121\":1,\"122\":3,\"124\":2}}],[\"become\",{\"1\":{\"129\":1}}],[\"because\",{\"1\":{\"98\":4,\"107\":1}}],[\"below\",{\"1\":{\"114\":1}}],[\"belongs\",{\"1\":{\"57\":1}}],[\"belong\",{\"1\":{\"3\":2}}],[\"been\",{\"1\":{\"74\":1,\"79\":1,\"97\":4,\"105\":2,\"107\":1}}],[\"beginindex\",{\"1\":{\"71\":2}}],[\"being\",{\"1\":{\"39\":1,\"98\":1}}],[\"before\",{\"1\":{\"34\":3,\"107\":1}}],[\"beverly\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"between\",{\"0\":{\"116\":1,\"119\":1,\"125\":1,\"126\":1},\"1\":{\"3\":2,\"4\":1,\"76\":1,\"93\":3,\"101\":1,\"111\":2,\"119\":1,\"136\":1}}],[\"be\",{\"0\":{\"112\":1,\"140\":1},\"1\":{\"3\":3,\"12\":3,\"14\":1,\"16\":2,\"18\":1,\"28\":1,\"32\":1,\"40\":1,\"42\":2,\"45\":1,\"55\":1,\"77\":2,\"82\":2,\"84\":3,\"85\":1,\"86\":2,\"89\":1,\"90\":1,\"93\":1,\"96\":1,\"97\":4,\"98\":2,\"100\":4,\"101\":3,\"102\":2,\"105\":4,\"107\":2,\"112\":2,\"115\":2,\"117\":3,\"124\":2,\"126\":1,\"130\":2,\"136\":1,\"140\":3}}],[\"ciphertext\",{\"1\":{\"99\":2}}],[\"credentials\",{\"1\":{\"101\":1}}],[\"creation\",{\"1\":{\"126\":1}}],[\"creating\",{\"0\":{\"58\":1,\"63\":1,\"70\":1,\"77\":1,\"87\":1,\"88\":1},\"1\":{\"70\":1}}],[\"created\",{\"1\":{\"40\":1,\"42\":1,\"97\":3,\"117\":1}}],[\"create\",{\"1\":{\"35\":1,\"58\":4,\"59\":2,\"60\":2,\"61\":2,\"70\":1,\"72\":1,\"74\":2,\"77\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"111\":1}}],[\"crl\",{\"1\":{\"99\":1}}],[\"certificates\",{\"1\":{\"101\":10,\"102\":1}}],[\"certificate\",{\"0\":{\"101\":1},\"1\":{\"99\":7,\"101\":4,\"102\":24}}],[\"cslip\",{\"1\":{\"94\":1}}],[\"ctx3val\",{\"1\":{\"88\":2}}],[\"ctx3\",{\"1\":{\"88\":3}}],[\"ctx1val\",{\"1\":{\"88\":2}}],[\"ctx1\",{\"1\":{\"88\":3,\"90\":2,\"91\":2}}],[\"ctx2val\",{\"1\":{\"88\":2}}],[\"ctx2\",{\"1\":{\"87\":1,\"88\":3}}],[\"ctx\",{\"1\":{\"87\":1,\"88\":5,\"90\":2,\"91\":2}}],[\"cumbersome\",{\"1\":{\"117\":1}}],[\"curly\",{\"1\":{\"117\":1}}],[\"currently\",{\"1\":{\"97\":1}}],[\"current\",{\"1\":{\"30\":2,\"60\":1,\"107\":1,\"132\":1,\"134\":1,\"140\":1}}],[\"custom\",{\"1\":{\"45\":1}}],[\"chinese\",{\"1\":{\"117\":1,\"123\":1}}],[\"china\",{\"1\":{\"117\":2}}],[\"choose\",{\"1\":{\"97\":1}}],[\"choices\",{\"1\":{\"97\":2}}],[\"ch3\",{\"1\":{\"80\":3}}],[\"ch2\",{\"1\":{\"77\":1,\"80\":3}}],[\"ch1\",{\"1\":{\"77\":1,\"80\":3}}],[\"checksum\",{\"1\":{\"105\":2}}],[\"checking\",{\"1\":{\"98\":1}}],[\"check\",{\"0\":{\"66\":1},\"1\":{\"50\":6,\"66\":1}}],[\"character\",{\"0\":{\"123\":1},\"1\":{\"120\":1,\"121\":3}}],[\"characteristics\",{\"1\":{\"97\":1}}],[\"characters\",{\"0\":{\"121\":1},\"1\":{\"37\":2,\"40\":1,\"119\":1,\"121\":3}}],[\"changing\",{\"1\":{\"127\":1,\"138\":1}}],[\"change\",{\"1\":{\"124\":4}}],[\"changes\",{\"1\":{\"124\":4}}],[\"changed\",{\"1\":{\"16\":1,\"74\":1,\"97\":1,\"126\":1}}],[\"chan<\",{\"1\":{\"23\":1}}],[\"channels\",{\"1\":{\"23\":1,\"32\":1}}],[\"channel\",{\"0\":{\"75\":1,\"77\":1,\"79\":1},\"1\":{\"23\":6,\"76\":1,\"77\":3,\"78\":3,\"79\":5,\"80\":4,\"81\":1,\"82\":1,\"125\":1,\"137\":2}}],[\"chan\",{\"1\":{\"23\":5,\"32\":3,\"47\":1,\"77\":2,\"85\":1}}],[\"chaninterfacemapstruct\",{\"1\":{\"14\":1}}],[\"ch\",{\"1\":{\"23\":2,\"78\":2,\"79\":2}}],[\"clear\",{\"1\":{\"97\":1}}],[\"clients\",{\"1\":{\"97\":1}}],[\"client\",{\"1\":{\"97\":11,\"99\":10,\"107\":10}}],[\"clifford\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"closing\",{\"0\":{\"79\":1}}],[\"closed\",{\"1\":{\"79\":1}}],[\"close\",{\"1\":{\"24\":1,\"79\":6}}],[\"cloning\",{\"0\":{\"74\":1}}],[\"clause\",{\"1\":{\"12\":1}}],[\"c\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":3,\"16\":2,\"32\":5,\"40\":1,\"53\":1,\"81\":1}}],[\"copied\",{\"1\":{\"124\":2}}],[\"copying\",{\"1\":{\"111\":1,\"124\":5,\"130\":1}}],[\"copy\",{\"0\":{\"124\":2},\"1\":{\"74\":3,\"97\":1,\"124\":14,\"127\":1,\"130\":3}}],[\"coding\",{\"1\":{\"111\":1}}],[\"codes\",{\"0\":{\"97\":1},\"1\":{\"97\":1}}],[\"code\",{\"1\":{\"14\":1,\"40\":1,\"94\":1,\"97\":10,\"105\":1,\"121\":2,\"129\":1,\"140\":1}}],[\"covers\",{\"1\":{\"105\":1}}],[\"correspond\",{\"1\":{\"100\":1}}],[\"corresponding\",{\"1\":{\"29\":1,\"44\":1,\"47\":1,\"63\":1,\"97\":1,\"130\":1}}],[\"correctly\",{\"1\":{\"105\":1}}],[\"correct\",{\"1\":{\"97\":1,\"102\":1,\"116\":1}}],[\"coroutines\",{\"1\":{\"84\":1,\"136\":2}}],[\"coroutine\",{\"1\":{\"35\":1,\"84\":3,\"136\":2}}],[\"collected\",{\"1\":{\"140\":2}}],[\"collection\",{\"1\":{\"114\":1,\"140\":1}}],[\"collections\",{\"1\":{\"25\":1}}],[\"colours\",{\"1\":{\"117\":1}}],[\"columns\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":2}}],[\"column\",{\"1\":{\"3\":3}}],[\"combat\",{\"1\":{\"140\":1}}],[\"combine\",{\"1\":{\"59\":2,\"60\":1,\"61\":1}}],[\"combination\",{\"1\":{\"3\":1}}],[\"come\",{\"1\":{\"37\":1}}],[\"comes\",{\"1\":{\"29\":1}}],[\"commerce\",{\"1\":{\"101\":1}}],[\"commented\",{\"1\":{\"40\":1}}],[\"common\",{\"1\":{\"93\":1,\"97\":1,\"130\":1}}],[\"commonly\",{\"1\":{\"84\":1,\"102\":1,\"125\":1}}],[\"communication\",{\"1\":{\"32\":1,\"76\":1,\"93\":2,\"104\":1}}],[\"command\",{\"1\":{\"18\":1,\"107\":3}}],[\"compare\",{\"1\":{\"102\":1}}],[\"compress\",{\"1\":{\"100\":1}}],[\"compression\",{\"1\":{\"100\":1}}],[\"computer\",{\"0\":{\"92\":1}}],[\"completed\",{\"1\":{\"107\":1}}],[\"complete\",{\"1\":{\"80\":1}}],[\"completing\",{\"1\":{\"29\":1}}],[\"complexdata2\",{\"1\":{\"39\":1}}],[\"complexdata\",{\"1\":{\"39\":1}}],[\"complex128\",{\"1\":{\"39\":1,\"47\":1}}],[\"complex64complex128\",{\"1\":{\"114\":1}}],[\"complex64\",{\"1\":{\"39\":2,\"47\":1}}],[\"complex\",{\"0\":{\"39\":2},\"1\":{\"39\":3,\"111\":1,\"114\":1}}],[\"compiler\",{\"1\":{\"16\":1}}],[\"composed\",{\"1\":{\"40\":1,\"42\":1,\"45\":1}}],[\"composite\",{\"0\":{\"22\":1,\"117\":1},\"1\":{\"14\":1,\"117\":8}}],[\"compound\",{\"1\":{\"14\":1}}],[\"cook\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"concluded\",{\"1\":{\"102\":1}}],[\"concurrent\",{\"1\":{\"68\":1,\"100\":2,\"130\":1}}],[\"concurrency\",{\"0\":{\"68\":1,\"139\":1},\"1\":{\"130\":1,\"139\":2}}],[\"confirm\",{\"1\":{\"105\":2}}],[\"confirmation\",{\"1\":{\"102\":1}}],[\"configured\",{\"1\":{\"84\":1,\"99\":1}}],[\"configure\",{\"1\":{\"25\":1}}],[\"connection\",{\"1\":{\"100\":5,\"104\":1,\"105\":4,\"107\":3}}],[\"connect\",{\"1\":{\"96\":2}}],[\"connie\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"conventional\",{\"1\":{\"117\":1}}],[\"convenient\",{\"1\":{\"93\":1}}],[\"conveniently\",{\"1\":{\"84\":1}}],[\"conversion\",{\"1\":{\"93\":1,\"94\":1}}],[\"conduit\",{\"1\":{\"76\":1}}],[\"conditional\",{\"1\":{\"28\":1}}],[\"condition\",{\"1\":{\"12\":2,\"30\":1,\"51\":1}}],[\"conditions\",{\"1\":{\"4\":1,\"12\":1,\"29\":1}}],[\"content\",{\"1\":{\"97\":6,\"99\":4,\"102\":1}}],[\"context\",{\"0\":{\"83\":1,\"85\":1},\"1\":{\"84\":3,\"85\":3,\"86\":2,\"87\":4,\"88\":12,\"89\":2,\"90\":8,\"91\":6,\"136\":2}}],[\"contact\",{\"1\":{\"94\":1}}],[\"contained\",{\"1\":{\"102\":1}}],[\"contains\",{\"1\":{\"60\":2}}],[\"contain\",{\"1\":{\"38\":1,\"39\":1}}],[\"continue\",{\"1\":{\"29\":1,\"30\":4,\"31\":1,\"97\":5,\"99\":1}}],[\"control\",{\"0\":{\"27\":1},\"1\":{\"14\":2,\"90\":1,\"104\":1,\"105\":1}}],[\"consisting\",{\"1\":{\"25\":1}}],[\"consistent\",{\"1\":{\"12\":1}}],[\"construct\",{\"1\":{\"101\":1,\"117\":1}}],[\"constant\",{\"1\":{\"16\":1,\"114\":3,\"116\":2}}],[\"constants\",{\"1\":{\"16\":1,\"112\":1,\"114\":1}}],[\"const\",{\"1\":{\"16\":6}}],[\"constfuncimportpackagetypevar\",{\"1\":{\"14\":1}}],[\"course\",{\"0\":{\"6\":1},\"1\":{\"7\":2,\"8\":4,\"10\":4,\"11\":4,\"12\":4}}],[\"ca\",{\"1\":{\"102\":1}}],[\"calculated\",{\"1\":{\"105\":1}}],[\"calculate\",{\"1\":{\"102\":1}}],[\"called\",{\"1\":{\"85\":1,\"93\":1}}],[\"call\",{\"1\":{\"7\":1}}],[\"cas\",{\"1\":{\"101\":1}}],[\"cases\",{\"0\":{\"136\":1}}],[\"case\",{\"1\":{\"29\":13,\"32\":4,\"80\":3,\"90\":1,\"91\":1}}],[\"cache\",{\"1\":{\"97\":1}}],[\"cable\",{\"1\":{\"93\":1}}],[\"cap\",{\"1\":{\"72\":2}}],[\"capacity\",{\"0\":{\"72\":1},\"1\":{\"25\":2,\"42\":1,\"43\":1,\"63\":1,\"72\":2,\"117\":1,\"126\":2}}],[\"causes\",{\"1\":{\"107\":1}}],[\"cause\",{\"1\":{\"40\":1,\"79\":1,\"130\":1,\"134\":1}}],[\"carries\",{\"1\":{\"85\":1}}],[\"cartesian\",{\"1\":{\"4\":5}}],[\"card\",{\"1\":{\"3\":2,\"93\":1}}],[\"canceled\",{\"1\":{\"91\":2}}],[\"cancelation\",{\"1\":{\"85\":1}}],[\"cancel\",{\"1\":{\"84\":1,\"86\":1,\"91\":3,\"136\":1}}],[\"candidate\",{\"1\":{\"3\":5}}],[\"can\",{\"0\":{\"112\":1,\"115\":1,\"132\":1},\"1\":{\"3\":6,\"8\":1,\"10\":1,\"11\":1,\"12\":2,\"16\":1,\"18\":3,\"28\":1,\"29\":1,\"31\":1,\"34\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"53\":1,\"55\":1,\"58\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":1,\"68\":1,\"70\":1,\"71\":1,\"74\":1,\"79\":2,\"80\":2,\"84\":3,\"86\":1,\"89\":1,\"90\":1,\"91\":2,\"93\":1,\"96\":1,\"97\":5,\"100\":4,\"101\":4,\"102\":2,\"105\":2,\"107\":1,\"111\":9,\"112\":1,\"115\":2,\"117\":2,\"121\":2,\"123\":2,\"124\":1,\"130\":1,\"136\":3}}],[\"cannot\",{\"0\":{\"112\":1},\"1\":{\"3\":2,\"14\":1,\"16\":1,\"40\":2,\"42\":1,\"97\":3,\"102\":1,\"112\":1,\"116\":1,\"126\":1,\"139\":1}}],[\"familiar\",{\"1\":{\"124\":1}}],[\"factor\",{\"1\":{\"105\":1}}],[\"fast\",{\"1\":{\"98\":1,\"116\":2}}],[\"false\",{\"1\":{\"41\":2,\"47\":1,\"50\":9,\"51\":7,\"60\":1,\"79\":1}}],[\"fallthrough\",{\"1\":{\"29\":7}}],[\"feature\",{\"1\":{\"98\":1,\"100\":1}}],[\"female\",{\"1\":{\"16\":1}}],[\"ftp\",{\"1\":{\"94\":1}}],[\"fmt\",{\"1\":{\"18\":1,\"28\":2,\"29\":12,\"30\":5,\"31\":3,\"32\":3,\"34\":5,\"35\":4,\"40\":2,\"43\":2,\"44\":1,\"45\":1,\"58\":5,\"59\":5,\"60\":7,\"61\":2,\"63\":1,\"64\":7,\"65\":3,\"66\":5,\"70\":2,\"71\":1,\"72\":2,\"73\":4,\"74\":3,\"80\":4,\"81\":3,\"88\":5,\"90\":3,\"91\":3,\"110\":3,\"115\":4,\"116\":2,\"122\":1,\"124\":8,\"125\":7,\"127\":2,\"128\":4,\"129\":3,\"132\":2}}],[\"flexibility\",{\"1\":{\"111\":1}}],[\"float64\",{\"1\":{\"38\":1,\"47\":1}}],[\"float32float64\",{\"1\":{\"114\":1}}],[\"float32\",{\"1\":{\"38\":1,\"47\":1}}],[\"float\",{\"0\":{\"38\":1},\"1\":{\"39\":2,\"114\":1}}],[\"floating\",{\"0\":{\"38\":1},\"1\":{\"38\":1,\"39\":1}}],[\"flow\",{\"0\":{\"27\":1},\"1\":{\"14\":2,\"105\":1}}],[\"flag\",{\"1\":{\"18\":2}}],[\"future\",{\"1\":{\"97\":1}}],[\"func\",{\"1\":{\"17\":4,\"29\":1,\"31\":1,\"32\":3,\"34\":3,\"35\":3,\"40\":1,\"43\":1,\"47\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":2,\"64\":1,\"65\":1,\"66\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":1,\"81\":1,\"88\":1,\"90\":2,\"91\":2,\"115\":1,\"116\":4,\"117\":2,\"124\":2,\"125\":2,\"127\":1,\"128\":4,\"129\":1,\"132\":1,\"133\":1,\"134\":1}}],[\"functionality\",{\"1\":{\"96\":1,\"97\":1}}],[\"functions\",{\"1\":{\"14\":1,\"17\":1,\"18\":1,\"94\":1,\"102\":1,\"111\":2,\"112\":1,\"126\":1}}],[\"function\",{\"0\":{\"33\":1,\"130\":1},\"1\":{\"14\":1,\"18\":1,\"34\":2,\"46\":2,\"73\":1,\"93\":1,\"94\":1,\"116\":1,\"130\":1}}],[\"full\",{\"0\":{\"12\":1},\"1\":{\"12\":1,\"107\":1}}],[\"found\",{\"1\":{\"97\":5}}],[\"four\",{\"1\":{\"94\":1,\"107\":3}}],[\"fourth\",{\"1\":{\"66\":1}}],[\"focused\",{\"1\":{\"93\":1}}],[\"focus\",{\"1\":{\"93\":2}}],[\"followed\",{\"1\":{\"117\":1}}],[\"follows\",{\"1\":{\"44\":1,\"63\":1,\"117\":5,\"124\":4}}],[\"following\",{\"1\":{\"5\":1,\"8\":1,\"29\":1,\"40\":1,\"84\":1,\"112\":2,\"114\":1,\"116\":1,\"139\":1}}],[\"force\",{\"1\":{\"140\":1}}],[\"forbidden\",{\"1\":{\"97\":2}}],[\"form\",{\"1\":{\"94\":1,\"97\":1,\"102\":1,\"124\":1}}],[\"formatting\",{\"1\":{\"94\":1}}],[\"format\",{\"1\":{\"93\":1,\"102\":1}}],[\"forming\",{\"1\":{\"86\":1}}],[\"for\",{\"0\":{\"136\":1},\"1\":{\"3\":2,\"4\":1,\"23\":3,\"28\":1,\"30\":8,\"31\":1,\"32\":3,\"34\":1,\"43\":1,\"64\":3,\"76\":2,\"86\":1,\"90\":1,\"91\":1,\"93\":4,\"94\":1,\"96\":3,\"97\":1,\"99\":2,\"101\":9,\"102\":2,\"105\":2,\"110\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":4,\"124\":1,\"125\":2,\"127\":2,\"129\":1,\"130\":2,\"132\":1,\"140\":1}}],[\"foreign\",{\"1\":{\"3\":4}}],[\"fixed\",{\"1\":{\"126\":1}}],[\"five\",{\"1\":{\"94\":1}}],[\"fin=1\",{\"1\":{\"105\":1,\"107\":3}}],[\"fin\",{\"1\":{\"105\":1}}],[\"fingerprints\",{\"1\":{\"102\":1}}],[\"fingerprint\",{\"1\":{\"102\":4}}],[\"financial\",{\"1\":{\"101\":1}}],[\"final\",{\"1\":{\"34\":1}}],[\"finish\",{\"1\":{\"81\":1}}],[\"finished\",{\"1\":{\"34\":1}}],[\"find\",{\"1\":{\"74\":1}}],[\"fibonacci\",{\"1\":{\"32\":2}}],[\"filled\",{\"1\":{\"117\":1}}],[\"files\",{\"1\":{\"102\":1}}],[\"file\",{\"1\":{\"24\":1,\"94\":2,\"96\":1}}],[\"filtering\",{\"1\":{\"4\":1,\"12\":1}}],[\"first\",{\"1\":{\"4\":1,\"7\":1,\"12\":1,\"34\":1,\"58\":1,\"59\":3,\"60\":3,\"61\":2,\"64\":6,\"65\":5,\"66\":3,\"70\":1,\"105\":2,\"124\":1,\"128\":1,\"129\":1}}],[\"fields\",{\"1\":{\"3\":2,\"45\":1}}],[\"field\",{\"1\":{\"3\":4,\"97\":2,\"105\":6}}],[\"frames\",{\"1\":{\"93\":3}}],[\"francisco\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"front\",{\"1\":{\"46\":1}}],[\"from\",{\"0\":{\"134\":1,\"140\":1},\"1\":{\"3\":1,\"8\":4,\"10\":2,\"11\":2,\"12\":1,\"55\":1,\"79\":1,\"93\":2,\"97\":2,\"98\":2,\"105\":2,\"107\":2,\"110\":2,\"124\":1,\"129\":1,\"138\":1}}],[\"friday\",{\"1\":{\"29\":2}}],[\"frequently\",{\"1\":{\"1\":1}}],[\"utc\",{\"1\":{\"102\":1}}],[\"urgent\",{\"1\":{\"105\":8}}],[\"urg=1\",{\"1\":{\"105\":3}}],[\"urg\",{\"1\":{\"105\":1}}],[\"uri\",{\"1\":{\"97\":5}}],[\"url\",{\"1\":{\"97\":1}}],[\"upper\",{\"1\":{\"107\":1}}],[\"updates\",{\"1\":{\"96\":1}}],[\"updated\",{\"1\":{\"96\":1}}],[\"upload\",{\"1\":{\"96\":1}}],[\"udp\",{\"0\":{\"103\":1},\"1\":{\"93\":1,\"94\":1}}],[\"uintptr\",{\"1\":{\"47\":1}}],[\"uint64\",{\"1\":{\"47\":1}}],[\"uint32\",{\"1\":{\"47\":1}}],[\"uint16\",{\"1\":{\"47\":1}}],[\"uint8\",{\"1\":{\"37\":1,\"47\":1,\"120\":1,\"129\":1}}],[\"uint\",{\"1\":{\"37\":1,\"47\":1,\"129\":2}}],[\"usually\",{\"1\":{\"80\":1,\"97\":2,\"105\":1,\"107\":1}}],[\"usage\",{\"1\":{\"18\":1}}],[\"uses\",{\"1\":{\"99\":6,\"100\":1,\"101\":1,\"102\":3,\"117\":1,\"138\":1}}],[\"users\",{\"1\":{\"101\":3,\"138\":1}}],[\"user\",{\"1\":{\"97\":2,\"101\":2,\"102\":4}}],[\"use\",{\"0\":{\"111\":1,\"130\":1,\"136\":1},\"1\":{\"18\":4,\"29\":1,\"34\":1,\"46\":1,\"53\":1,\"58\":1,\"59\":1,\"60\":3,\"61\":2,\"64\":4,\"65\":1,\"67\":1,\"68\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":1,\"77\":1,\"79\":2,\"80\":2,\"88\":1,\"97\":6,\"102\":3,\"107\":1,\"116\":3,\"117\":4,\"123\":1,\"129\":1,\"130\":1,\"139\":2}}],[\"used\",{\"0\":{\"136\":1},\"1\":{\"3\":3,\"8\":1,\"14\":5,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"29\":1,\"30\":1,\"34\":2,\"35\":1,\"37\":2,\"55\":1,\"76\":1,\"84\":2,\"89\":1,\"90\":1,\"96\":7,\"97\":2,\"98\":1,\"99\":1,\"101\":3,\"102\":2,\"105\":5,\"110\":2,\"117\":1,\"119\":1,\"121\":2,\"125\":3,\"130\":1}}],[\"using\",{\"0\":{\"138\":1},\"1\":{\"12\":4,\"18\":1,\"21\":1,\"29\":1,\"30\":1,\"44\":1,\"45\":1,\"58\":2,\"59\":2,\"60\":2,\"61\":1,\"63\":3,\"78\":2,\"79\":1,\"82\":1,\"84\":1,\"91\":1,\"101\":1,\"112\":1,\"117\":1,\"129\":1,\"130\":1,\"136\":2}}],[\"unchanged\",{\"1\":{\"124\":1}}],[\"unsafe\",{\"1\":{\"122\":3}}],[\"unsigned\",{\"1\":{\"37\":3}}],[\"unnamed\",{\"1\":{\"114\":2,\"116\":1}}],[\"unable\",{\"1\":{\"97\":1,\"102\":1}}],[\"unavailable\",{\"1\":{\"97\":2}}],[\"unauthorized\",{\"1\":{\"97\":2}}],[\"uninitialized\",{\"0\":{\"132\":1,\"133\":1,\"134\":1},\"1\":{\"132\":1,\"134\":2}}],[\"unit\",{\"1\":{\"105\":1}}],[\"unicode\",{\"1\":{\"37\":1,\"121\":3}}],[\"uniquely\",{\"1\":{\"3\":3}}],[\"unique\",{\"1\":{\"3\":4}}],[\"until\",{\"1\":{\"32\":1,\"77\":1,\"99\":1}}],[\"undergone\",{\"1\":{\"132\":1}}],[\"under\",{\"1\":{\"102\":1,\"107\":1}}],[\"understood\",{\"1\":{\"97\":1}}],[\"understand\",{\"1\":{\"4\":1}}],[\"underlying\",{\"1\":{\"25\":1}}],[\"unordered\",{\"0\":{\"138\":1},\"1\":{\"25\":1,\"138\":2}}],[\"unbuffered\",{\"1\":{\"23\":1,\"77\":2}}],[\"unmatched\",{\"1\":{\"10\":1,\"11\":1,\"12\":2}}],[\"d\",{\"1\":{\"122\":2}}],[\"drops\",{\"1\":{\"107\":1}}],[\"driven\",{\"1\":{\"7\":2,\"11\":1}}],[\"driving\",{\"1\":{\"7\":2,\"10\":1,\"12\":1}}],[\"dns\",{\"1\":{\"94\":1}}],[\"duplex\",{\"1\":{\"107\":1}}],[\"due\",{\"1\":{\"86\":1}}],[\"during\",{\"1\":{\"18\":1,\"97\":1,\"98\":3,\"101\":2,\"107\":1,\"111\":1,\"130\":1}}],[\"do\",{\"1\":{\"116\":1,\"124\":1,\"126\":1,\"140\":1}}],[\"double\",{\"1\":{\"107\":1}}],[\"document\",{\"1\":{\"97\":1,\"101\":1}}],[\"down\",{\"1\":{\"93\":1}}],[\"done\",{\"1\":{\"85\":1,\"90\":1,\"91\":1}}],[\"doesn\",{\"1\":{\"114\":1}}],[\"does\",{\"0\":{\"114\":1},\"1\":{\"3\":1,\"17\":1,\"96\":1,\"97\":1}}],[\"dynamically\",{\"1\":{\"111\":2}}],[\"dynamic\",{\"1\":{\"43\":1,\"111\":1,\"126\":1}}],[\"date\",{\"1\":{\"97\":1}}],[\"data2\",{\"1\":{\"73\":2}}],[\"data1\",{\"1\":{\"73\":2,\"74\":7}}],[\"dataslice2\",{\"1\":{\"70\":2}}],[\"dataslice1\",{\"1\":{\"70\":3}}],[\"dataslice\",{\"1\":{\"70\":2}}],[\"datamap\",{\"1\":{\"64\":9,\"65\":9,\"66\":7,\"67\":1}}],[\"data\",{\"0\":{\"36\":1,\"73\":1,\"78\":1,\"127\":1,\"129\":1},\"1\":{\"3\":4,\"8\":1,\"10\":2,\"11\":2,\"12\":3,\"16\":1,\"23\":3,\"32\":1,\"42\":2,\"43\":5,\"44\":2,\"46\":1,\"63\":2,\"70\":1,\"71\":4,\"72\":4,\"73\":7,\"74\":9,\"76\":2,\"77\":3,\"78\":2,\"80\":5,\"82\":1,\"84\":2,\"86\":1,\"89\":2,\"93\":10,\"94\":6,\"96\":3,\"97\":1,\"98\":4,\"99\":1,\"101\":3,\"102\":4,\"105\":15,\"107\":1,\"110\":3,\"111\":8,\"112\":1,\"126\":2,\"129\":2,\"130\":2,\"136\":3}}],[\"database\",{\"0\":{\"2\":1}}],[\"day\",{\"1\":{\"29\":1}}],[\"dayofweek\",{\"1\":{\"29\":2}}],[\"depend\",{\"1\":{\"124\":1}}],[\"deep\",{\"0\":{\"124\":1},\"1\":{\"124\":6}}],[\"dereference\",{\"1\":{\"110\":1}}],[\"derived\",{\"0\":{\"86\":1,\"88\":1},\"1\":{\"86\":3,\"88\":1,\"89\":1}}],[\"details\",{\"1\":{\"107\":3,\"124\":1}}],[\"detection\",{\"1\":{\"94\":1}}],[\"determined\",{\"1\":{\"126\":1}}],[\"determine\",{\"1\":{\"60\":2,\"79\":1,\"107\":1,\"129\":1}}],[\"degree\",{\"1\":{\"105\":1}}],[\"destination\",{\"1\":{\"105\":1}}],[\"description\",{\"1\":{\"3\":1,\"37\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"54\":1,\"96\":1,\"97\":1,\"105\":1}}],[\"denied\",{\"1\":{\"102\":1}}],[\"devices\",{\"1\":{\"93\":1}}],[\"deadline\",{\"1\":{\"85\":3}}],[\"deadlock\",{\"1\":{\"82\":1}}],[\"deleted\",{\"0\":{\"140\":1},\"1\":{\"140\":2}}],[\"deletes\",{\"1\":{\"96\":1}}],[\"delete\",{\"0\":{\"134\":1},\"1\":{\"65\":4,\"96\":2,\"134\":3}}],[\"deleting\",{\"0\":{\"65\":1}}],[\"decrypt\",{\"1\":{\"99\":3,\"102\":1}}],[\"decrypted\",{\"1\":{\"98\":1,\"102\":1}}],[\"decryption\",{\"1\":{\"98\":1,\"101\":2}}],[\"decrement\",{\"1\":{\"49\":1}}],[\"decimal\",{\"1\":{\"38\":1,\"115\":2}}],[\"declaring\",{\"1\":{\"16\":1}}],[\"declared\",{\"1\":{\"16\":1}}],[\"declare\",{\"1\":{\"14\":2,\"16\":2,\"17\":1,\"21\":3,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"44\":1,\"63\":1,\"70\":1,\"117\":2}}],[\"declaration\",{\"0\":{\"15\":1},\"1\":{\"14\":1,\"44\":1,\"63\":1}}],[\"definition\",{\"1\":{\"98\":1,\"117\":2}}],[\"defined\",{\"1\":{\"101\":1}}],[\"defines\",{\"1\":{\"93\":1}}],[\"define\",{\"1\":{\"19\":1,\"20\":6,\"46\":1,\"84\":1,\"110\":1,\"117\":2}}],[\"defers\",{\"0\":{\"128\":1}}],[\"defer\",{\"1\":{\"34\":6,\"128\":3}}],[\"defergo\",{\"1\":{\"14\":1}}],[\"default\",{\"1\":{\"17\":1,\"29\":5,\"80\":4,\"90\":1,\"91\":1,\"98\":2,\"107\":1}}],[\"digest\",{\"1\":{\"102\":1}}],[\"digital\",{\"0\":{\"101\":1,\"102\":1},\"1\":{\"101\":9,\"102\":11}}],[\"disadvantage\",{\"1\":{\"130\":2}}],[\"disconnect\",{\"1\":{\"107\":3}}],[\"display\",{\"1\":{\"99\":1}}],[\"dissolve\",{\"1\":{\"94\":1}}],[\"diagnosis\",{\"1\":{\"96\":1}}],[\"diagram\",{\"0\":{\"5\":1}}],[\"divides\",{\"1\":{\"93\":1}}],[\"division\",{\"1\":{\"49\":1}}],[\"different\",{\"0\":{\"115\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1},\"1\":{\"29\":2,\"93\":1,\"115\":1,\"124\":1,\"136\":1}}],[\"differences\",{\"1\":{\"100\":1,\"119\":1}}],[\"difference\",{\"0\":{\"116\":1,\"119\":1,\"125\":1,\"126\":1},\"1\":{\"3\":1}}],[\"directly\",{\"1\":{\"29\":1,\"70\":3,\"111\":2,\"130\":1,\"138\":1}}],[\"direct\",{\"1\":{\"4\":1,\"18\":1}}],[\"overflows\",{\"1\":{\"129\":1}}],[\"overflow\",{\"0\":{\"129\":1},\"1\":{\"129\":3}}],[\"overhead\",{\"1\":{\"100\":1}}],[\"occupy\",{\"1\":{\"130\":1}}],[\"occupies\",{\"0\":{\"122\":2},\"1\":{\"122\":4}}],[\"occupied\",{\"0\":{\"122\":1}}],[\"occur\",{\"1\":{\"105\":1,\"116\":1}}],[\"occurred\",{\"1\":{\"97\":2}}],[\"octal\",{\"1\":{\"115\":1}}],[\"owner\",{\"1\":{\"101\":1,\"102\":2}}],[\"own\",{\"1\":{\"99\":1,\"107\":4}}],[\"obtain\",{\"1\":{\"107\":1,\"112\":1}}],[\"obtains\",{\"1\":{\"102\":2}}],[\"obtaining\",{\"1\":{\"99\":3}}],[\"obtained\",{\"1\":{\"98\":2,\"102\":2}}],[\"objects\",{\"0\":{\"112\":1},\"1\":{\"112\":2}}],[\"object\",{\"1\":{\"61\":1,\"117\":2}}],[\"optionally\",{\"1\":{\"117\":1}}],[\"option\",{\"1\":{\"105\":1}}],[\"options\",{\"1\":{\"96\":2,\"105\":1}}],[\"operate\",{\"1\":{\"140\":1}}],[\"operating\",{\"1\":{\"99\":1}}],[\"operation\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"80\":1,\"107\":2,\"134\":2}}],[\"operations\",{\"1\":{\"32\":1,\"68\":1,\"130\":1}}],[\"operator\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"110\":2}}],[\"operators\",{\"0\":{\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1},\"1\":{\"110\":1}}],[\"ospf\",{\"1\":{\"94\":1}}],[\"osi\",{\"0\":{\"93\":1},\"1\":{\"93\":1,\"94\":1}}],[\"ok\",{\"1\":{\"66\":4,\"79\":2,\"85\":1,\"97\":2}}],[\"outside\",{\"1\":{\"46\":1}}],[\"output\",{\"1\":{\"44\":1,\"59\":2,\"60\":4,\"61\":1,\"110\":3,\"122\":1,\"124\":1,\"132\":1,\"133\":1,\"134\":1}}],[\"out\",{\"1\":{\"34\":1,\"90\":2,\"105\":2,\"107\":1,\"128\":1}}],[\"outer\",{\"0\":{\"9\":1,\"12\":1},\"1\":{\"12\":2}}],[\"omitted\",{\"1\":{\"16\":1}}],[\"offset\",{\"1\":{\"105\":1}}],[\"official\",{\"1\":{\"68\":1}}],[\"often\",{\"1\":{\"76\":1}}],[\"of\",{\"0\":{\"67\":1,\"128\":1,\"138\":1,\"140\":1},\"1\":{\"3\":4,\"4\":3,\"12\":3,\"14\":1,\"18\":1,\"21\":2,\"23\":3,\"25\":2,\"29\":1,\"30\":1,\"34\":3,\"35\":1,\"40\":2,\"42\":3,\"44\":3,\"45\":2,\"46\":3,\"54\":1,\"60\":1,\"63\":3,\"67\":1,\"71\":2,\"72\":4,\"73\":2,\"78\":1,\"84\":1,\"86\":1,\"89\":1,\"93\":5,\"97\":4,\"99\":2,\"100\":4,\"101\":9,\"102\":9,\"105\":14,\"107\":3,\"110\":1,\"111\":5,\"112\":1,\"114\":3,\"115\":1,\"116\":3,\"117\":3,\"120\":2,\"121\":1,\"123\":1,\"124\":6,\"126\":2,\"127\":1,\"130\":5,\"132\":1,\"138\":2,\"140\":1}}],[\"online\",{\"1\":{\"101\":2}}],[\"only\",{\"1\":{\"3\":2,\"8\":2,\"10\":1,\"11\":1,\"12\":2,\"18\":1,\"20\":1,\"96\":1,\"97\":3,\"100\":1,\"101\":1,\"105\":1,\"114\":1,\"121\":1,\"123\":2,\"124\":1}}],[\"once\",{\"1\":{\"16\":1,\"40\":1,\"42\":1}}],[\"on\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":4,\"21\":1,\"29\":1,\"37\":1,\"43\":1,\"53\":1,\"78\":1,\"93\":4,\"94\":1,\"97\":2,\"100\":1,\"101\":1,\"102\":1,\"124\":1,\"126\":1,\"134\":2}}],[\"one\",{\"1\":{\"3\":2,\"29\":1,\"32\":1,\"59\":1,\"73\":1,\"100\":2,\"111\":1}}],[\"others\",{\"0\":{\"118\":1}}],[\"otherwise\",{\"1\":{\"50\":6,\"51\":2}}],[\"other\",{\"0\":{\"54\":1},\"1\":{\"3\":1,\"10\":1,\"11\":1,\"12\":1,\"85\":1,\"93\":1,\"94\":1,\"97\":2,\"101\":1,\"105\":1,\"107\":3,\"117\":1,\"124\":1}}],[\"ordinary\",{\"1\":{\"110\":2}}],[\"ordered\",{\"0\":{\"138\":1},\"1\":{\"138\":1}}],[\"order\",{\"0\":{\"128\":1},\"1\":{\"34\":1,\"100\":1,\"128\":1,\"138\":1}}],[\"oriented\",{\"1\":{\"104\":1}}],[\"original\",{\"1\":{\"96\":1,\"97\":2,\"111\":1,\"130\":2}}],[\"organizations\",{\"1\":{\"101\":1}}],[\"or\",{\"0\":{\"130\":1,\"138\":1},\"1\":{\"3\":2,\"21\":1,\"34\":2,\"37\":1,\"41\":1,\"50\":2,\"52\":1,\"58\":1,\"86\":1,\"94\":1,\"96\":1,\"97\":4,\"99\":1,\"100\":1,\"101\":3,\"105\":2}}],[\"would\",{\"1\":{\"134\":1}}],[\"words\",{\"1\":{\"117\":1}}],[\"working\",{\"0\":{\"99\":1},\"1\":{\"97\":1}}],[\"works\",{\"0\":{\"102\":1},\"1\":{\"93\":1}}],[\"world\",{\"1\":{\"28\":1,\"29\":2,\"34\":2,\"98\":1,\"114\":3}}],[\"www\",{\"1\":{\"97\":1}}],[\"was\",{\"1\":{\"59\":1,\"97\":2,\"107\":1}}],[\"ways\",{\"1\":{\"58\":1,\"70\":1}}],[\"way\",{\"0\":{\"107\":1},\"1\":{\"39\":1,\"70\":3,\"101\":1,\"107\":7,\"117\":1}}],[\"wait\",{\"1\":{\"32\":1}}],[\"wants\",{\"1\":{\"97\":1}}],[\"want\",{\"1\":{\"29\":1,\"74\":1,\"123\":1,\"140\":1}}],[\"warning\",{\"1\":{\"3\":1,\"7\":1,\"12\":1,\"77\":1,\"79\":1,\"90\":1,\"99\":1}}],[\"write\",{\"1\":{\"24\":1,\"136\":1,\"139\":1}}],[\"what\",{\"0\":{\"110\":1,\"114\":1,\"116\":1,\"117\":1,\"119\":1,\"124\":1,\"125\":1,\"126\":1,\"128\":1,\"129\":1,\"133\":1,\"134\":1,\"136\":1},\"1\":{\"107\":3,\"124\":3,\"127\":1}}],[\"why\",{\"0\":{\"111\":1},\"1\":{\"107\":3}}],[\"white\",{\"1\":{\"117\":1}}],[\"while\",{\"1\":{\"89\":1,\"110\":1,\"126\":1}}],[\"which\",{\"0\":{\"112\":2},\"1\":{\"16\":2,\"18\":1,\"42\":1,\"45\":1,\"97\":3,\"101\":1,\"107\":1,\"114\":1,\"116\":1,\"130\":1}}],[\"whether\",{\"1\":{\"60\":2,\"79\":1,\"99\":4,\"107\":1,\"129\":1}}],[\"when\",{\"1\":{\"12\":2,\"16\":1,\"70\":1,\"77\":1,\"82\":1,\"86\":1,\"97\":2,\"105\":4,\"111\":1,\"126\":1,\"127\":1,\"129\":1,\"138\":1}}],[\"where\",{\"1\":{\"4\":1,\"12\":4,\"44\":1,\"63\":1}}],[\"window\",{\"1\":{\"105\":2}}],[\"wide\",{\"1\":{\"98\":1,\"101\":1}}],[\"willing\",{\"1\":{\"105\":1}}],[\"will\",{\"0\":{\"127\":1,\"140\":1},\"1\":{\"12\":4,\"16\":1,\"18\":1,\"25\":1,\"29\":1,\"32\":2,\"40\":1,\"74\":1,\"77\":2,\"79\":2,\"80\":1,\"86\":2,\"97\":4,\"99\":1,\"101\":1,\"107\":5,\"116\":1,\"117\":1,\"124\":3,\"126\":1,\"127\":1,\"129\":3,\"130\":6,\"132\":1,\"133\":1,\"134\":1,\"136\":1,\"140\":2}}],[\"withcancel\",{\"0\":{\"91\":1},\"1\":{\"91\":2}}],[\"withtimeout\",{\"0\":{\"90\":1},\"1\":{\"90\":3}}],[\"withdeadline\",{\"0\":{\"90\":1},\"1\":{\"90\":2}}],[\"withvalue\",{\"0\":{\"89\":1},\"1\":{\"88\":11,\"89\":1}}],[\"withxxx\",{\"1\":{\"88\":1}}],[\"within\",{\"1\":{\"46\":1,\"99\":1,\"121\":1,\"130\":1}}],[\"without\",{\"1\":{\"3\":1,\"18\":1,\"100\":1,\"111\":1,\"130\":1}}],[\"with\",{\"1\":{\"3\":2,\"25\":2,\"29\":1,\"30\":1,\"37\":2,\"39\":1,\"52\":2,\"72\":1,\"74\":2,\"90\":1,\"94\":1,\"96\":1,\"97\":2,\"98\":1,\"99\":2,\"105\":1,\"114\":1,\"124\":1}}],[\"web\",{\"1\":{\"98\":1,\"101\":1}}],[\"websites\",{\"1\":{\"101\":2}}],[\"website\",{\"1\":{\"1\":1,\"101\":1}}],[\"wednesday\",{\"1\":{\"29\":1}}],[\"we\",{\"1\":{\"7\":1,\"18\":2,\"53\":1,\"58\":1,\"60\":1,\"61\":1,\"74\":1,\"77\":1,\"79\":1,\"80\":1,\"86\":1,\"111\":3,\"124\":1,\"136\":1,\"140\":2}}],[\"rsp=1\",{\"1\":{\"105\":1}}],[\"rst\",{\"1\":{\"105\":2}}],[\"rarp\",{\"1\":{\"94\":1}}],[\"randomly\",{\"1\":{\"80\":1}}],[\"random\",{\"1\":{\"32\":1,\"138\":1}}],[\"ranges\",{\"0\":{\"123\":1}}],[\"range\",{\"0\":{\"138\":1},\"1\":{\"30\":1,\"37\":1,\"64\":7,\"79\":1,\"102\":1,\"105\":4,\"121\":1,\"127\":2,\"129\":1}}],[\"rip\",{\"1\":{\"94\":1}}],[\"right\",{\"0\":{\"11\":1},\"1\":{\"11\":1,\"50\":4,\"52\":1,\"53\":1}}],[\"rpc\",{\"1\":{\"93\":1}}],[\"run\",{\"1\":{\"115\":1,\"116\":5}}],[\"runtime\",{\"1\":{\"111\":1}}],[\"running\",{\"1\":{\"90\":4,\"91\":4}}],[\"rune\",{\"0\":{\"122\":1},\"1\":{\"37\":1,\"47\":1,\"119\":1,\"120\":1,\"121\":2,\"122\":1,\"123\":1}}],[\"role\",{\"1\":{\"111\":1}}],[\"routes\",{\"1\":{\"94\":1}}],[\"route\",{\"1\":{\"93\":1}}],[\"round\",{\"1\":{\"30\":1}}],[\"root\",{\"0\":{\"86\":1,\"87\":1},\"1\":{\"86\":3,\"99\":2}}],[\"rogers\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"romero\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"rows\",{\"1\":{\"8\":1}}],[\"row\",{\"1\":{\"3\":1}}],[\"rebuilds\",{\"1\":{\"105\":1}}],[\"related\",{\"1\":{\"117\":1}}],[\"relatively\",{\"1\":{\"98\":2}}],[\"relational\",{\"0\":{\"50\":1}}],[\"relationships\",{\"1\":{\"3\":2,\"111\":1}}],[\"relationship\",{\"0\":{\"3\":1},\"1\":{\"3\":2}}],[\"released\",{\"0\":{\"140\":1}}],[\"release\",{\"1\":{\"105\":1,\"111\":2}}],[\"relevant\",{\"1\":{\"102\":1}}],[\"reliable\",{\"1\":{\"104\":1}}],[\"represent\",{\"1\":{\"119\":1,\"121\":2,\"123\":2}}],[\"represented\",{\"0\":{\"123\":1},\"1\":{\"115\":2}}],[\"represents\",{\"1\":{\"105\":1}}],[\"representing\",{\"1\":{\"105\":1}}],[\"repudiation\",{\"1\":{\"102\":1}}],[\"repeated\",{\"1\":{\"100\":1,\"130\":1}}],[\"replace\",{\"1\":{\"96\":1}}],[\"revocation\",{\"1\":{\"99\":1}}],[\"red\",{\"1\":{\"117\":2}}],[\"redirect\",{\"1\":{\"97\":4}}],[\"redirection\",{\"1\":{\"97\":1}}],[\"reduces\",{\"1\":{\"100\":1}}],[\"reduce\",{\"1\":{\"12\":1}}],[\"redundant\",{\"1\":{\"3\":1}}],[\"requested\",{\"1\":{\"97\":7,\"99\":1}}],[\"requests\",{\"1\":{\"96\":1,\"97\":2,\"100\":4,\"105\":1}}],[\"request\",{\"0\":{\"96\":1},\"1\":{\"96\":4,\"97\":17,\"99\":3,\"100\":3,\"105\":1}}],[\"requires\",{\"1\":{\"18\":1,\"100\":1}}],[\"retained\",{\"1\":{\"140\":1}}],[\"retaining\",{\"1\":{\"89\":1}}],[\"retrieval\",{\"1\":{\"111\":1}}],[\"retry\",{\"1\":{\"107\":1}}],[\"retransmitted\",{\"1\":{\"107\":1}}],[\"returns\",{\"1\":{\"12\":1,\"96\":2,\"97\":1,\"99\":1,\"107\":1,\"138\":1}}],[\"returned\",{\"1\":{\"8\":1,\"10\":2,\"11\":2,\"12\":3,\"97\":3,\"107\":1,\"116\":1}}],[\"return\",{\"1\":{\"8\":1,\"12\":1,\"17\":1,\"32\":1,\"34\":6,\"61\":1,\"81\":1,\"90\":1,\"91\":1,\"96\":1,\"97\":5,\"111\":1,\"116\":2,\"125\":1,\"132\":1}}],[\"references\",{\"1\":{\"111\":1}}],[\"reference\",{\"1\":{\"74\":1,\"124\":2,\"126\":1,\"130\":1,\"140\":1}}],[\"refers\",{\"1\":{\"4\":1,\"105\":1}}],[\"reason\",{\"1\":{\"107\":1,\"137\":1}}],[\"reassemble\",{\"1\":{\"105\":1}}],[\"reaches\",{\"1\":{\"77\":1,\"129\":1}}],[\"real\",{\"1\":{\"39\":2}}],[\"reading\",{\"1\":{\"79\":1}}],[\"read\",{\"0\":{\"132\":1},\"1\":{\"24\":1,\"79\":1,\"132\":1,\"139\":1}}],[\"remains\",{\"1\":{\"124\":1}}],[\"remaining\",{\"1\":{\"30\":1}}],[\"remote\",{\"1\":{\"97\":1}}],[\"removed\",{\"1\":{\"3\":1}}],[\"records\",{\"1\":{\"105\":1}}],[\"recommended\",{\"1\":{\"25\":1}}],[\"recalculates\",{\"1\":{\"138\":1}}],[\"recalculate\",{\"1\":{\"102\":1}}],[\"recently\",{\"1\":{\"107\":1}}],[\"reception\",{\"1\":{\"101\":1}}],[\"receiver\",{\"1\":{\"105\":6}}],[\"received\",{\"1\":{\"77\":1,\"96\":1,\"97\":3,\"100\":1,\"105\":4,\"107\":2}}],[\"receive\",{\"1\":{\"32\":1,\"80\":5,\"93\":1,\"105\":2}}],[\"receives\",{\"1\":{\"32\":1,\"105\":1}}],[\"receiving\",{\"0\":{\"78\":1},\"1\":{\"23\":2,\"78\":1,\"82\":1}}],[\"recipients\",{\"1\":{\"101\":1}}],[\"recursive\",{\"1\":{\"99\":1}}],[\"respond\",{\"1\":{\"97\":1}}],[\"responses\",{\"1\":{\"100\":2}}],[\"response\",{\"1\":{\"96\":2,\"97\":2,\"99\":1,\"100\":1}}],[\"responsible\",{\"1\":{\"93\":2}}],[\"reset\",{\"1\":{\"97\":3}}],[\"resend\",{\"1\":{\"97\":1,\"107\":1}}],[\"reserved\",{\"1\":{\"14\":1}}],[\"resources\",{\"1\":{\"97\":4}}],[\"resource\",{\"1\":{\"96\":2,\"97\":10}}],[\"results\",{\"1\":{\"88\":1,\"90\":1,\"91\":1}}],[\"result\",{\"1\":{\"4\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":2,\"29\":2,\"31\":1,\"34\":3,\"35\":1,\"43\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"64\":1,\"65\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"81\":1,\"115\":1,\"127\":1,\"128\":1}}],[\"reyes\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"ieee802\",{\"1\":{\"94\":2}}],[\"icmf\",{\"1\":{\"94\":1}}],[\"ichp\",{\"1\":{\"94\":1}}],[\"ip\",{\"0\":{\"94\":1},\"1\":{\"93\":1,\"94\":4,\"105\":1}}],[\"impact\",{\"1\":{\"127\":1}}],[\"improving\",{\"1\":{\"111\":1}}],[\"improve\",{\"1\":{\"111\":1}}],[\"implement\",{\"1\":{\"101\":1}}],[\"implemented\",{\"1\":{\"81\":1,\"97\":2,\"137\":1}}],[\"implements\",{\"1\":{\"57\":1,\"93\":1}}],[\"imported\",{\"1\":{\"18\":2}}],[\"imports\",{\"1\":{\"18\":2}}],[\"import\",{\"1\":{\"18\":12,\"29\":1,\"31\":1,\"32\":1,\"34\":2,\"35\":1,\"40\":1,\"43\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"64\":1,\"65\":1,\"66\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":1,\"81\":1,\"88\":1,\"90\":1,\"91\":1,\"115\":1,\"122\":1,\"124\":2,\"125\":2,\"127\":1,\"128\":1,\"129\":1,\"132\":1}}],[\"important\",{\"1\":{\"12\":1,\"84\":1,\"111\":1}}],[\"imaginary\",{\"1\":{\"39\":3}}],[\"i++\",{\"1\":{\"30\":1,\"32\":1}}],[\"iota\",{\"1\":{\"16\":2}}],[\"itself\",{\"1\":{\"97\":1,\"98\":1}}],[\"its\",{\"1\":{\"86\":1,\"99\":2,\"101\":2,\"102\":1,\"107\":7,\"124\":1}}],[\"iteration\",{\"1\":{\"30\":1}}],[\"it\",{\"1\":{\"16\":1,\"25\":1,\"29\":1,\"34\":1,\"40\":1,\"46\":1,\"60\":1,\"70\":1,\"79\":2,\"80\":1,\"91\":1,\"93\":1,\"97\":4,\"98\":2,\"99\":5,\"102\":1,\"105\":6,\"107\":3,\"110\":1,\"111\":1,\"114\":1,\"116\":3,\"124\":2,\"129\":1,\"130\":3,\"133\":1,\"138\":3,\"140\":1}}],[\"identity\",{\"1\":{\"98\":1,\"101\":3,\"102\":2}}],[\"identifier2\",{\"1\":{\"16\":1}}],[\"identifier1\",{\"1\":{\"16\":1}}],[\"identifier\",{\"1\":{\"16\":1}}],[\"identifiers\",{\"1\":{\"14\":1,\"18\":1}}],[\"identify\",{\"1\":{\"3\":7,\"101\":1}}],[\"id=c\",{\"1\":{\"8\":2,\"10\":2,\"11\":2,\"12\":2}}],[\"idstudent\",{\"1\":{\"3\":1}}],[\"idteacher\",{\"1\":{\"3\":1}}],[\"id\",{\"1\":{\"3\":9,\"6\":1,\"7\":2,\"8\":5,\"10\":5,\"11\":5,\"12\":5}}],[\"ifelse\",{\"1\":{\"28\":1}}],[\"if\",{\"0\":{\"66\":1,\"127\":1,\"133\":1,\"134\":1},\"1\":{\"3\":2,\"12\":1,\"28\":1,\"29\":1,\"30\":2,\"31\":1,\"32\":1,\"50\":12,\"51\":4,\"66\":3,\"74\":2,\"79\":3,\"80\":1,\"99\":2,\"101\":2,\"102\":1,\"105\":3,\"107\":3,\"116\":1,\"123\":1,\"124\":1,\"129\":1,\"130\":2,\"140\":2}}],[\"i\",{\"1\":{\"3\":1,\"30\":15,\"31\":5,\"32\":2,\"34\":4,\"43\":4,\"105\":1,\"107\":4}}],[\"isn\",{\"1\":{\"107\":2}}],[\"isnumber\",{\"1\":{\"41\":3}}],[\"issuing\",{\"1\":{\"102\":1}}],[\"issuer\",{\"1\":{\"102\":6}}],[\"issued\",{\"1\":{\"101\":1}}],[\"is02110\",{\"1\":{\"94\":1}}],[\"is\",{\"0\":{\"60\":1,\"110\":1,\"116\":1,\"117\":1,\"119\":1,\"128\":1,\"129\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1},\"1\":{\"3\":8,\"4\":2,\"7\":2,\"8\":1,\"12\":1,\"16\":2,\"17\":3,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"25\":2,\"26\":2,\"28\":1,\"29\":1,\"30\":1,\"34\":3,\"35\":1,\"40\":2,\"41\":1,\"44\":4,\"50\":4,\"51\":2,\"60\":6,\"63\":4,\"74\":1,\"76\":1,\"77\":2,\"79\":3,\"81\":1,\"84\":2,\"86\":1,\"87\":1,\"90\":1,\"93\":5,\"97\":15,\"98\":11,\"99\":5,\"101\":8,\"102\":3,\"104\":1,\"105\":20,\"107\":15,\"111\":1,\"114\":5,\"116\":5,\"117\":3,\"120\":2,\"121\":2,\"123\":2,\"124\":6,\"125\":3,\"126\":3,\"127\":2,\"128\":1,\"129\":1,\"130\":9,\"137\":2,\"138\":2,\"140\":3}}],[\"input\",{\"1\":{\"130\":1}}],[\"involves\",{\"1\":{\"110\":1}}],[\"invalid\",{\"1\":{\"29\":1,\"105\":1}}],[\"instructions\",{\"1\":{\"107\":1}}],[\"installed\",{\"1\":{\"101\":1}}],[\"instead\",{\"1\":{\"97\":1,\"111\":1}}],[\"indefinitely\",{\"0\":{\"127\":1}}],[\"independent\",{\"1\":{\"124\":1}}],[\"indeed\",{\"1\":{\"105\":1}}],[\"index\",{\"1\":{\"42\":1}}],[\"indexes\",{\"1\":{\"12\":1}}],[\"individuals\",{\"1\":{\"101\":1}}],[\"indicating\",{\"1\":{\"97\":3,\"105\":1,\"107\":1}}],[\"indicative\",{\"1\":{\"97\":1}}],[\"indicates\",{\"1\":{\"97\":16,\"105\":7}}],[\"incorrect\",{\"1\":{\"97\":3}}],[\"including\",{\"1\":{\"71\":1,\"102\":1}}],[\"includes\",{\"1\":{\"107\":2}}],[\"include\",{\"1\":{\"37\":2,\"97\":2,\"101\":1}}],[\"increase\",{\"1\":{\"55\":1,\"107\":1}}],[\"increment\",{\"1\":{\"49\":1}}],[\"initiate\",{\"1\":{\"107\":1}}],[\"initiated\",{\"1\":{\"100\":1,\"107\":1}}],[\"initiates\",{\"1\":{\"99\":2,\"107\":1}}],[\"initializing\",{\"1\":{\"125\":2}}],[\"initialize\",{\"1\":{\"21\":2,\"39\":2,\"44\":1,\"63\":2,\"64\":2,\"65\":2,\"66\":1,\"70\":2,\"117\":2}}],[\"initialization\",{\"1\":{\"18\":1,\"25\":1,\"30\":1,\"117\":2,\"124\":2,\"132\":1}}],[\"initial\",{\"1\":{\"16\":1,\"25\":1,\"107\":1}}],[\"init\",{\"1\":{\"18\":1}}],[\"infrastructure\",{\"1\":{\"101\":1}}],[\"infer\",{\"1\":{\"16\":1,\"21\":1}}],[\"information\",{\"1\":{\"32\":1,\"84\":1,\"96\":2,\"97\":6,\"101\":2,\"102\":6}}],[\"info\",{\"1\":{\"10\":1,\"11\":1,\"12\":1,\"96\":1}}],[\"inner\",{\"0\":{\"8\":1},\"1\":{\"8\":4,\"12\":5}}],[\"in\",{\"0\":{\"119\":1,\"124\":1},\"1\":{\"3\":5,\"4\":3,\"7\":1,\"12\":2,\"14\":1,\"34\":1,\"35\":1,\"37\":3,\"46\":1,\"59\":1,\"61\":1,\"65\":1,\"68\":1,\"84\":4,\"93\":2,\"94\":1,\"97\":2,\"99\":1,\"100\":2,\"101\":3,\"102\":4,\"105\":6,\"107\":2,\"111\":3,\"117\":2,\"119\":1,\"124\":2,\"126\":1,\"128\":1,\"130\":2,\"133\":1,\"134\":2,\"138\":1,\"140\":1}}],[\"int64\",{\"1\":{\"47\":1}}],[\"int64uint64\",{\"1\":{\"37\":1}}],[\"int16\",{\"1\":{\"47\":1}}],[\"int16uint16\",{\"1\":{\"37\":1}}],[\"int8\",{\"1\":{\"47\":1,\"129\":1}}],[\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",{\"1\":{\"114\":1}}],[\"int8uint8\",{\"1\":{\"37\":1}}],[\"intuintfloat32stringstruct\",{\"1\":{\"140\":1}}],[\"intuint\",{\"1\":{\"37\":1}}],[\"integrity\",{\"1\":{\"98\":1}}],[\"integer\",{\"1\":{\"37\":1,\"114\":1}}],[\"integers\",{\"0\":{\"37\":1},\"1\":{\"37\":7}}],[\"interval\",{\"1\":{\"107\":1}}],[\"interview\",{\"1\":{\"1\":1}}],[\"internet\",{\"1\":{\"101\":2}}],[\"internally\",{\"1\":{\"137\":1,\"138\":1}}],[\"internal\",{\"1\":{\"47\":1,\"97\":1,\"112\":1}}],[\"interactive\",{\"1\":{\"93\":1}}],[\"interrupt\",{\"1\":{\"30\":1}}],[\"interfaces\",{\"1\":{\"24\":1}}],[\"interface\",{\"0\":{\"57\":1,\"85\":1},\"1\":{\"20\":2,\"24\":2,\"47\":1,\"57\":2,\"84\":1,\"85\":3,\"94\":3}}],[\"int\",{\"0\":{\"37\":1},\"1\":{\"29\":1,\"30\":1,\"32\":3,\"37\":1,\"42\":1,\"43\":1,\"44\":2,\"46\":1,\"47\":1,\"63\":3,\"71\":1,\"72\":1,\"73\":1,\"74\":2,\"117\":3,\"124\":4,\"125\":2,\"127\":1,\"129\":1,\"132\":2,\"133\":2,\"134\":2}}],[\"into\",{\"1\":{\"26\":1,\"59\":1,\"93\":2,\"99\":1,\"136\":1}}],[\"int32uint32\",{\"1\":{\"37\":1}}],[\"int32\",{\"1\":{\"20\":2,\"37\":1,\"47\":1,\"120\":1}}],[\"introduction\",{\"0\":{\"76\":1,\"84\":1},\"1\":{\"14\":1,\"136\":1}}],[\"introduced\",{\"1\":{\"59\":1}}],[\"introduce\",{\"0\":{\"1\":1}}],[\"tls\",{\"1\":{\"98\":1,\"101\":1}}],[\"tftp\",{\"1\":{\"94\":1}}],[\"tcp\",{\"0\":{\"94\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1},\"1\":{\"93\":1,\"94\":4,\"100\":2,\"104\":1,\"105\":9,\"106\":1,\"107\":5}}],[\"talk\",{\"1\":{\"124\":2}}],[\"take\",{\"1\":{\"116\":1,\"124\":1}}],[\"tamp\",{\"1\":{\"110\":2}}],[\"tampering\",{\"1\":{\"102\":1}}],[\"target\",{\"1\":{\"60\":2,\"61\":2,\"96\":1}}],[\"tables\",{\"1\":{\"3\":3,\"4\":1}}],[\"table\",{\"0\":{\"4\":1,\"5\":1,\"47\":1},\"1\":{\"3\":9,\"4\":2,\"5\":3,\"7\":6,\"10\":1,\"11\":1,\"12\":3,\"44\":1,\"52\":1,\"63\":1}}],[\"tunnel\",{\"1\":{\"96\":1}}],[\"tuesday\",{\"1\":{\"29\":1}}],[\"turner\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"trigger\",{\"1\":{\"133\":1}}],[\"try\",{\"1\":{\"107\":1}}],[\"trees\",{\"1\":{\"111\":1}}],[\"tree\",{\"1\":{\"86\":1}}],[\"trace\",{\"1\":{\"96\":2}}],[\"transactions\",{\"1\":{\"102\":1}}],[\"transport\",{\"1\":{\"93\":2,\"94\":3,\"104\":1,\"105\":1}}],[\"transparent\",{\"1\":{\"93\":1}}],[\"transmitted\",{\"1\":{\"99\":1,\"101\":1,\"105\":1}}],[\"transmits\",{\"1\":{\"94\":2}}],[\"transmit\",{\"1\":{\"93\":1}}],[\"transmission\",{\"1\":{\"93\":2,\"97\":1,\"98\":3,\"101\":2,\"104\":1,\"107\":1}}],[\"transfers\",{\"1\":{\"130\":1}}],[\"transfer\",{\"1\":{\"84\":2,\"94\":1,\"98\":2,\"130\":8,\"136\":2}}],[\"translation\",{\"1\":{\"26\":1,\"97\":1,\"123\":1}}],[\"traversal\",{\"0\":{\"138\":1},\"1\":{\"138\":1}}],[\"traversed\",{\"1\":{\"127\":2}}],[\"traverse\",{\"1\":{\"64\":4}}],[\"traversing\",{\"0\":{\"64\":1}}],[\"trust\",{\"1\":{\"102\":1}}],[\"trusted\",{\"1\":{\"101\":1}}],[\"truth\",{\"1\":{\"52\":1}}],[\"true\",{\"1\":{\"16\":1,\"41\":2,\"50\":9,\"51\":8,\"60\":2}}],[\"timing\",{\"1\":{\"81\":1,\"102\":1}}],[\"times\",{\"1\":{\"107\":2}}],[\"timestamp\",{\"1\":{\"105\":1}}],[\"timely\",{\"1\":{\"93\":1,\"97\":1}}],[\"timeout\",{\"1\":{\"84\":2,\"86\":1,\"90\":1,\"97\":3,\"107\":2,\"136\":3}}],[\"timer\",{\"1\":{\"81\":1}}],[\"time\",{\"0\":{\"127\":1},\"1\":{\"32\":1,\"35\":3,\"80\":2,\"81\":3,\"84\":1,\"85\":2,\"90\":11,\"91\":7,\"102\":2,\"107\":4,\"117\":1,\"124\":1}}],[\"tiger\",{\"1\":{\"20\":1}}],[\"title\",{\"1\":{\"6\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"t5\",{\"1\":{\"17\":1}}],[\"t4\",{\"1\":{\"17\":1}}],[\"t3\",{\"1\":{\"17\":1}}],[\"t2\",{\"1\":{\"17\":1}}],[\"t1\",{\"1\":{\"17\":2}}],[\"tells\",{\"1\":{\"105\":1}}],[\"telnet\",{\"1\":{\"94\":1}}],[\"temporary\",{\"1\":{\"97\":2}}],[\"temporarily\",{\"1\":{\"97\":2}}],[\"text\",{\"1\":{\"97\":1,\"114\":1,\"116\":1,\"123\":1}}],[\"terminal\",{\"1\":{\"94\":1,\"97\":2,\"101\":1}}],[\"terminating\",{\"1\":{\"93\":1}}],[\"termination\",{\"1\":{\"84\":1,\"100\":1}}],[\"terminated\",{\"1\":{\"84\":1,\"86\":2,\"91\":1,\"136\":1}}],[\"terminate\",{\"1\":{\"34\":1,\"79\":1,\"84\":1,\"91\":1,\"136\":2}}],[\"testing\",{\"1\":{\"96\":1}}],[\"test\",{\"1\":{\"17\":3,\"96\":1}}],[\"teacher\",{\"1\":{\"3\":3}}],[\"t\",{\"1\":{\"16\":2,\"17\":4,\"21\":4,\"23\":8,\"61\":3,\"77\":3,\"81\":2,\"114\":1,\"116\":2,\"132\":1}}],[\"types\",{\"0\":{\"15\":1,\"22\":1,\"120\":1},\"1\":{\"14\":2,\"20\":2,\"21\":1,\"37\":4,\"74\":1,\"119\":1,\"124\":2,\"129\":1,\"130\":1}}],[\"type\",{\"0\":{\"36\":1},\"1\":{\"14\":1,\"16\":1,\"17\":1,\"20\":6,\"21\":2,\"23\":3,\"24\":1,\"26\":1,\"37\":2,\"38\":1,\"39\":1,\"40\":1,\"41\":2,\"44\":2,\"45\":1,\"47\":1,\"57\":3,\"60\":1,\"61\":2,\"63\":2,\"77\":1,\"85\":1,\"88\":7,\"93\":1,\"114\":8,\"117\":3,\"120\":2,\"123\":2,\"124\":8,\"125\":2,\"132\":1,\"140\":2}}],[\"two\",{\"1\":{\"3\":1,\"4\":1,\"12\":1,\"37\":2,\"50\":2,\"74\":1,\"93\":1,\"101\":1,\"102\":1,\"110\":1,\"111\":1,\"124\":2}}],[\"thinking\",{\"1\":{\"138\":1}}],[\"third\",{\"1\":{\"64\":6,\"65\":6,\"66\":2,\"70\":1,\"98\":2}}],[\"this\",{\"1\":{\"1\":1,\"5\":1,\"64\":1,\"65\":1,\"68\":1,\"93\":2,\"97\":3,\"99\":4,\"105\":9,\"107\":2,\"111\":1,\"114\":1,\"116\":1}}],[\"than\",{\"1\":{\"50\":4,\"105\":1}}],[\"that\",{\"1\":{\"3\":1,\"8\":2,\"10\":2,\"11\":2,\"12\":3,\"14\":1,\"38\":1,\"43\":1,\"57\":1,\"61\":1,\"74\":2,\"78\":1,\"79\":1,\"82\":1,\"93\":1,\"97\":19,\"101\":2,\"102\":2,\"105\":11,\"107\":2,\"114\":1,\"115\":1,\"123\":1,\"124\":1,\"125\":1,\"130\":4,\"132\":1,\"137\":1,\"138\":1,\"140\":1}}],[\"those\",{\"1\":{\"37\":1}}],[\"thursday\",{\"1\":{\"29\":2}}],[\"throw\",{\"1\":{\"134\":1}}],[\"through\",{\"1\":{\"4\":1,\"44\":1,\"81\":1,\"97\":1,\"98\":1,\"102\":1,\"111\":3}}],[\"thread\",{\"0\":{\"137\":1},\"1\":{\"68\":1,\"137\":1}}],[\"three\",{\"0\":{\"107\":1},\"1\":{\"8\":1,\"70\":1,\"96\":1,\"107\":3,\"115\":1}}],[\"them\",{\"1\":{\"93\":1,\"119\":1}}],[\"their\",{\"1\":{\"18\":1,\"43\":1,\"47\":1,\"112\":2}}],[\"these\",{\"1\":{\"14\":3,\"114\":1}}],[\"thereby\",{\"1\":{\"111\":2}}],[\"therefore\",{\"1\":{\"107\":1}}],[\"there\",{\"1\":{\"3\":1,\"12\":1,\"37\":1,\"70\":1,\"82\":1,\"98\":1,\"105\":2,\"107\":1,\"114\":1,\"119\":1,\"123\":1}}],[\"then\",{\"1\":{\"3\":1,\"4\":1,\"12\":1,\"50\":6,\"51\":4,\"79\":2,\"99\":2,\"101\":1,\"102\":1,\"105\":1,\"140\":2}}],[\"they\",{\"1\":{\"3\":1,\"101\":2,\"102\":2,\"115\":1,\"117\":1}}],[\"the\",{\"0\":{\"67\":1,\"115\":1,\"116\":1,\"119\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"136\":1,\"138\":1,\"140\":3},\"1\":{\"3\":24,\"4\":5,\"5\":1,\"7\":7,\"8\":4,\"10\":2,\"11\":2,\"12\":11,\"14\":2,\"16\":2,\"17\":2,\"18\":3,\"19\":1,\"21\":2,\"25\":1,\"26\":1,\"29\":4,\"30\":4,\"31\":1,\"32\":1,\"34\":4,\"35\":2,\"39\":1,\"40\":2,\"41\":2,\"42\":1,\"43\":1,\"44\":10,\"46\":3,\"51\":1,\"53\":3,\"57\":2,\"60\":4,\"61\":4,\"63\":11,\"64\":1,\"65\":2,\"67\":1,\"68\":1,\"71\":5,\"72\":4,\"73\":1,\"74\":5,\"77\":4,\"78\":3,\"79\":2,\"80\":4,\"81\":2,\"84\":6,\"86\":3,\"89\":1,\"93\":19,\"96\":10,\"97\":72,\"98\":5,\"99\":44,\"100\":6,\"101\":17,\"102\":46,\"105\":52,\"107\":42,\"110\":3,\"111\":8,\"112\":2,\"114\":4,\"115\":3,\"116\":3,\"117\":6,\"121\":1,\"123\":4,\"124\":17,\"125\":1,\"126\":3,\"127\":2,\"128\":1,\"129\":4,\"130\":15,\"132\":2,\"136\":3,\"137\":1,\"138\":5,\"139\":1,\"140\":9}}],[\"together\",{\"1\":{\"117\":1}}],[\"too\",{\"1\":{\"105\":1}}],[\"todo\",{\"1\":{\"87\":2}}],[\"tony\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"to\",{\"0\":{\"133\":1},\"1\":{\"3\":6,\"4\":3,\"8\":2,\"14\":4,\"16\":1,\"17\":1,\"18\":4,\"19\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"25\":2,\"26\":1,\"29\":3,\"30\":3,\"31\":4,\"32\":1,\"34\":3,\"35\":1,\"37\":4,\"39\":1,\"46\":3,\"50\":2,\"53\":3,\"55\":2,\"57\":1,\"58\":2,\"59\":2,\"60\":3,\"61\":3,\"64\":4,\"65\":1,\"67\":1,\"68\":1,\"70\":1,\"72\":2,\"73\":1,\"74\":4,\"76\":1,\"77\":1,\"78\":2,\"79\":4,\"80\":3,\"81\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"89\":1,\"90\":2,\"93\":5,\"94\":1,\"96\":7,\"97\":19,\"98\":3,\"99\":9,\"100\":2,\"101\":7,\"102\":10,\"105\":8,\"107\":18,\"110\":2,\"111\":2,\"112\":1,\"116\":4,\"117\":3,\"119\":1,\"121\":2,\"123\":1,\"124\":3,\"125\":3,\"128\":1,\"129\":2,\"130\":3,\"133\":1,\"136\":1,\"138\":2,\"139\":1,\"140\":4}}],[\"keep\",{\"1\":{\"138\":1}}],[\"keytype\",{\"1\":{\"44\":2,\"63\":2}}],[\"keywords\",{\"0\":{\"13\":1,\"14\":1},\"1\":{\"14\":5}}],[\"key\",{\"0\":{\"65\":1,\"66\":1,\"132\":1,\"134\":1,\"140\":2},\"1\":{\"3\":31,\"25\":1,\"44\":3,\"63\":3,\"64\":18,\"65\":2,\"66\":3,\"85\":1,\"89\":1,\"99\":12,\"101\":6,\"102\":6,\"117\":1,\"132\":1,\"140\":2}}],[\"keys\",{\"0\":{\"3\":1},\"1\":{\"3\":2,\"64\":1,\"101\":2,\"102\":1}}],[\"kind\",{\"1\":{\"114\":2,\"116\":1}}],[\"know\",{\"1\":{\"74\":1,\"101\":1}}],[\"known\",{\"1\":{\"4\":1,\"101\":2}}],[\"knowledge\",{\"1\":{\"1\":1}}],[\"affect\",{\"1\":{\"124\":1,\"130\":2}}],[\"after\",{\"0\":{\"140\":1},\"1\":{\"12\":1,\"29\":2,\"34\":1,\"97\":1,\"100\":1,\"102\":2,\"107\":2,\"129\":2,\"136\":1,\"140\":2}}],[\"abbreviated\",{\"1\":{\"105\":2}}],[\"about\",{\"1\":{\"4\":1,\"110\":1,\"124\":2}}],[\"again\",{\"1\":{\"99\":1}}],[\"age\",{\"1\":{\"3\":3,\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"authority\",{\"1\":{\"102\":1}}],[\"authorities\",{\"1\":{\"101\":1}}],[\"authoritative\",{\"1\":{\"97\":2,\"101\":1}}],[\"authenticate\",{\"1\":{\"97\":1}}],[\"authentication\",{\"1\":{\"97\":1,\"98\":1}}],[\"automatically\",{\"1\":{\"25\":1,\"29\":1,\"43\":1,\"97\":1,\"117\":1,\"126\":1,\"136\":1,\"138\":1}}],[\"applications\",{\"1\":{\"93\":2}}],[\"application\",{\"1\":{\"93\":1,\"94\":7,\"101\":1,\"107\":2}}],[\"appropriate\",{\"1\":{\"93\":1}}],[\"appending\",{\"0\":{\"73\":1}}],[\"append\",{\"1\":{\"43\":1,\"73\":6,\"74\":1,\"127\":1}}],[\"api\",{\"1\":{\"85\":1}}],[\"among\",{\"1\":{\"84\":1}}],[\"avoiding\",{\"1\":{\"111\":1}}],[\"avoid\",{\"1\":{\"82\":1,\"129\":1,\"130\":1}}],[\"aware\",{\"1\":{\"82\":1}}],[\"a++\",{\"1\":{\"49\":1}}],[\"advantage\",{\"1\":{\"130\":2}}],[\"adsp\",{\"1\":{\"93\":1}}],[\"adjacent\",{\"1\":{\"93\":2}}],[\"adjustment\",{\"1\":{\"105\":1}}],[\"adjust\",{\"1\":{\"43\":1}}],[\"added\",{\"1\":{\"126\":1}}],[\"adds\",{\"0\":{\"127\":1},\"1\":{\"107\":1}}],[\"add\",{\"1\":{\"64\":1,\"74\":1,\"89\":1,\"90\":1,\"129\":1,\"139\":1}}],[\"additionally\",{\"1\":{\"96\":1}}],[\"addition\",{\"1\":{\"49\":1,\"101\":1}}],[\"addressable\",{\"1\":{\"116\":2}}],[\"addresses\",{\"1\":{\"97\":1,\"112\":1,\"138\":1}}],[\"addressed\",{\"0\":{\"112\":1},\"1\":{\"94\":1,\"112\":2}}],[\"address\",{\"1\":{\"46\":2,\"54\":1,\"74\":1,\"96\":2,\"110\":4,\"116\":2,\"124\":3,\"130\":1}}],[\"adams\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"achieving\",{\"1\":{\"111\":1}}],[\"ack=y+2\",{\"1\":{\"107\":1}}],[\"ack=y+1\",{\"1\":{\"107\":1}}],[\"ack=1\",{\"1\":{\"105\":1}}],[\"acknowledges\",{\"1\":{\"107\":1}}],[\"acknowledge\",{\"1\":{\"107\":3}}],[\"acknowledgment\",{\"1\":{\"105\":4,\"107\":1}}],[\"ack\",{\"1\":{\"105\":2,\"107\":5}}],[\"account\",{\"1\":{\"101\":2}}],[\"acceptance\",{\"1\":{\"105\":1}}],[\"accepted\",{\"1\":{\"97\":4}}],[\"accessing\",{\"1\":{\"97\":1}}],[\"access\",{\"1\":{\"97\":1,\"102\":1,\"111\":2}}],[\"accessed\",{\"1\":{\"42\":1,\"45\":1,\"97\":2}}],[\"across\",{\"1\":{\"85\":1}}],[\"actively\",{\"1\":{\"107\":1}}],[\"activities\",{\"1\":{\"101\":1}}],[\"action\",{\"1\":{\"29\":2,\"80\":1}}],[\"actions\",{\"1\":{\"29\":1,\"30\":1,\"31\":1,\"34\":1,\"35\":1}}],[\"acts\",{\"1\":{\"97\":1}}],[\"actually\",{\"1\":{\"74\":1,\"127\":1,\"130\":1}}],[\"attach\",{\"1\":{\"102\":1}}],[\"attributes\",{\"1\":{\"47\":1}}],[\"attribute\",{\"1\":{\"3\":1}}],[\"at\",{\"0\":{\"127\":1},\"1\":{\"25\":1,\"32\":1,\"80\":2,\"93\":1,\"99\":1,\"102\":1,\"107\":1,\"111\":1,\"126\":1}}],[\"arp\",{\"1\":{\"94\":1}}],[\"arrangement\",{\"1\":{\"138\":1}}],[\"arrays\",{\"0\":{\"42\":1,\"126\":1},\"1\":{\"42\":1,\"43\":1,\"112\":1,\"117\":3,\"126\":1}}],[\"array\",{\"0\":{\"42\":1},\"1\":{\"30\":4,\"42\":1,\"59\":1,\"112\":1,\"124\":2,\"126\":1,\"130\":1}}],[\"arrives\",{\"1\":{\"100\":1}}],[\"arr\",{\"1\":{\"71\":1}}],[\"arithmetic\",{\"0\":{\"49\":1}}],[\"architecture\",{\"1\":{\"37\":1,\"101\":1}}],[\"art\",{\"1\":{\"6\":1,\"8\":2,\"10\":2,\"11\":2,\"12\":2}}],[\"around\",{\"1\":{\"5\":1}}],[\"are\",{\"0\":{\"124\":1,\"136\":1},\"1\":{\"3\":2,\"4\":1,\"5\":1,\"8\":2,\"10\":2,\"11\":2,\"12\":4,\"14\":3,\"37\":3,\"38\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"45\":1,\"47\":1,\"50\":2,\"51\":2,\"68\":1,\"70\":1,\"74\":1,\"93\":1,\"101\":4,\"102\":2,\"114\":2,\"115\":1,\"117\":2,\"119\":2,\"123\":1,\"124\":4,\"126\":1}}],[\"asymmetric\",{\"1\":{\"99\":1}}],[\"associated\",{\"1\":{\"114\":1}}],[\"assembles\",{\"1\":{\"93\":1}}],[\"assign\",{\"0\":{\"133\":1},\"1\":{\"53\":1,\"61\":1,\"74\":1,\"117\":2,\"140\":1}}],[\"assignment\",{\"0\":{\"53\":1},\"1\":{\"133\":1}}],[\"assuming\",{\"1\":{\"52\":1}}],[\"assume\",{\"1\":{\"3\":1}}],[\"ascii\",{\"1\":{\"37\":1,\"121\":2}}],[\"as\",{\"0\":{\"61\":1},\"1\":{\"3\":1,\"4\":1,\"12\":2,\"14\":1,\"16\":1,\"44\":1,\"46\":1,\"53\":1,\"61\":2,\"63\":1,\"78\":2,\"93\":1,\"97\":3,\"101\":1,\"102\":2,\"105\":5,\"107\":2,\"111\":2,\"117\":5,\"124\":6,\"129\":1}}],[\"asked\",{\"1\":{\"1\":1}}],[\"algorithm\",{\"1\":{\"100\":1,\"102\":3,\"138\":1}}],[\"already\",{\"1\":{\"79\":2}}],[\"alternatively\",{\"1\":{\"64\":1,\"65\":1}}],[\"although\",{\"1\":{\"25\":1,\"100\":1}}],[\"alias\",{\"1\":{\"20\":1,\"120\":2}}],[\"aliases\",{\"1\":{\"18\":2}}],[\"alan\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"also\",{\"1\":{\"3\":1,\"4\":1,\"10\":1,\"11\":1,\"12\":1,\"18\":2,\"37\":1,\"80\":1,\"86\":1,\"87\":1,\"93\":1,\"96\":1,\"101\":2,\"105\":1,\"107\":2,\"124\":2}}],[\"allocation\",{\"1\":{\"111\":1}}],[\"allocated\",{\"1\":{\"124\":1}}],[\"allocate\",{\"1\":{\"111\":3,\"125\":1}}],[\"allowing\",{\"1\":{\"105\":1}}],[\"allowable\",{\"1\":{\"105\":1}}],[\"allow\",{\"1\":{\"46\":1,\"107\":1}}],[\"allows\",{\"1\":{\"18\":1,\"32\":1}}],[\"all\",{\"1\":{\"3\":2,\"4\":3,\"5\":1,\"37\":1,\"47\":1,\"86\":2,\"89\":1}}],[\"analysis\",{\"1\":{\"140\":1}}],[\"answer\",{\"1\":{\"110\":1,\"111\":1,\"112\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"119\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"132\":1,\"133\":1,\"134\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1}}],[\"another\",{\"1\":{\"39\":1,\"74\":1}}],[\"animal\",{\"1\":{\"20\":1,\"45\":2}}],[\"an\",{\"0\":{\"132\":1,\"133\":1,\"134\":1},\"1\":{\"16\":1,\"20\":2,\"25\":2,\"40\":1,\"42\":1,\"57\":1,\"58\":1,\"77\":1,\"97\":3,\"99\":2,\"101\":1,\"102\":1,\"105\":1,\"107\":2,\"110\":2,\"111\":1,\"114\":1,\"116\":2,\"117\":1,\"120\":2,\"124\":1,\"126\":1,\"127\":1,\"130\":1,\"132\":1,\"134\":3}}],[\"any\",{\"1\":{\"3\":3,\"57\":1,\"97\":2,\"121\":1,\"125\":1,\"132\":1}}],[\"and\",{\"0\":{\"72\":1,\"78\":1,\"86\":1,\"94\":1,\"110\":1,\"112\":1,\"116\":1,\"119\":1,\"124\":1,\"125\":1,\"126\":1},\"1\":{\"1\":1,\"3\":4,\"4\":1,\"7\":2,\"12\":2,\"16\":2,\"17\":1,\"18\":2,\"21\":2,\"23\":1,\"28\":1,\"29\":1,\"30\":3,\"34\":1,\"35\":1,\"37\":3,\"39\":1,\"40\":1,\"41\":1,\"44\":1,\"46\":1,\"52\":1,\"63\":2,\"64\":2,\"71\":1,\"72\":2,\"80\":1,\"84\":1,\"85\":1,\"86\":2,\"89\":1,\"90\":1,\"93\":5,\"94\":1,\"96\":1,\"97\":5,\"98\":3,\"99\":5,\"100\":1,\"101\":18,\"102\":9,\"105\":7,\"107\":7,\"110\":2,\"111\":8,\"112\":1,\"114\":1,\"116\":1,\"117\":11,\"119\":1,\"124\":6,\"125\":2,\"126\":2,\"130\":3,\"136\":1,\"140\":1}}],[\"a\",{\"0\":{\"63\":1,\"64\":1,\"66\":1,\"67\":1,\"77\":1,\"79\":1,\"110\":2,\"116\":2,\"117\":1,\"132\":1,\"133\":1,\"134\":1,\"138\":1,\"140\":1},\"1\":{\"3\":9,\"4\":3,\"8\":3,\"12\":2,\"16\":3,\"20\":2,\"28\":1,\"29\":3,\"31\":1,\"32\":1,\"34\":1,\"35\":1,\"38\":1,\"39\":2,\"40\":2,\"42\":1,\"44\":4,\"45\":3,\"46\":4,\"49\":7,\"50\":7,\"51\":4,\"52\":6,\"53\":31,\"63\":2,\"64\":1,\"65\":3,\"66\":1,\"67\":1,\"72\":3,\"74\":2,\"76\":2,\"77\":2,\"79\":7,\"80\":1,\"82\":1,\"84\":2,\"85\":3,\"86\":1,\"87\":2,\"90\":1,\"91\":1,\"93\":1,\"96\":3,\"97\":14,\"99\":5,\"100\":3,\"101\":8,\"102\":4,\"104\":1,\"105\":4,\"107\":9,\"110\":1,\"111\":1,\"114\":4,\"115\":1,\"116\":7,\"117\":6,\"121\":1,\"122\":4,\"124\":5,\"125\":1,\"126\":2,\"127\":1,\"128\":1,\"130\":3,\"133\":1,\"134\":3,\"136\":1,\"137\":1,\"138\":2,\"140\":1}}],[\"gives\",{\"1\":{\"102\":1}}],[\"guarantee\",{\"1\":{\"139\":1}}],[\"guaranteed\",{\"1\":{\"101\":1}}],[\"guide\",{\"0\":{\"0\":1}}],[\"garbage\",{\"1\":{\"140\":3}}],[\"garcia\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"gateway\",{\"1\":{\"97\":7}}],[\"g\",{\"1\":{\"97\":2}}],[\"graphs\",{\"1\":{\"111\":1}}],[\"greater\",{\"1\":{\"50\":2,\"105\":1}}],[\"griffin\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"go\",{\"0\":{\"119\":1},\"1\":{\"32\":1,\"35\":3,\"59\":1,\"90\":1,\"91\":1,\"101\":1,\"116\":1,\"119\":1}}],[\"goroutines\",{\"1\":{\"76\":1,\"84\":1,\"85\":1}}],[\"goroutine\",{\"1\":{\"32\":1,\"35\":3,\"84\":1}}],[\"goto\",{\"1\":{\"31\":2}}],[\"golang\",{\"0\":{\"124\":1},\"1\":{\"1\":1,\"14\":1,\"37\":2,\"57\":1,\"58\":1,\"84\":1}}],[\"generating\",{\"1\":{\"102\":1}}],[\"generates\",{\"1\":{\"102\":1}}],[\"generate\",{\"1\":{\"99\":1,\"102\":1}}],[\"generator\",{\"1\":{\"99\":1}}],[\"general\",{\"1\":{\"93\":1}}],[\"generally\",{\"1\":{\"7\":1,\"102\":1,\"105\":2,\"130\":1}}],[\"get\",{\"0\":{\"67\":1},\"1\":{\"34\":1,\"44\":1,\"46\":1,\"63\":1,\"67\":1,\"72\":2,\"79\":1,\"96\":4,\"97\":5,\"110\":2}}],[\"geography\",{\"1\":{\"6\":1,\"8\":2,\"10\":2,\"11\":2,\"12\":2}}],[\"glenn\",{\"1\":{\"7\":2,\"8\":1,\"10\":2,\"11\":1,\"12\":2}}]],\"serializationVersion\":2},\"/\":{\"documentCount\":157,\"nextId\":157,\"documentIds\":{\"0\":\"2\",\"1\":\"2#介绍\",\"2\":\"4\",\"3\":\"4#关系键\",\"4\":\"4#表连接\",\"5\":\"4#表连接示意图\",\"6\":\"4#course\",\"7\":\"4#student\",\"8\":\"4#内连接-inner-join\",\"9\":\"4#外连接-outer-join\",\"10\":\"4#左连接-left-join\",\"11\":\"4#右连接-right-join\",\"12\":\"4#全外连接-full-outer-join\",\"13\":\"5\",\"14\":\"5#保留关键字\",\"15\":\"5#声明类型关键字\",\"16\":\"5#const\",\"17\":\"5#func\",\"18\":\"5#import\",\"19\":\"5#package\",\"20\":\"5#type\",\"21\":\"5#var\",\"22\":\"5#复合类型\",\"23\":\"5#chan\",\"24\":\"5#interface\",\"25\":\"5#map\",\"26\":\"5#struct\",\"27\":\"5#流程控制\",\"28\":\"5#if-else\",\"29\":\"5#switch-fallthrough\",\"30\":\"5#for-break-continue-range\",\"31\":\"5#goto\",\"32\":\"5#select\",\"33\":\"5#功能修饰\",\"34\":\"5#defer\",\"35\":\"5#go\",\"36\":\"6\",\"37\":\"6#整数-int\",\"38\":\"6#浮点数-float\",\"39\":\"6#复数-complex\",\"40\":\"6#字符串-string\",\"41\":\"6#布尔类型-bool\",\"42\":\"6#数组-array\",\"43\":\"6#切片-slices\",\"44\":\"6#map-map\",\"45\":\"6#结构体-struct\",\"46\":\"6#指针-pointer\",\"47\":\"6#零值表\",\"48\":\"7\",\"49\":\"7#算术运算符\",\"50\":\"7#关系运算符\",\"51\":\"7#逻辑运算符\",\"52\":\"7#位运算符\",\"53\":\"7#赋值运算符\",\"54\":\"7#其他符号\",\"55\":\"7#符号优先级\",\"56\":\"8\",\"57\":\"8#接口\",\"58\":\"8#创建错误\",\"59\":\"8#errors-join\",\"60\":\"8#errors-is\",\"61\":\"8#errors-as\",\"62\":\"9\",\"63\":\"9#创建-map\",\"64\":\"9#遍历-map\",\"65\":\"9#删除键值\",\"66\":\"9#判断-key-是否存在\",\"67\":\"9#获取-map-长度\",\"68\":\"9#并发\",\"69\":\"10\",\"70\":\"10#创建切片\",\"71\":\"10#切片截取\",\"72\":\"10#长度及容量\",\"73\":\"10#追加数据\",\"74\":\"10#克隆切片\",\"75\":\"11\",\"76\":\"11#介绍\",\"77\":\"11#创建-channel\",\"78\":\"11#发送接收数据\",\"79\":\"11#关闭-channel\",\"80\":\"11#select\",\"81\":\"11#例子\",\"82\":\"11#注意事项\",\"83\":\"12\",\"84\":\"12#介绍\",\"85\":\"12#context-接口\",\"86\":\"12#根节点和派生节点\",\"87\":\"12#创建根节点\",\"88\":\"12#创建派生节点\",\"89\":\"12#withvalue\",\"90\":\"12#withdeadline-withtimeout\",\"91\":\"12#withcancel\",\"92\":\"13\",\"93\":\"13#osi七层模型\",\"94\":\"13#tcp和ip模型\",\"95\":\"13#http\",\"96\":\"13#请求方法\",\"97\":\"13#http-状态码\",\"98\":\"13#https-vs-http\",\"99\":\"13#工作原理\",\"100\":\"13#http-1-0-vs-1-1-vs-2-0\",\"101\":\"13#数字证书\",\"102\":\"13#数字签名工作原理\",\"103\":\"14\",\"104\":\"14#tcp\",\"105\":\"14#tcp-头部结构\",\"106\":\"14#tcp-状态机\",\"107\":\"14#tcp-三次握手\",\"108\":\"26\",\"109\":\"26#指针\",\"110\":\"26#什么是指针和指针变量\",\"111\":\"26#为什么使用指针\",\"112\":\"26#哪些对象可以获取地址-哪些不行\",\"113\":\"26#字面量\",\"114\":\"26#字面量是什么意思\",\"115\":\"26#什么是有类型常量和无类型常量\",\"116\":\"26#不同字面量可能同值吗\",\"117\":\"26#字面量和变量的区别是什么\",\"118\":\"26#什么是组合字面量\",\"119\":\"26#其他\",\"120\":\"26#go-中的-rune-和-byte-有什么区别\",\"121\":\"26#类型不同\",\"122\":\"26#存储的字符不同\",\"123\":\"26#占用的字节大小不同-byte-占用1个字节-rune-占用4个字节。\",\"124\":\"26#表示的字符范围不同\",\"125\":\"26#golang中的深拷贝和浅拷贝是什么\",\"126\":\"26#make-和-new-有什么区别\",\"127\":\"26#数组和切片有什么区别\",\"128\":\"26#如果-for-range-同时添加数据-for-range-会无限执行吗\",\"129\":\"26#多个-defer-的执行顺序是什么\",\"130\":\"26#什么是数据溢出\",\"131\":\"26#函数参数使用值还是指针\",\"132\":\"26#map\",\"133\":\"26#未初始化的-map-可以读取-key-吗\",\"134\":\"26#如果对未初始化的-map-赋值会怎么样\",\"135\":\"26#如果对未初始化的-map-进行删除-key-的操作会发生什么\",\"136\":\"27\",\"137\":\"27#使用过-context-吗-context-有哪些使用场景\",\"138\":\"27#channel-是线程安全的吗\",\"139\":\"27#map-使用-range-遍历时是有序还是无序的\",\"140\":\"27#map-并发安全吗\",\"141\":\"27#map-的-key-删除后-key-的内存会被释放吗\",\"142\":\"30\",\"143\":\"31\",\"144\":\"32\",\"145\":\"33\",\"146\":\"34\",\"147\":\"35\",\"148\":\"36\",\"149\":\"37\",\"150\":\"38\",\"151\":\"39\",\"152\":\"40\",\"153\":\"41\",\"154\":\"42\",\"155\":\"43\",\"156\":\"44\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,4],\"2\":[1],\"3\":[1,52],\"4\":[1,24],\"5\":[1,4],\"6\":[1,12],\"7\":[1,47],\"8\":[4,52],\"9\":[4],\"10\":[4,59],\"11\":[4,49],\"12\":[5,83],\"13\":[1],\"14\":[1,25],\"15\":[1],\"16\":[1,31],\"17\":[1,19],\"18\":[1,27],\"19\":[1,2],\"20\":[1,19],\"21\":[1,19],\"22\":[1],\"23\":[1,18],\"24\":[1,12],\"25\":[1,18],\"26\":[1,8],\"27\":[1],\"28\":[1,14],\"29\":[1,49],\"30\":[1,37],\"31\":[1,28],\"32\":[1,36],\"33\":[1],\"34\":[1,33],\"35\":[1,21],\"36\":[1],\"37\":[3,46],\"38\":[3,7],\"39\":[3,24],\"40\":[3,23],\"41\":[3,11],\"42\":[3,13],\"43\":[3,31],\"44\":[3,28],\"45\":[3,15],\"46\":[3,14],\"47\":[1,33],\"48\":[1],\"49\":[1,25],\"50\":[1,26],\"51\":[1,15],\"52\":[1,35],\"53\":[1,21],\"54\":[1,4],\"55\":[1,21],\"56\":[1],\"57\":[1,11],\"58\":[1,25],\"59\":[2,33],\"60\":[2,34],\"61\":[2,39],\"62\":[3],\"63\":[2,30],\"64\":[2,35],\"65\":[1,26],\"66\":[3,30],\"67\":[3,7],\"68\":[1,6],\"69\":[1],\"70\":[1,25],\"71\":[1,20],\"72\":[1,24],\"73\":[1,26],\"74\":[1,36],\"75\":[1],\"76\":[1,7],\"77\":[2,16],\"78\":[1,10],\"79\":[2,28],\"80\":[1,25],\"81\":[1,20],\"82\":[1,4],\"83\":[1],\"84\":[1,21],\"85\":[2,38],\"86\":[1,10],\"87\":[1,9],\"88\":[1,27],\"89\":[2,5],\"90\":[3,38],\"91\":[2,35],\"92\":[1],\"93\":[1,35],\"94\":[1,50],\"95\":[1],\"96\":[1,38],\"97\":[2,159],\"98\":[3,30],\"99\":[1,31],\"100\":[5,34],\"101\":[1,35],\"102\":[1,60],\"103\":[2],\"104\":[1,9],\"105\":[2,78],\"106\":[2,2],\"107\":[2,88],\"108\":[1],\"109\":[1],\"110\":[2,21],\"111\":[2,29],\"112\":[3,17],\"113\":[1],\"114\":[2,32],\"115\":[2,39],\"116\":[2,21],\"117\":[2,34],\"118\":[2,49],\"119\":[1],\"120\":[5,10],\"121\":[2,8],\"122\":[2,19],\"123\":[6,21],\"124\":[2,10],\"125\":[2,59],\"126\":[3,28],\"127\":[2,12],\"128\":[4,23],\"129\":[4,15],\"130\":[2,33],\"131\":[2,19],\"132\":[1],\"133\":[6,22],\"134\":[4,20],\"135\":[6,19],\"136\":[1],\"137\":[4,15],\"138\":[3,6],\"139\":[5,11],\"140\":[3,8],\"141\":[6,24],\"142\":[1,3],\"143\":[1],\"144\":[1],\"145\":[1],\"146\":[1],\"147\":[1],\"148\":[1],\"149\":[1],\"150\":[1],\"151\":[1],\"152\":[1],\"153\":[1],\"154\":[1],\"155\":[1],\"156\":[1]},\"averageFieldLength\":[1.8089171974522293,26.26224397148387],\"storedFields\":{\"0\":{\"h\":\"指南\"},\"1\":{\"h\":\"介绍\",\"t\":[\"本栏目主要提供 Golang 面试常见问题。\"]},\"2\":{\"h\":\"数据库基础\"},\"3\":{\"h\":\"关系键\",\"t\":[\"关系键用于标识数据表中的每一行或者标识与其他表的关系\",\"关系键\",\"介绍\",\"主键 (Primary key - Unique key)\",\"主键是数据列中用来唯一标识的字段，不允许为空，一个表只能有一个主键\",\"超键 (Super key)\",\"超键是能唯一标识数据列的所有属性集, 即若任意单个或多个字段如果也能唯一标识数据列，则都属于超键\",\"候选键 (Candidate key)\",\"候选键是超键的子集，候选键是不包含多余字段的超键，候选键中删除任意字段都不属于超键\",\"外键 (Foreign key)\",\"外键用于建立表之间的关系，如 A 表的主键是 B 表的字段，这时候 B 表中的 A 表的主键字段就是外键\",\"注意\",\"主键和唯一键的区别：\",\"一张表只能有一个主键，可以有多个唯一键\",\"主键不能为空，唯一键可以为空\",\"例子\",\"假设有两张表\",\"student\",\"teacher\",\"id\",\"id\",\"name\",\"name\",\"age\",\"age\",\"identify_card (身份证号)\",\"teacher_id\",\"主键： student.idteacher.id\",\"超键: 以 student 表为例: (student.id, student.name),(student.id, student.name, student.age) ... 任何和主键和身份证的组合都为超键\",\"候选键： 以 student 表为例： student.idstudent.identify_card\",\"外键： student.teacher_id\"]},\"4\":{\"h\":\"表连接\",\"t\":[\"要学习表连接，首先要了解笛卡尔积\",\"笛卡尔积\",\"笛卡尔积（Cartesian product）指的是两个集合 X, Y 中 X 的所有元素分别乘以 Y 中所有元素的集合，又称为直积\",\"例如 X={a,b}Y={1,2} 则 X 和 Y 的笛卡尔积为\",\"Z={(a,1),(a,2),(b,1),(b,2)}\",\"表连接是通过条件对两表之间的笛卡尔积进行筛选后的结果\"]},\"5\":{\"h\":\"表连接示意图\",\"t\":[\"sql-join\",\"示例表\",\"示例表\",\"接下来的查询都是围绕该示例表\"]},\"6\":{\"h\":\"course\",\"t\":[\"id\",\"title\",\"1\",\"Math\",\"2\",\"Art\",\"3\",\"Music\",\"4\",\"Geography\",\"15\",\"Sport\"]},\"7\":{\"h\":\"student\",\"t\":[\"id\",\"name\",\"age\",\"course_id\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"4\",\"Jamie Romero\",\"12\",\"5\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"7\",\"Alan Sanchez\",\"11\",\"9\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"9\",\"Bobby Burns\",\"12\",\"8\",\"10\",\"Glenn Adams\",\"11\",\"5\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"12\",\"Justin Rogers\",\"13\",\"8\",\"注意\",\"一般我们称第一个表为驱动表，第二个表为被驱动表，在例子中 student 为驱动表， course 为被驱动表\"]},\"8\":{\"h\":\"内连接 （inner Join）\",\"t\":[\"内连接 inner join 等同于 join, 用于只返回匹配的行。\",\"以下三种写法相同\",\"select * from a,b; select * from a join b; select * from a inner join b; \",\"例子\",\"select * from student s inner join course c on s.course_id=c.id; \",\"结果\",\"id\",\"name\",\"age\",\"course_id\",\"id(1)\",\"title\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"1\",\"Math\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"2\",\"Art\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"2\",\"Art\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"3\",\"Music\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"3\",\"Music\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"4\",\"Geography\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"4\",\"Geography\",\"可以看到只有满足 s.course_id=c.id 的数据列被返回了\"]},\"9\":{\"h\":\"外连接 (outer join)\"},\"10\":{\"h\":\"左连接 (left join)\",\"t\":[\"select * from student s left join course c on s.course_id=c.id; \",\"结果\",\"id\",\"name\",\"age\",\"course_id\",\"id(1)\",\"title\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"1\",\"Math\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"2\",\"Art\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"2\",\"Art\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"3\",\"Music\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"3\",\"Music\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"4\",\"Geography\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"4\",\"Geography\",\"10\",\"Glenn Adams\",\"11\",\"5\",\"4\",\"Jamie Romero\",\"12\",\"5\",\"12\",\"Justin Rogers\",\"13\",\"8\",\"9\",\"Bobby Burns\",\"12\",\"8\",\"7\",\"Alan Sanchez\",\"11\",\"9\",\"相关信息\",\"可以看到不只有满足 s.course_id=c.id 的数据列被返回了，同时驱动表未匹配的其他数据也会返回\"]},\"11\":{\"h\":\"右连接 (right join)\",\"t\":[\"select * from student s right join course c on s.course_id=c.id; \",\"结果\",\"id\",\"name\",\"age\",\"course_id\",\"id(1)\",\"title\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"1\",\"Math\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"2\",\"Art\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"2\",\"Art\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"3\",\"Music\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"3\",\"Music\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"4\",\"Geography\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"4\",\"Geography\",\"15\",\"Sport\",\"相关信息\",\"可以看到不只有满足 s.course_id=c.id 的数据列被返回了，同时被驱动表未匹配的其他数据也会返回\"]},\"12\":{\"h\":\"全外连接 (full outer join)\",\"t\":[\"select * from student s full outer join course c on s.course_id=c.id; \",\"结果\",\"id\",\"name\",\"age\",\"course_id\",\"id(1)\",\"title\",\"5\",\"Clifford Reyes\",\"10\",\"1\",\"1\",\"Math\",\"6\",\"Francisco Cook\",\"12\",\"2\",\"2\",\"Art\",\"3\",\"Connie Murphy\",\"11\",\"2\",\"2\",\"Art\",\"8\",\"Tony Garcia\",\"12\",\"3\",\"3\",\"Music\",\"1\",\"Elaine Morris\",\"12\",\"3\",\"3\",\"Music\",\"11\",\"Glenn Griffin\",\"12\",\"4\",\"4\",\"Geography\",\"2\",\"Beverly Turner\",\"11\",\"4\",\"4\",\"Geography\",\"15\",\"Sport\",\"10\",\"Glenn Adams\",\"11\",\"5\",\"4\",\"Jamie Romero\",\"12\",\"5\",\"12\",\"Justin Rogers\",\"13\",\"8\",\"9\",\"Bobby Burns\",\"12\",\"8\",\"7\",\"Alan Sanchez\",\"11\",\"9\",\"相关信息\",\"可以看到不只有满足 s.course_id=c.id 的数据列被返回了，同时未匹配的其他数据也会返回\",\"查询条件\",\"在使用连接后支持两种过滤条件：\",\"where\",\"使用 where 子句只会返回满足 where 条件的列\",\"on\",\"使用 on 时，在内连接的查询中 on 和 where 的效果是一致的，在外连接中如左连接会返回驱动表不匹配的数据\",\"注意\",\"如果有多个表连接如 a inner join b inner join c 首先会执行 a inner join b, 然后将结果再 inner join c\",\"重要\",\"在 join 的时候利用索引可以减少回表次数\"]},\"13\":{\"h\":\"保留关键字\"},\"14\":{\"h\":\"保留关键字\",\"t\":[\"golang 有 25 个保留的关键字，这些关键字不能用作程序标识符。\",\"类型\",\"关键字\",\"介绍\",\"声明\",\"constfuncimportpackagetypevar\",\"这些关键字用于声明代码中的各种元素\",\"复合类型\",\"chaninterfacemapstruct\",\"这些关键字用于声明一些特殊的复合类型\",\"流程控制\",\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",\"这些关键字用于控制程序运行流程\",\"功能修饰\",\"defergo\",\"用于修饰特殊的 function\",\"注意\",\"注意： 下面的例子中的 T 表示任意类型\"]},\"15\":{\"h\":\"声明类型关键字\"},\"16\":{\"h\":\"\",\"t\":[\"const 用于声明常量，常量一经声明就不能被更改，声明常量必须指定初始值。\",\"例子\",\"const identifier T = value // T 为数据类型，可以省略，编译器会自己推断。 const identifier1, identifier2 = value1, value2 // 声明多个，如 const a, b, c = \\\"hello\\\", 100, true const ( FeMale = 0 Male = 1 ) // 枚举 const ( a = iota b c ) // iota \"]},\"17\":{\"h\":\"\",\"t\":[\"func 用于声明函数，支持多个返回值，不支持默认参数。\",\"例子\",\"// p 为参数， T 为类型 func Test(p T) {} func Test(p T) (T1, T2) {} func Test (p T, p1, T1, list ...T3) (T4, T5) {} // 不定参数 \"]},\"18\":{\"h\":\"\",\"t\":[\"import 用于导入包，使用其公开的标识符。\",\"import 支持单行和多行导入。\",\"例子\",\"import \\\"flag\\\" // 单个导入 import ( \\\"flag\\\" \\\"fmt\\\" ) // 多个导入 \",\"我们还可以使用 ., _ 和别名修饰导入的包。\",\"导入命令\",\"使用方法\",\"解析\",\"import \\\"lib/math\\\"\",\"math.Sin\",\"普通导入需要使用包名\",\"import m \\\"lib/math\\\"\",\"m.Sin\",\"可以在导入时设置别名\",\"import . \\\"lib/math\\\" \",\"Sin\",\"使用 . 导入本地可以直接使用函数，不需要包名\",\"我们还可以使用 _ 来修饰导入的包，这样只会执行导入包的初始化函数 init()\"]},\"19\":{\"h\":\"\",\"t\":[\"package 用于定义包名\"]},\"20\":{\"h\":\"\",\"t\":[\"type 用于定义变量类型\",\"例子\",\"// 定义接口 type Animal interface { eat() } // 定义结构 type Tiger struct { Name string } // 定义等价类型 type Num int32 // 定义一个新的类型 type Num = int32 // 仅定义别名 \"]},\"21\":{\"h\":\"\",\"t\":[\"var 用于声明公开或者私有变量\",\"例子\",\"var Name T // 公开变量 var name T // 私有变量 var name1, name2 T // 声明多个相同类型的变量 var name1, name2 T = val1, val2 // 声明多个相同类型的变量, 并初始化 var name1, name2 = val1, val2 // 根据 val1, val2 自动推断类型并初始化 // 使用括号 var ( name1 = val1 name2 = val2 ) \"]},\"22\":{\"h\":\"复合类型\"},\"23\":{\"h\":\"\",\"t\":[\"chan (Channel) 用于声明信道。\",\"例子\",\"// 用于发送和接收 T 类型的数据的信道 chan T // 用于发送 T 类型的数据的信道 <-chan T // 用于接收 T 类型的数据的信道 chan<- T \",\"ch := make(chan T) // 无缓冲信道 ch := make(chan T, 20) // 带缓冲信道 \"]},\"24\":{\"h\":\"\",\"t\":[\"interface 用于声明接口\",\"例子\",\"type File interface { Read(b Buffer) bool Write(b Buffer) bool Close() } \"]},\"25\":{\"h\":\"\",\"t\":[\"map 用于声明集合，由无序的键值对组成，底层为 hash map. 虽然 map 会自动扩容，但是建议在初始化的时候就配置容量。\",\"例子\",\"m := make(map[string]string) // 空的 map m := make(map[string]string, 10) // 初始容量为 10 的 map \"]},\"26\":{\"h\":\"\",\"t\":[\"struct 用于声明结构体\",\"例子\",\"type Person struct { Name string } \"]},\"27\":{\"h\":\"流程控制\"},\"28\":{\"h\":\"\",\"t\":[\"ifelse 用于条件判断，可嵌套使用\",\"例子\",\"if a > 0 { fmt.Println(\\\"hello\\\") } else { fmt.Println(\\\"world\\\") } \"]},\"29\":{\"h\":\"\",\"t\":[\"switch 用于根据不同条件执行不同的动作，默认每个 case 都带有 break, 执行完一个 case 会自动跳出，若希望继续执行下面的语句，需搭配 fallthrough\",\"例子\",\"a := \\\"2\\\" switch a { case \\\"1\\\": fmt.Println(\\\"hello\\\") case \\\"2\\\": fmt.Println(\\\"world\\\") default: // 默认操作 fmt.Println(\\\"default\\\") } // 结果： world \",\"使用 fallthrough 可以在执行完对应 case 后直接执行下一个 case 的动作\",\"package main import \\\"fmt\\\" func main() { var dayOfWeek int = 4 switch dayOfWeek { case 1: fmt.Println(\\\"Monday\\\") fallthrough case 2: fmt.Println(\\\"Tuesday\\\") fallthrough case 3: fmt.Println(\\\"Wednesday\\\") fallthrough case 4: fmt.Println(\\\"Thursday\\\") fallthrough case 5: fmt.Println(\\\"Friday\\\") fallthrough case 6: fmt.Println(\\\"Saturday\\\") case 7: fmt.Println(\\\"Sunday\\\") default: fmt.Println(\\\"Invalid Day\\\") } } // 结果： // Thursday // Friday // Saturday \"]},\"30\":{\"h\":\"\",\"t\":[\"for 用于循环执行动作，使用 break 中断当前 for 循环， continue 用于跳过当前循环的剩余语句，继续执行下一轮循环\",\"例子\",\"// 单个条件 for i <= 10 { fmt.Println(i) i = i + 1 } // 初始化并判断 for i:=0; i < 3; i++ { fmt.Println(i) } // for range 遍历 array :=[]int{1, 2, 3, 4, 5} for i, v :=range array{ fmt.Println(i,v) } // break for i, v :=range array{ if i >= 2 { break } fmt.Println(i,v) } // continue for i, v :=range array{ if i == 2 { continue } fmt.Println(i,v) } \"]},\"31\":{\"h\":\"\",\"t\":[\"goto 可以跳到指定位置继续执行动作\",\"例子\",\"package main import \\\"fmt\\\" func main() { for i := 0; i < 10; i ++ { if i == 5 { goto end // 跳到 end 位置执行 } fmt.Println(i) } end: fmt.Println(\\\"end\\\") } // 结果： // 0 // 1 // 2 // 3 // 4 // end \"]},\"32\":{\"h\":\"\",\"t\":[\"select 让 goroutine 等待多个通信操作，select 会阻塞直到一个 case 接收到信息，如果同时多个通道收到数据，则会随机执行一个 case\",\"例子\",\"package main import \\\"fmt\\\" func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c <- x: x, y = y, x+y case <-quit: fmt.Println(\\\"quit\\\") return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i < 10; i++ { fmt.Println(<-c) } quit <- 0 }() fibonacci(c, quit) } \"]},\"33\":{\"h\":\"功能修饰\"},\"34\":{\"h\":\"\",\"t\":[\"return 用于终止函数的执行并返回0个或多个返回值， defer 用于函数 return 之前或执行完之后执行动作\",\"例子\",\"package main import \\\"fmt\\\" func main() { defer fmt.Println(\\\"world\\\") fmt.Println(\\\"hello\\\") } // 结果 // hello // world \",\"注意：\",\"defer 的执行顺序是后进先出\",\"defer 在 return 之前执行意味着可以使用 defer 获取 return 之前变量的最终结果\",\"package main import \\\"fmt\\\" func main() { num := 1 defer func() { fmt.Println(num) }() for i := 0; i < 4; i ++ { num += i } } // 结果： // 7 \"]},\"35\":{\"h\":\"\",\"t\":[\"go 用于创建协程（goroutine）, 在程序后台执行动作\",\"例子\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { go func(){ fmt.Println(\\\"no.1\\\") }() go func(){ fmt.Println(\\\"no.2\\\") }() fmt.Println(\\\"start goroutine\\\") time.Sleep(5*time.Second) } // 结果： // start goroutine // no.1 // no.2 \"]},\"36\":{\"h\":\"数据类型\"},\"37\":{\"h\":\"整数 (int)\",\"t\":[\"整数有两种类型：\",\"类型\",\"范围\",\"介绍\",\"有符号数 (signed integers)\",\"-∞ ~ +∞\",\"有符号数包含正数和负数\",\"无符号数 (unsigned integers)\",\"0 ~ +∞\",\"无符号数包含 0 和所有正数\",\"golang 中 int 开头为有符号数， uint 开头为无符号数\",\"Golang 中的整数类型：\",\"位\",\"类型\",\"8\",\"int8uint8\",\"16\",\"int16uint16\",\"32\",\"int32uint32\",\"64\",\"int64uint64\",\"32 或 64 (基于系统架构)\",\"intuint\",\"同时还有两个等价类型\",\"rune : 等价于 int32 , 用于存储 Unicode 字符\",\"byte ：等价于 uint8 , 用于存储 ASCII 字符\"]},\"38\":{\"h\":\"浮点数 (float)\",\"t\":[\"浮点数就是包含小数点的数字\",\"位\",\"类型\",\"32\",\"float32\",\"64\",\"float64\"]},\"39\":{\"h\":\"复数 (complex)\",\"t\":[\"复数包含虚数和实数，实数为浮点数\",\"位\",\"类型\",\"32 位浮点数 + 虚数\",\"complex64\",\"64 位浮点数 + 虚数\",\"complex128\",\"例子\",\"// 初始化一个复数 var complexData complex64 = complex(5, 3) // 等于： 5 + 3i // 另一种初始化方式 complexData2 := 5 + 3i \"]},\"40\":{\"h\":\"字符串 (string)\",\"t\":[\"字符串由一连串的字符组成，类型名称为 string\",\"字符串一旦创建，无法修改\",\"例子\",\"package main import \\\"fmt\\\" func main() { var str string := \\\"Hi! Jack\\\" // 不能修改，以下注释的代码会报错 // str[2] = 'c' fmt.Printf(\\\"%s\\\",str) } \"]},\"41\":{\"h\":\"布尔类型 (bool)\",\"t\":[\"布尔类型的值为 true 或 false, 类型名称为 bool\",\"例子\",\"var isNumber bool isNumber = true isNumber = false \"]},\"42\":{\"h\":\"数组 (array)\",\"t\":[\"数组由一系列数据组成，可通过下标获取数据\",\"数组的容量一经创建就无法修改\",\"例子\",\"data := [5]int{1, 2, 3, 4, 5} \"]},\"43\":{\"h\":\"切片 (slices)\",\"t\":[\"切片是动态的数组，可根据数据自动调整容量大小\",\"例子\",\"package main import \\\"fmt\\\" func main() { var data []int for i := 0; i < 10; i ++ { data = append(data, i) } fmt.Println(data) } // 结果 // [0 1 2 3 4 5 6 7 8 9] \"]},\"44\":{\"h\":\"Map (map)\",\"t\":[\"map 是一种键值映射表，通过 key 获取对应的 value\",\"map 的声明方式\",\"map[KeyType]ValueType \",\"KeyType 为 key 的数据类型 , ValueType 为 value 的数据类型\",\"例子\",\"// 声明 map var m map[string]int // 使用 make 初始化 map m = make(map[string]int) // 设置值 m[\\\"path\\\"] = 66 // 输出值 fmt.Println(m[\\\"path\\\"]) \"]},\"45\":{\"h\":\"结构体 (struct)\",\"t\":[\"结构体由一系列自定义的字段组成，可通过 . 获取字段内容\",\"例子\",\"type Animal struct { Name string } a := Animal{ Name: \\\"Lucky\\\" } fmt.Println(a.Name) \"]},\"46\":{\"h\":\"指针 (pointer)\",\"t\":[\"指针存储的是变量的内存地址，在变量前使用 * 定义为指针，使用 & 获取变量地址，通过指针可以在函数中修改函数外的数据\",\"例子\",\"var num *int n := 10 num = &n \"]},\"47\":{\"h\":\"零值表\",\"t\":[\"类型\",\"零值\",\"uint/uint8/uint16/uint32/uint64\",\"0\",\"int/int8/int16/int32/int64\",\"0\",\"float32/float64\",\"0\",\"complex64/complex128\",\"0+0i\",\"bool\",\"false\",\"uintptr\",\"0\",\"byte\",\"0\",\"rune\",\"0\",\"string\",\"\\\"\\\"\",\"struct\",\"内部属性全部是其对应0值\",\"interface\",\"nil\",\"slice\",\"nil\",\"map\",\"nil\",\"chan\",\"nil\",\"func\",\"nil\",\"pointer\",\"nil\"]},\"48\":{\"h\":\"运算符\"},\"49\":{\"h\":\"算术运算符\",\"t\":[\"A\",\"B\",\"50\",\"20\",\"操作符\",\"操作\",\"结果\",\"描述\",\"+\",\"A + B\",\"70\",\"相加\",\"-\",\"A - B\",\"30\",\"相减\",\"*\",\"A * B\",\"1000\",\"相乘\",\"/\",\"A / B\",\"2\",\"相除\",\"%\",\"A % B\",\"10\",\"取余\",\"++\",\"A++\",\"51\",\"自增\",\"--\",\"A--\",\"49\",\"自减\"]},\"50\":{\"h\":\"关系运算符\",\"t\":[\"A\",\"B\",\"50\",\"20\",\"操作符\",\"操作\",\"结果\",\"描述\",\"==\",\"A == B\",\"false\",\"检查两数是否相等，若相等则为 true，否则为 false\",\"!=\",\"A != B\",\"true\",\"检查两数是否不相等，若不相等则为 true , 否则为 false\",\">\",\"A > B\",\"true\",\"检查左边是否大于右边，若成立则为 true, 否则为 false\",\"<\",\"A < B\",\"false\",\"检查左边是否小于右边，若成立则为 true, 否则为 false\",\">=\",\"A >= B\",\"true\",\"检查左边是否大于等于右边，若成立则为 true, 否则为 false\",\"<=\",\"A <= B\",\"false\",\"检查左边是否小于等于右边，若成立则为 true, 否则为 false\"]},\"51\":{\"h\":\"逻辑运算符\",\"t\":[\"A\",\"B\",\"true\",\"false\",\"操作符\",\"操作\",\"结果\",\"描述\",\"&&\",\"A && B\",\"false\",\"若两边都为 true，则结果为 true，否则为 false\",\"!=\",\"A != B\",\"true\",\"若两边有一边为 true，则结果为 true，若两边都为 false ， 则结果为 false\",\"！\",\"!A\",\"false\",\"若条件为 true 则结果为 false, 反之若条件为 false, 则结果为 true\"]},\"52\":{\"h\":\"位运算符\",\"t\":[\"真值表\",\"p\",\"q\",\"p & q\",\"p | q\",\"p ^ q\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\",\"1\",\"0\",\"0\",\"1\",\"1\",\"假设\",\"变量\",\"值\",\"A\",\"0110 1000\",\"B\",\"0111 0011\",\"操作符\",\"操作\",\"结果\",\"描述\",\"&\",\"A & B\",\"0110 0000\",\"按位进行与运算\",\"|\",\"A | B\",\"0111 1011\",\"按位进行或运算\",\"^\",\"A ^ B\",\"0001 1011\",\"按位进行异或运算\",\"<<\",\"A << 2\",\"1010 0000\",\"左移 2 位，低位补 0\",\">>\",\"A >> 2\",\"0001 1010\",\"右移 2 位，高位补 0\"]},\"53\":{\"h\":\"赋值运算符\",\"t\":[\"我们可以使用 = 将右边的结果赋值到左边，如 C = A + B\",\"运算符\",\"操作\",\"等同于\",\"+=\",\"A += B\",\"A = A + B\",\"-=\",\"A -= B\",\"A = A - B\",\"*=\",\"A *= B\",\"A = A * B\",\"/=\",\"A /= B\",\"A = A / B\",\"%=\",\"A %= B\",\"A = A % B\",\"<<=\",\"A <<= 2\",\"A = A << 2\",\">>=\",\"A >>= 2\",\"A = A >> 2\",\"&=\",\"A &= 2\",\"A = A & 2\",\"|=\",\"A |= 2\",\"A = A | 2\",\"^=\",\"A ^= 2\",\"A = A ^ 2\"]},\"54\":{\"h\":\"其他符号\",\"t\":[\"运算符\",\"描述\",\"&\",\"取地址\",\"*\",\"指针\"]},\"55\":{\"h\":\"符号优先级\",\"t\":[\"从高到低为：\",\"优先级\",\"运算符\",\"5\",\"* / % << >> & &^\",\"4\",\"+ - | ^\",\"3\",\"== != < <= > >=\",\"2\",\"&&\",\"1\",\"||\",\"可以使用括号提高优先级\"]},\"56\":{\"h\":\"错误处理\"},\"57\":{\"h\":\"接口\",\"t\":[\"golang 提供了 error 类型的接口\",\"type error interface { Error() string } \",\"只要结构体实现了 Error() 方法就属于 error 类型\"]},\"58\":{\"h\":\"创建错误\",\"t\":[\"golang 提供了多种创建 error 的方法\",\"我们可以使用 errors.New()fmt.Errorf() 来创建错误\",\"例子\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // 使用 New 创建错误 err1 := errors.New(\\\"first error\\\") // 使用 fmt 创建错误 err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") fmt.Println(err1, err2) } \"]},\"59\":{\"h\":\"errors.Join\",\"t\":[\"在 go 1.20 提供了 errors.Join 方法将多个 error 组合成一个数组\",\"例子\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // 使用 New 创建错误 err1 := errors.New(\\\"first error\\\") // 使用 fmt 创建错误 err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") // 使用 join 将多个 error 合并 err3 := errors.Join(err1, err2) fmt.Println(err1, err2) // 结果: first error second error fmt.Println(err3) // 结果： // first error // second error } \"]},\"60\":{\"h\":\"errors.Is\",\"t\":[\"使用 errors.Is() 方法可以判断当前 error 是否包含目标类型的 error\",\"例子\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) func main() { // 使用 New 创建错误 err1 := errors.New(\\\"first error\\\") // 使用 fmt 创建错误 err2 := fmt.Errorf(\\\"second %s\\\", \\\"error\\\") // 使用 join 将多个 error 合并 err3 := errors.Join(err1, err2) fmt.Println(err1, err2) // 结果: first error second error fmt.Println(err3) // 结果： // first error // second error // 使用 errors.Is() 判断错误是否是目标错误， err3 包含 err1 所以为 true fmt.Println(errors.Is(err1, err2)) // 结果: false fmt.Println(errors.Is(err3, err1)) // 结果： true } \"]},\"61\":{\"h\":\"errors.As\",\"t\":[\"使用 errors.As() 方法可以将 error 中第一个符合目标类型的错误赋值到目标对象\",\"例子\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" ) type NormalErr struct { e string } func (t NormalErr) Error() string { return t.e } func main() { // 使用 New 创建错误 err1 := errors.New(\\\"first error\\\") // 创建 T err2 := NormalErr{\\\"second error\\\"} // 使用 join 将多个 error 合并 err3 := errors.Join(err1, err2) var err4 NormalErr errors.As(err3, &err4) fmt.Println(err4) // 结果： second error } \"]},\"62\":{\"h\":\"Map (集合)\"},\"63\":{\"h\":\"创建 Map\",\"t\":[\"map 是一种键值映射表，通过 key 获取对应的 value\",\"map 的声明方式\",\"map[KeyType]ValueType \",\"KeyType 为 key 的数据类型 , ValueType 为 value 的数据类型\",\"例子\",\"// 声明 map var m map[string]int // 使用 make 初始化 map m = make(map[string]int) // 使用 make 初始化 map, 并设置容量 // m = make(map[string]int, 10) // 设置值 m[\\\"path\\\"] = 66 // 输出值 fmt.Println(m[\\\"path\\\"]) \"]},\"64\":{\"h\":\"遍历 Map\",\"t\":[\"使用 range 遍历 map\",\"例子\",\"package main import \\\"fmt\\\" func main() { // 初始化 Map var dataMap map[string]string dataMap = make(map[string]string) // 也可以这样初始化 //dataMap := map[string]string{} // 添加键值 dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" fmt.Println(\\\"print key and value: \\\") // 使用 range 遍历 key value for key, val := range dataMap { fmt.Printf(\\\"key: %s - value: %s \\\\n\\\", key, val) } fmt.Println(\\\"print key: \\\") // 使用 range 遍历 key for key := range dataMap { fmt.Printf(\\\"key: %s \\\\n\\\", key) } fmt.Println(\\\"print value: \\\") // 使用 range 遍历 value for _, val := range dataMap { fmt.Printf(\\\"Value: %s \\\\n\\\", val) } } // 结果 // print key and value: // key: third - value: third value // key: first - value: first value // key: second - value: second value // print key: // key: first // key: second // key: third // print value: // Value: first value // Value: second value // Value: third value \"]},\"65\":{\"h\":\"删除键值\",\"t\":[\"在字典中删除键值需要使用 delete() 方法\",\"例子\",\"package main import \\\"fmt\\\" func main() { // 初始化 Map var dataMap map[string]string dataMap = make(map[string]string) // 也可以这样初始化 //dataMap := map[string]string{} dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" fmt.Println(dataMap) // 删除键值 delete(dataMap, \\\"first\\\") fmt.Println(dataMap) } // 结果： // map[first:first value second:second value third:third value] // map[second:second value third:third value] \"]},\"66\":{\"h\":\"判断 key 是否存在\",\"t\":[\"例子\",\"package main import \\\"fmt\\\" func main() { // 初始化 Map var dataMap map[string]string dataMap = make(map[string]string) dataMap[\\\"first\\\"] = \\\"first value\\\" dataMap[\\\"second\\\"] = \\\"second value\\\" dataMap[\\\"third\\\"] = \\\"third value\\\" // 判断 key 是否存在 if val, ok := dataMap[\\\"first\\\"]; ok { fmt.Println(val) } else { fmt.Println(\\\"key not exists\\\") } if val, ok := dataMap[\\\"fourth\\\"]; ok { fmt.Println(val) } else { fmt.Println(\\\"key not exists\\\") } } \"]},\"67\":{\"h\":\"获取 Map 长度\",\"t\":[\"使用 len() 获取 Map 的长度\",\"len(dataMap) \"]},\"68\":{\"h\":\"并发\",\"t\":[\"在并发操作下 Map 不是线程安全的，可以使用官方的 sync.Map{} 解决\"]},\"69\":{\"h\":\"切片\"},\"70\":{\"h\":\"创建切片\",\"t\":[\"有三种方式可以创建切片\",\"package main import \\\"fmt\\\" func main() { // 第一种方式： 直接声明 var dataSlice []string // 第二种方式： 直接初始化 dataSlice1 := []string{} // 第三种方式： 使用 make dataSlice2 := make([]string, 10) fmt.Println(dataSlice, dataSlice1, dataSlice2) } \",\"可以在创建时直接将数据初始化\",\"dataSlice1 := []string{\\\"Jack\\\", \\\"Mike\\\"} \"]},\"71\":{\"h\":\"切片截取\",\"t\":[\"arr[beginIndex:endIndex] 可以截取切片，包含 beginIndex， 不包含 endIndex 下标的数据。\",\"data := []int{0,1,2,3,4,5} fmt.Println(data[2:4]) // 结果 // [2 3] \"]},\"72\":{\"h\":\"长度及容量\",\"t\":[\"使用 len() 获取切片长度， 使用 cap() 获取切片容量\",\"例子\",\"package main import \\\"fmt\\\" func main() { // 创建长度为 5 ， 容量为 9 的切片 data := make([]int, 5, 9) fmt.Println(data, len(data), cap(data)) } // 结果： // [0 0 0 0 0] 5 9 \"]},\"73\":{\"h\":\"追加数据\",\"t\":[\"使用 append() 函数追加数据\",\"例子\",\"package main import \\\"fmt\\\" func main() { data := []int{0,1,2} // 追加一条数据 data1 := append(data, 3) // 追加多条数据 data2 := append(data, 4, 5, 6) fmt.Println(data) fmt.Println(data1) fmt.Println(data2) } // 结果： // [0 1 2] // [0 1 2 3] // [0 1 2 4 5 6] \"]},\"74\":{\"h\":\"克隆切片\",\"t\":[\"我们知道切片属于引用类型，如果将一个切片赋值给另一个变量，实际上共用一个内存地址的数据，如果想创建两个相同数据的切片，可以使用 copy() 方法\",\"例子\",\"package main import \\\"fmt\\\" func main() { data := []int{0,1,2} // 创建一个长度相同的切片 data1 := make([]int, len(data)) // 复制 data 的数据到 data1 copy(data1, data) // 给 data1 添加数据 data1 = append(data1, 3, 4, 5) fmt.Println(data) fmt.Println(data1) // 会发现 data 没被改变 } // 结果： // [0 1 2] // [0 1 2 3 4 5] \"]},\"75\":{\"h\":\"信道\"},\"76\":{\"h\":\"介绍\",\"t\":[\"channel 是一个信道，用于端到端数据的通信，常用于 goroutine 之间数据共享。\"]},\"77\":{\"h\":\"创建 channel\",\"t\":[\"我们使用 make 来创建 channel\",\"ch1 := make(chan T) // 无缓冲 ch2 := make(chan T, 2) // 带缓冲 \",\"T 为数据类型。\",\"注意\",\"无缓冲区的信道会被阻塞直到数据被接收\",\"有缓冲区的信道在发送的数据达到缓冲区大小后才会被阻塞\"]},\"78\":{\"h\":\"发送接收数据\",\"t\":[\"使用 <- 指向 channel 表示发送数据到该 channel, 如 ch <- 10\",\"使用 <- 在 channel 左侧表示接收数据，如 <-ch\"]},\"79\":{\"h\":\"关闭 channel\",\"t\":[\"使用 close() 关闭 channel\",\"close(ch) \",\"注意\",\"如果往一个已经 close() 的 channel 发送消息，会产生 panic\",\"读取已关闭的 channel 可以获得零值, 若使用 range 读取 channel, 则 close 后会终止循环\",\"我们可以使用 val, ok := <- ch 来判断是否是零值，若 ok 为 false 则信道已经 close\"]},\"80\":{\"h\":\"Select\",\"t\":[\"通常我们会使用 select 来接收 channel 的数据, 还可以使用 default 设定默认执行的动作, select 可以同时接收多个 channel ，若多个 channel 同时发送过来数据，则会随机选择一个 channel 完成操作\",\"select { case <-ch1: // 接收 ch1 的数据 fmt.Println(\\\"ch1\\\") case <-ch2: // 接收 ch2 的数据 fmt.Println(\\\"ch2\\\") case val := <-ch3: fmt.Println(ch3) //接收 ch3 的数据并打印 default: fmt.Println(\\\"default\\\") } \"]},\"81\":{\"h\":\"例子\",\"t\":[\"定时器就是通过 channel 实现了定时结果的返回\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { t := time.NewTicker(3*time.Second) fmt.Println(\\\"start\\\") <-t.C fmt.Println(\\\"finish\\\") } \"]},\"82\":{\"h\":\"注意事项\",\"t\":[\"使用 channel 时要注意必须有接收数据端，注意避免死锁问题\"]},\"83\":{\"h\":\"Context\"},\"84\":{\"h\":\"介绍\",\"t\":[\"Context 是 golang 中十分重要的接口，用于定义 goroutine 中的上下文信息，context 常用于以下几种情况：\",\"数据传递： 在多个 goroutine 中传递数据\",\"超时管理： 通过配置超时时间，可以方便地配置协程的终止时间\",\"终止协程： 通过使用 cancel() 方法，协程可以很方便地终止，可以批量管理多个协程的终止\"]},\"85\":{\"h\":\"Context 接口\",\"t\":[\"// A Context carries a deadline, a cancelation signal, and other values across // API boundaries. // // Context's methods may be called by multiple goroutines simultaneously. type Context interface { Done() <-chan struct{} Deadline() (deadline time.Time, ok bool) Err() error Value(key interface{}) interface{} } \"]},\"86\":{\"h\":\"根节点和派生节点\",\"t\":[\"我们可以为 context 创建根节点和派生节点，为树形结构，当根节点被 cancel() 或超时终止时，它的所有派生节点也会被终止，根节点的数据也会被所有派生节点共享。\",\"context 结构\"]},\"87\":{\"h\":\"创建根节点\",\"t\":[\"ctx := context.Background() // 创建空白 context ctx2 := context.TODO() // TODO 同样是空白 context \"]},\"88\":{\"h\":\"创建派生节点\",\"t\":[\"使用 context.WithXXX() 创建派生 context\",\"package main import ( \\\"context\\\" \\\"fmt\\\" ) func main() { ctx := context.WithValue(context.Background(), \\\"base\\\", \\\"baseVal\\\") ctx1 := context.WithValue(ctx, \\\"ctx1\\\", \\\"ctx1Val\\\") ctx2 := context.WithValue(ctx, \\\"ctx2\\\", \\\"ctx2Val\\\") ctx3 := context.WithValue(ctx, \\\"ctx3\\\", \\\"ctx3Val\\\") fmt.Println(ctx) fmt.Println(ctx1) fmt.Println(ctx2) fmt.Println(ctx3) } // 结果： // context.Background.WithValue(type string, val baseVal) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx1Val) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx2Val) // context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx3Val) \"]},\"89\":{\"h\":\"WithValue()\",\"t\":[\"context.WithValue() 可以用于创建派生节点并添加键值数据，同时保留父级 context 所有的数据\"]},\"90\":{\"h\":\"WithDeadline() WithTimeout()\",\"t\":[\"context.WithDeadline() 和 context.WithTimeout() 可以用来创建带有超时控制的 context\",\"注意\",\"WithTimeout(1*time.Second) 等同于 WithDeadline(time.Now().Add(1*time.Second))\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func main() { ctx, _ := context.WithTimeout(context.Background(), 3*time.Second) go func(ctx1 context.Context) { for { select { case <-ctx1.Done(): fmt.Println(\\\"time out\\\") return default: fmt.Println(\\\"running...\\\") time.Sleep(time.Second) } } }(ctx) time.Sleep(5 * time.Second) } // 结果： // running... // running... // running... // time out \"]},\"91\":{\"h\":\"WithCancel()\",\"t\":[\"使用 WithCancel() 可以创建手动终止的 context 执行 cancel() 即可手动终止\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"time\\\" ) func main() { ctx, cancel := context.WithCancel(context.Background()) go func(ctx1 context.Context) { for { select { case <-ctx1.Done(): fmt.Println(\\\"canceled\\\") return default: fmt.Println(\\\"running...\\\") time.Sleep(time.Second) } } }(ctx) time.Sleep(3*time.Second) cancel() time.Sleep(5 * time.Second) } // 结果： // running... // running... // running... // canceled \"]},\"92\":{\"h\":\"计算机网络基础\"},\"93\":{\"h\":\"OSI七层模型\",\"t\":[\"层级\",\"功能\",\"物理层\",\"主要实现相邻节点间比特流的透明传输，物理层定义了物理设备的标准，如网线的类型等， 网卡也会在这层工作 。\",\"数据链路层\",\"将网络层传下来的比特数据包组装成帧，并在相邻节点的链路上传送帧。数据链路层会将0、1序列划分为具有意义的数据帧传送给另一端。\",\"网络层\",\"选择合适的路由和交换结点，能让数据及时传送，此层的数据称为数据包，要关注的是IP协议。\",\"传输层\",\"向主机进程提供通用的数据传输服务。传输层需要关注的协议有TCP协议和UDP协议。\",\"会话层\",\"负责在网络中的两节点之间建立、维持和终止通信，常见的协议有 ADSP、RPC 等。\",\"表示层\",\"主要负责数据格式的转换，解决不同系统之间通信语法问题\",\"应用层\",\"为应用程序提供交互服务，目的是更方便应用从网络中接收的数据，重点关注HTTP协议\",\"osi\"]},\"94\":{\"h\":\"TCP和IP模型\",\"t\":[\"OSI七层模型\",\"TCP/IP 五层模型\",\"TCP/IP 四层模型\",\"功能\",\"TCP/IP协议族\",\"应用层\",\"应用层\",\"应用层\",\"文件传输，电子邮件，文件服务，虚拟终端等\",\"SMTP，DNS，Telnet，TFTP，HTTP，SNHP，FTP\",\"表示层\",\"应用层\",\"应用层\",\"数据格式化，代码转换，数据加密\",\"无\",\"会话层\",\"应用层\",\"应用层\",\"解除或建立与别的接点的联系\",\"无\",\"传输层\",\"传输层\",\"传输层\",\"提供端对端的接口\",\"TCP，UDP\",\"网络层\",\"网络层\",\"网络层\",\"为数据包选择路由\",\"IP，ICHP，RIP，OSPF，BCP，ICMF\",\"数据链路层\",\"数据链路层\",\"网络接口层\",\"传输有地址的顿以及错误检测功能\",\"SLIP，CSLIP，PPP，ARP，RARP，MTU\",\"物理层\",\"物理层\",\"网络接口层\",\"以二进制数据形式在物理媒介上传输数据\",\"IS02110，IEEE802，IEEE802.2\"]},\"95\":{\"h\":\"HTTP\"},\"96\":{\"h\":\"请求方法\",\"t\":[\"相关信息\",\"HTTP 1.0 支持三种请求方式：\",\"GET\",\"POST\",\"HEAD\",\"HTTP 1.1 额外支持 6 种请求方式\",\"OPTIONS\",\"PUT\",\"PATCH\",\"DELETE\",\"TRACE\",\"CONNECT\",\"方法\",\"描述\",\"GET\",\"请求一个指定资源，用于获取数据\",\"HEAD\",\"和 GET 类似，但是只返回响应头，不返回响应体\",\"POST\",\"用于提交信息到目标地址，用于数据提交和文件上传\",\"PUT\",\"提交更新的信息，用于替换原数据\",\"DELETE\",\"删除指定的资源\",\"CONNECT\",\"与服务器建立隧道\",\"OPTIONS\",\"返回特定服务器地址所支持的 HTTP 请求方法, 也可用于测试服务器支持的功能\",\"TRACE\",\"回显服务器收到的请求，主要用于测试或诊断\",\"PATCH\",\"和 PUT 相似，主要用于部分更新\"]},\"97\":{\"h\":\"HTTP 状态码\",\"t\":[\"数字\",\"含义\",\"1XX\",\"指示信息，表示请求以接收，继续处理\",\"2XX\",\"成功，表示请求已经被成功接收、理解、接受\",\"3XX\",\"状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向\",\"4XX\",\"状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。\",\"5XX\",\"状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码\",\"常见状态码\",\"HTTP 状态码\",\"名称\",\"描述\",\"100\",\"Continue\",\"继续 表示客户端可以继续提交请求\",\"101\",\"Switching Protocols\",\"切换协议 切换传输协议，只能从低版本切换到高版本，如 HTTP1.0 切换为 HTTP1.1\",\"200\",\"OK\",\"请求成功 表示服务器成功返回了数据\",\"201\",\"Created\",\"已创建 表示服务器成功接收到请求并创建了对应的资源\",\"202\",\"Accepted\",\"已接受 表示服务器已经接受了请求，请求将会被处理\",\"203\",\"Non-Authoritative Information\",\"非授权信息 表示请求成功,但返回的meta信息不在原始的服务器，而是一个副本\",\"204\",\"No Content\",\"无内容 表示服务器成功处理请求\",\"205\",\"Reset Content\",\"重置内容 服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域\",\"206\",\"Partial Content\",\"部分内容服务器成功处理了部分GET请求\",\"300\",\"Multiple Choices\",\"多种选择请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择\",\"301\",\"Moved Permanently\",\"永久移动请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替\",\"302\",\"Found\",\"临时移动与301类似。但资源只是临时被移动。客户端应继续使用原有URI\",\"303\",\"See Other\",\"查看其它地址与301类似。使用GET和POST请求查看\",\"304\",\"Not Modified\",\"未修改 所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源\",\"305\",\"Use Proxy\",\"使用代理 所请求的资源必须通过代理访问\",\"307\",\"Temporary Redirect\",\"临时重定向与302类似。使用GET请求重定向\",\"400\",\"Bad Request\",\"错误请求表示客户端请求的报文有错误\",\"401\",\"Unauthorized\",\"未授权缺失或错误的认证，这个状态代码必须和WWW-Authenticate报头域一起使用\",\"403\",\"Forbidden\",\"禁止访问表示服务器禁止访问资源,并不是客户端的请求出错\",\"404\",\"Not Found\",\"未找到表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端\",\"501\",\"Not Implemented\",\"功能未实现表示客户端请求的功能还不支持\",\"502\",\"Bad Gateway\",\"网关错误通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误\",\"503\",\"Service Unavailable\",\"服务器不可用表示服务器当前很忙，暂时无法响应服务器\",\"504\",\"Gateway Timeout\",\"网关超时网关超时，由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答\"]},\"98\":{\"h\":\"HTTPS vs HTTP\",\"t\":[\"特性\",\"HTTP\",\"HTTPS\",\"定义\",\"HTTP 是超文本传输协议，用于从万维网服务器传输超文本到本地浏览器的传送协议。\",\"HTTPS 是带有安全性的 HTTP，通过 SSL/TLS 提供加密处理、数据完整性校验及身份认证。\",\"端口\",\"默认的 HTTP 端口是 80。\",\"默认的 HTTPS 端口是 443。\",\"安全性\",\"HTTP 本身不是安全的，因为数据在传输过程中没有加密，可能会被第三方获取。\",\"HTTPS 是安全的，因为数据在传输过程中会被加密，防止被第三方获取。\",\"速度\",\"HTTP 相对较快，因为没有加密和解密的过程。\",\"HTTPS 相对较慢，因为数据在传输过程中需要进行加密和解密。\"]},\"99\":{\"h\":\"工作原理\",\"t\":[\"HTTPS 协议会对传输的数据进行加密，而加密过程是使用了非对称加密实现\",\"Client发起一个HTTPS的请求\",\"Server把事先配置好的公钥证书返回给客户端。\",\"Client验证公钥证书：比如是否在有效期内，证书的用途是不是匹配Client请求的站点，是不是在CRL吊销列表里面，它的上一级证书是否有效，这是一个递归的过程，直到验证到根证书（操作系统内置的Root证书或者Client内置的Root证书），如果验证通过则继续，不通过则显示警告信息。\",\"Client使用伪随机数生成器生成加密所使用的对称密钥，然后用证书的公钥加密这个对称密钥，发给Server。\",\"Server使用自己的私钥解密这个消息，得到对称密钥。至此，Client和Server双方都持有了相同的对称密钥。\",\"Server使用对称密钥加密明文内容A，发送给Client。\",\"Client使用对称密钥解密响应的密文，得到明文内容A。\",\"Client再次发起HTTPS的请求，使用对称密钥加密请求的明文内容B，然后Server使用对称密钥解密密文，得到明文内容B。\",\"https\"]},\"100\":{\"h\":\"HTTP 1.0 vs 1.1 vs 2.0\",\"t\":[\"区别\",\"特性\",\"HTTP 1.0\",\"HTTP 1.1\",\"HTTP 2.0\",\"连接方式\",\"无连接，每次请求都要建立连接\",\"长连接，减少了 TCP 连接的重复建立和断开所造成的额外开销\",\"多路复用，一个 TCP 连接上可以并发多个 HTTP 请求\",\"队头阻塞\",\"存在，下一个请求必须在前一个请求响应到达之前才能发送\",\"存在，虽然可以发起多个请求，但服务器必须按照接收请求的顺序发送响应\",\"解决，可以在一个连接中并发多个请求或回应，而不用按照顺序一一对应\",\"头部压缩\",\"不支持\",\"不支持\",\"支持，使用 HPACK 算法对 header 进行压缩\",\"服务器推送\",\"不支持\",\"不支持\",\"支持\"]},\"101\":{\"h\":\"数字证书\",\"t\":[\"数字证书是一种权威性的电子文档，它提供了一种在互联网上验证身份的方式。数字证书对个人或组织的线上凭据与身份进行验证，并能让网络用户和接收者知道其所输入的数据将前往受信任的来源。它们类似于网站和用户的安全徽章，并有助于确保互联网的安全性。\",\"数字证书由证书颁发机构（CA）所颁发，用于对线上数据进行加密。数字证书也称为公钥证书或身份证书。例如，TLS/SSL证书有两种用途：对网站、浏览器和Web服务器之间传输的数据进行加密和保护，以及有助于识别并验证网站所有者。\",\"数字证书的基本架构是公开密钥PKI，即利用一对密钥实施加密和解密。其中密钥包括私钥和公钥，私钥主要用于签名和解密，由用户自定义，只有用户自己知道；公钥用于签名验证和加密，可被多个用户共享。\",\"数字证书的应用非常广泛，例如在安全电子邮件中使用数字证书可以建构安全电子邮件证书，主要用户加密电子邮件的传输，保护电子邮件在传输和接收过程中的安全²。另外，数字证书也可以用于终端的保护，例如在电子商务的活动过程中安装了数字证书，那么即使其账户或者密码等个人信息被盗取，其账户中的信息与资金安全仍然能得到有效的保障。\"]},\"102\":{\"h\":\"数字签名工作原理\",\"t\":[\"signature\",\"签名过程\",\"利用签名哈希算法（例如 sha256md5）计算包括证书颁发者信息、证书持有者信息、证书有效期、证书持有者公钥等在内的信息（如 x.509 的例子），生成证书摘要 α 。\",\"颁发者生成一对私钥和公钥，然后使用私钥对指纹进行加密，得到的加密数据即为颁发者的数字签名γ。\",\"将数字签名γ附加到数字证书上，形成一个签名过的数字证书。\",\"颁发者将签名过的数字证书和公钥一起交给证书持有者。\",\"验签过程\",\"使用者通过某种方式（例如，浏览器访问）获取签名过的数字证书，解析后可以得到数字签名γ和数字证书。\",\"使用者使用数字证书中的指纹算法重新计算数字证书相关内容，生成一个新的指纹β。\",\"同时，使用者使用获取到的颁发者的公钥解密数字签名，得到解密后的指纹α。\",\"对比两个指纹α和β，如果相同，则证明证书是合法的，使用者可以信任并使用该证书中的信息（例如，持有者的公钥）。\",\"例子：X.509 证书包含的信息\",\"证书的版本信息\",\"证书的序列号\",\"证书所使用的签名算法\",\"证书的发行机构名称\",\"证书的有效期，现在通用的证书一般采用UTC时间格式，它的计时范围为1950-2049\",\"证书所有人的名称\",\"证书所有人的公开密钥\",\"证书发行者对证书的签名\",\"作用\",\"数据加密：加密数据确保数据安全\",\"身份确定：确保双方身份正确\",\"不可篡改：无法修改已签名的文件\",\"不可否认：CA 的监督下确保交易达成后不能否认未进行交易\"]},\"103\":{\"h\":\"TCP/UDP\"},\"104\":{\"h\":\"TCP\",\"t\":[\"传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。\"]},\"105\":{\"h\":\"TCP 头部结构\",\"t\":[\"tcp 头部\",\"TCP头部字段\",\"描述\",\"源端口\",\"发送方的端口号，范围(0~65535)\",\"目标端口\",\"接收方的端口号，范围(0~65535)\",\"序列号\",\"如果TCP数据过大（大于IP数据包的允许程度），则需要进行分段。这个序列号记录每个数据包的序列号，使接收端可以重新组合TCP数据。序列号字段的值是本报文段发送的数据的第一个字节的序列号。简称为seq\",\"确认号\",\"为了确认接收端确实收到了发送端发送的数据包数据，当发送端收到这个确认码时，就可以确定之前传递的数据包已经被正确接收。这个确认号是期望收到对方下一个报文段的数据的第一个字节的序列号。简称ack\",\"头部长度\",\"表示TCP头部的长度，范围(0~15)，单位32位，例如值为5时，表示头部长度是20字节（160位），如果选项字段为空，则TCP头部长度为20字节，即值为5\",\"URG\",\"URG=1表示存在紧急数据，紧急数据的最后一个字节由紧急数据指针指出，一般使用较少\",\"ACK\",\"ACK=1表示确认号字段中的值是有效的，为0表示无效\",\"PSH\",\"URG=1表示紧急指针字段有效，代表该数据包为紧急数据包。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据）\",\"RST\",\"RSP=1表示重建连接，如果接收到RST位时，通常发生了某些错误\",\"SYN\",\"SYN=1表示这是一个连接请求或连接接受报文，一般用于握手阶段\",\"FIN\",\"FIN=1表示此报文段的发送端的数据已发送完毕，并要求释放运输连接\",\"接收窗口\",\"用于流量控制，指示接收方愿意接收的字节数量，范围0~65535字节\",\"校验和\",\"校验和覆盖了整个TCP报文段，即TCP头部和TCP数据，这是一个强制性的字段，一定是由发送端计算和存储，并由接收端进行验证\",\"紧急数据指针\",\"当URG=1时有效，是一个正的偏移量，和序列号中的值相加表示紧急数据最后一个字节的序列号\",\"选项\",\"用于发送方和接收方协商最大报文长度（MSS）时（只存在于SYN报文）或在高速网络环境下用作窗口调节因子时使用，还可以存放时间戳数据\"]},\"106\":{\"h\":\"TCP 状态机\",\"t\":[\"TCP Stateful\"]},\"107\":{\"h\":\"TCP 三次握手\",\"t\":[\"TCP Connection\",\"三次握手过程\",\"客户端发送SYN=1，并指明客户端的初始序列号ISN，即x.\",\"服务端发送自己的SYN段作为应答，同样指明自己的ISN 即 y。为了确认客户端的SYN，将x+1作为ACK数值。这样，每发送一个SYN，序列号就会加1. 如果有丢失的情况，则会重传。\",\"为了确认服务器端的SYN，客户端将y+1作为返回的ACK数值。\",\"TCP 四次挥手\",\"客户端发送FIN=1，并包含一个自己当前的序列号x+2。 同时还包含一个ACK=y+1表示确认对方最近一次发过来的数据。\",\"服务端将x+2值加1作为ACK序号值，表明收到了上一个包。这时上层的应用程序会被告知另一端发起了关闭操作，通常这将引起应用程序发起自己的关闭操作。\",\"服务端发起自己的FIN=1，seq=y+1 。\",\"客户端确认, 向服务器发送 ACK=y+2 。\",\"为什么要三次握手？作用是什么？\",\"详情\",\"TCP 建立连接的过程就是同步序列号的过程，SYN (Synchronize Sequence Numbers)就是同步序列号。因此，三次握手的目的就是使客户端(Client)和服务端(Service)获取到对方的序列号。\",\"为什么要四次挥手？作用是什么？\",\"详情\",\"之所以需要四次挥手，是因为 tcp 是全双工协议，即客户端和服务端都可以主动发送消息，因此需要两端分别在传输完成后发送断开连接的指令，需要分别发送 FIN=1 指令断开，通过 ACK 判断是否发送成功。\",\"如果连接时 SYN 超时会发生什么？\",\"详情\",\"假如客户端发送 SYN 指令，在服务器返回 SYN 指令之前掉线了，服务器会尝试重发 SYN-ACK 指令，linux 下默认重试 5 次，间隔时间从 1s 开始翻倍增长，即 1s, 2s, 4s, 8s, 16s, 因此超时时间为  1s + 2s + 4s+ 8s+ 16s + 32s = 63s。在超时之后 TCP 才会断开连接。\"]},\"108\":{\"h\":\"基础\"},\"109\":{\"h\":\"指针\"},\"110\":{\"h\":\"什么是指针和指针变量?\",\"t\":[\"答案\",\"普通变量存储数据，而指针变量存储的是数据的地址。\",\"学习指针，主要有两个运算符号&和*。 \",\"&：地址运算符，从变量中取地址\",\"*：引用运算符，取地址中数据\",\"num := 99 fmt.Println(num) //输出: 99 ptr := &num fmt.Println(ptr) //输出: 例如：0xc000086020 tamp := *ptr fmt.Println(tamp) //输出: 99 \"]},\"111\":{\"h\":\"为什么使用指针？\",\"t\":[\"答案\",\"意义一：容易编码\",\"指针在数据结构中起着重要的作用。通过指针，我们可以创建复杂的数据结构，如链表、树和图。指针可在数据结构中轻松地访问和操作节点之间的关系，从而实现高效的数据存储和检索。\",\"指针可在函数之间传递数据的引用，而不是复制整个数据。这样可以节省内存空间，并提高程序的执行效率。通过传递指针，函数可以直接修改原始数据，而不需要返回值。\",\"意义二：节省内存\",\"指针可直接访问和修改内存中的数据，通过指针，我们可以在运行时动态地分配内存，以满足程序的需求，并在不需要时释放内存，避免内存泄漏。\",\"指针可在程序运行时动态地分配内存。通过动态内存分配，我们可以根据需要分配和释放内存，从而提高程序的灵活性和效率。\"]},\"112\":{\"h\":\"哪些对象可以获取地址，哪些不行？\",\"t\":[\"答案\",\"可以使用 & 获取内存地址的对象：\",\"变量\",\"指针\",\"数组，切片及其内部数据\",\"结构体指针\",\"Map\",\"不能寻址的对象:\",\"结构体\",\"常量\",\"字面量\",\"函数\",\"map 非指针元素\",\"数组字面量\"]},\"113\":{\"h\":\"字面量\"},\"114\":{\"h\":\"字面量是什么意思？\",\"t\":[\"答案\",\"下面这些基本类型赋值的文本，就是基本类型字面量。\",\"基本类型\",\"集合\",\"布尔类型\",\"bool\",\"字符串类\",\"string\",\"复数类型\",\"complex64complex128\",\"浮点类型\",\"float32float64\",\"整数类型\",\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",\"如\",\"s := \\\"hello world\\\" // \\\"hello world\\\" 就是字面量 n := 10 // 10 就是字面量 \",\"未命名常量是一种特殊的常量，它没有具体的名称。这种常量只有值，没有与之关联的变量名。 如下字符串都是字符串字面量，就是 未命名常量。\",\"\\\"hello，world\\\" \\\"123\\\" \"]},\"115\":{\"h\":\"什么是有类型常量和无类型常量？\",\"t\":[\"答案\",\"Golang 中，常量分为有类型常量和无类型常量。\",\"// 无类型常量 const A = 8 // 有类型常量 const colour string = \\\"red\\\" \",\"当无类型的常量被赋值给一个变量的时，无类型的常量会转化成对应的类型\",\"package main import \\\"fmt\\\" func main() { const A = 8 var t int16 = A fmt.Printf(\\\"%T \\\", t) }//输出： int16 \",\"或者进行显式的转换\",\"package main import \\\"fmt\\\" func main() { const A int8 = 8 var t int16 = int16(A) fmt.Printf(\\\"%T \\\", t) //输出： int16 } \",\"而有类型常量在赋值的时，类型不同会报错\",\"package main import \\\"fmt\\\" func main() { const A int8 = 8 var t int16 = A fmt.Printf(\\\"type: %T \\\\n\\\", t) //出错： cannot use A (type int8) as type int16 in assignment } \"]},\"116\":{\"h\":\"不同字面量可能同值吗？\",\"t\":[\"答案\",\"一个值可存在多种字面量表示，如下十进制的数值 21，可由三种字面量表示\",\"10进制\",\"8进制\",\"2进制\",\"16进制\",\"21\",\"0o25\",\"0b0001 0101\",\"0x15\",\"import \\\"fmt\\\" func main() { fmt.Println(21 == 0o25) fmt.Println(21 == 0x15 ) fmt.Println(21 == 0b0001 0101) }// 由运行结果得出他们相等 \"]},\"117\":{\"h\":\"字面量和变量的区别是什么？\",\"t\":[\"答案\",\"字面量，就是未命名的常量，跟常量一样，是不可寻址的。\",\"举例如下\",\"func run() string { return \\\"fast\\\" } func main() { fmt.Println(&run()) } \",\"./main.go:10:14: cannot take the address of run() \",\"若不用变量名承接，函数返回的一个字符串的文本值，也就是字符串字面量， 而这种字面量是不可寻址的，会出现错误。要用 & 寻址，须用变量名承接。\",\"而下面这样就没错\",\"func run() string { return \\\"fast\\\" } func main() { t := run() fmt.Println(&t) } \"]},\"118\":{\"h\":\"什么是组合字面量？\",\"t\":[\"答案\",\"组合字面量就是把对象的定义和初始化放在了一起，进一步说，组合字面量是为结构体、数组、切片和map构造值，并且每次都会创建新值。它们由字面量的类型后紧跟大括号及元素列表。每个元素前面可以选择性的带一个相关key。\",\"使用组合字面量会简单一些，而结构体、数组、切片和map的组合字面量方式如下。\",\"结构体用组合字面量方式来定义和初始化\",\"type man struct { nationality string height int } func main() { // 声明和属性赋值 su := man{ nationality: \\\"China\\\", height: 180, } } \",\"结构体用繁琐的常规方式如下\",\"type man struct { nationality string height int } func main() { // 声明对象 var su man // 属性赋值 su.nationality = \\\"China\\\" su.height = 180 } \",\"map用组合字面量方式的定义和初始化如下\",\"m := map[string]int { \\\"math\\\": 96, \\\"Chinese\\\": 90, } \",\"同样的，数组用组合字面量方式的定义和初始化可以如下\",\"colours := [3]string{\\\"black\\\", \\\"red\\\", \\\"white\\\"} \",\"切片的组合字面量方式如下\",\"s := []string{\\\"red\\\", \\\"black\\\"} //会自动补上切片的容量和长度 \"]},\"119\":{\"h\":\"其他\"},\"120\":{\"h\":\"Go 中的 和 有什么区别？\",\"t\":[\"答案\",\"在 Go 语言中，byte 和 rune 都是用于表示字符的类型，但它们之间有一些区别：\"]},\"121\":{\"h\":\"类型不同：\",\"t\":[\"byte ：字节，是 uint8 的别名类型\",\"rune ：字符，是 int32 的别名类型\"]},\"122\":{\"h\":\"存储的字符不同：\",\"t\":[\"//byte 用于表示 ASCII 码字符，只能存储 0-255 范围内的字符。 var a byte = 'Y' // ASCII 码字符 //rune 用于表示 Unicode 字符，可以存储任意 Unicode 字符。 var b rune = '酥' // Unicode 字符 \"]},\"123\":{\"h\":\"占用的字节大小不同：byte 占用1个字节，rune 占用4个字节。\",\"t\":[\"import \\\"unsafe\\\" var a byte = 'Y' var b rune = '酥' fmt.Printf(\\\"a 占用 %d 个字节数\\\\nb 占用 %d 个字节数\\\", unsafe.Sizeof(a), unsafe.Sizeof(b)) // 输出: a 占用 1 个字节数 b 占用 4 个字节数 \"]},\"124\":{\"h\":\"表示的字符范围不同：\",\"t\":[\"由于 byte 类型能表示的值是有限的，只有 2^8=256 个。所以想表示中文只能使用 rune 类型。\"]},\"125\":{\"h\":\"Golang中的深拷贝和浅拷贝是什么？\",\"t\":[\"答案\",\"什么是拷贝？\",\"拷贝最简单的一种形式如下\",\"a := 648 b := a //把a 拷贝给 b \",\"那什么是深拷贝和浅拷贝？\",\"深浅拷贝也和类型有关\",\"类型\",\"详情\",\"引用类型\",\"SliceMapChannelsInterfacesFunctions\",\"值类型\",\"StringArrayIntStructFloatBool\",\"两种类型拷贝效果不同，先说我们比较熟悉的值类型。如什么是拷贝提问里易知， 若是值类型的话，在每一次拷贝后都会新申请一块空间存储值，拷贝后的两个值类型独立不影响。\",\"以引用类型的切片(Slice)为例来讲讲深拷贝和浅拷贝\",\"类型\",\"例子\",\"深度拷贝\",\"copy(slice1, slice2)\",\"浅拷贝\",\"slice1 = slice2\",\"浅拷贝仅改变指针的指向，如下\",\"package main import \\\"fmt\\\" func main() { var slice1 = []int{7, 8, 9} var slice2 = make([]int, 3) //切片初始化 slice2 = slice1 //浅拷贝改变了slice2的指向 fmt.Println(slice1) slice2[0] = 648 // 改变slice2[0]，slice1[0]也改变 fmt.Println(slice2) fmt.Println(slice1) } \",\"输出结果如下\",\"[7 8 9] [648 8 9] [648 8 9] \",\"所以对于切片来说，浅拷贝改变了它的地址。\",\"而深拷贝会改变地址的内存内的数组值，如下\",\"package main import \\\"fmt\\\" func main() { var slice1 = []int{7, 8, 9} var slice2 = make([]int, 3) //切片初始化 copy(slice2, slice1) //深拷贝会改变地址的内存内的数组值 fmt.Println(slice2) slice2[0] = 648 // 改变slice2[0]，slice1[0]不变 fmt.Println(slice2) fmt.Println(slice1) } \",\"[7 8 9] [648 8 9] [7 8 9] \"]},\"126\":{\"h\":\"和 有什么区别？\",\"t\":[\"答案\",\"new 用于给任意的类型分配内存地址，并返回该类型的指针，且初始化值为零值。\",\"new 并不是很常用\",\"package main import \\\"fmt\\\" func main() { s := new(string) n := new(int) fmt.Println(s) // 0xc00008a030 fmt.Println(*s) // \\\"\\\" fmt.Println(n) // 0xc00000a0d8 fmt.Println(*n) // 0 } \",\"make 主要用于 slicesmapchannel 初始化\",\"package main import \\\"fmt\\\" func main() { m := make(map[string]int, 10) fmt.Println(m) // map[] } \"]},\"127\":{\"h\":\"数组和切片有什么区别？\",\"t\":[\"答案\",\"数组的长度是固定的，在创建的时候就已经确定，且不可改变。切片的长度是动态的，会根据添加的数据自动扩容。\",\"在函数参数传递时数据是值传递，切片是引用传递\",\"切片有容量 （capacity） 参数，数组没有\"]},\"128\":{\"h\":\"如果 同时添加数据， 会无限执行吗？\",\"t\":[\"答案\",\"不会，在执行 for range 的时候实际遍历的是变量的副本，所以改变遍历的变量是不会有影响的\",\"package main import \\\"fmt\\\" func main() { n := []int{1, 2, 3} for _, v := range n { n = append(n, v) } fmt.Println(n) // 结果： [1 2 3 1 2 3] } \"]},\"129\":{\"h\":\"多个 defer 的执行顺序是什么？\",\"t\":[\"答案\",\"执行的顺序类似堆栈，先进后出\",\"package main import \\\"fmt\\\" func main() { defer func() { fmt.Println(1) }() defer func() { fmt.Println(2) }() defer func() { fmt.Println(3) }() } // 结果： // 3 // 2 // 1 \"]},\"130\":{\"h\":\"什么是数据溢出？\",\"t\":[\"答案\",\"在使用数字类型时如果数据达到最大值，则接下来的数据将会溢出，如 uint 溢出后会从 0 开始， int 溢出后会变为负数。\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) func main() { var n int8 = math.MaxInt8 var m uint8 = math.MaxUint8 n += 2 m += 1 fmt.Println(n) // -127 fmt.Println(m) // 0 } \",\"如何避免？\",\"正数优先使用 uint, 范围更大\",\"添加判断代码判断是否溢出\"]},\"131\":{\"h\":\"函数参数使用值还是指针？\",\"t\":[\"答案\",\"值传递\",\"一般来说，对于常见的类型都可以使用值传递，值传递的优点是函数内对值的修改不会影响原始的变量，也不会出现并发问题。缺点是值传递会复制一份对应变量的副本，对内存占用会多一些，如果传入的结构体非常大，使用值传递就不太合适。\",\"指针和引用传递\",\"使用指针传递的好处是直接传递变量的地址，不需要额外的空间，缺点是并发操作时数据修改会影响到原始的数据。传入切片实际上就是传递切片的指针，避免重复拷贝，若传入数组则是值传递，会拷贝一份。\"]},\"132\":{\"h\":\"Map\"},\"133\":{\"h\":\"未初始化的 Map 可以读取 key 吗？\",\"t\":[\"答案\",\"可以的，未执行 make 初始化的 map 读取任何 key 都会返回当前类型的空值\",\"package main import \\\"fmt\\\" func main() { var m map[int]int fmt.Println(m[1]) } // 结果： // 0 \"]},\"134\":{\"h\":\"如果对未初始化的 Map 赋值会怎么样？\",\"t\":[\"答案\",\"会触发 panic 异常错误\",\"package main func main() { var m map[int]int m[1] = 1 } // 结果： // panic: assignment to entry in nil map \"]},\"135\":{\"h\":\"如果对未初始化的 Map 进行删除 key 的操作会发生什么？\",\"t\":[\"答案\",\"早期如果对未初始化的 map 进行 delete 操作会报 panic 错误， 现在的版本对于未初始化的 map 进行 delete 是不会报错的。\",\"package main func main() { var m map[int]int delete(m, 1) } // 结果： // \"]},\"136\":{\"h\":\"进阶\"},\"137\":{\"h\":\"使用过 吗？ 有哪些使用场景？\",\"t\":[\"答案\",\"场景\",\"介绍\",\"超时处理\",\"通过使用 context 可以方便地设置超时时间，在超时后自动终止协程\",\"终止协程\",\"通过使用 cancel() 方法，协程可以很方便地终止\",\"传递数据\",\"我们可以将数据写入 context, 在不同协程间传递数据\"]},\"138\":{\"h\":\"channel 是线程安全的吗？\",\"t\":[\"答案\",\"channel 是线程安全的，原因是 channel 内部实现了锁的机制，\"]},\"139\":{\"h\":\"Map 使用 range 遍历时是有序还是无序的？\",\"t\":[\"答案\",\"无序的\",\"Map 在内部使用哈希算法放置元素，在自动扩容时又会重新计算哈希值，因此元素的地址会不断变化，官方为了避免用户认为 Map 元素排列是有序的，直接采用随机顺序返回，所以遍历是无序的。\"]},\"140\":{\"h\":\"Map 并发安全吗？\",\"t\":[\"答案\",\"Map不能保证并发安全\",\"要保证并发安全，使用以下方式：\",\"手动加读写锁\",\"使用 sync.Map\"]},\"141\":{\"h\":\"Map 的 key 删除后 key 的内存会被释放吗？\",\"t\":[\"答案\",\"若 map 的 value 为\",\"值类型 (intuintfloat32stringstruct{}...), 则 key 被删除后 value 不会被内存回收\",\"引用类型 (mapsliceschan ...), 则 key 被删除后 value 会被内存回收\",\"如果我们想强制回收，如何操作？\",\"将 map 设置为 nil\",\"将 map 需要保留的值放置到一个新的 map 并赋值给当前的 map\",\"会员专属\",\"代码实战解析\"]},\"142\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"143\":{\"h\":\"Database\"},\"144\":{\"h\":\"Concepts\"},\"145\":{\"h\":\"Golang\"},\"146\":{\"h\":\"Network\"},\"147\":{\"h\":\"Database\"},\"148\":{\"h\":\"Concepts\"},\"149\":{\"h\":\"Golang\"},\"150\":{\"h\":\"Network\"},\"151\":{\"h\":\"Basic\"},\"152\":{\"h\":\"Golang\"},\"153\":{\"h\":\"Interview\"},\"154\":{\"h\":\"Basic\"},\"155\":{\"h\":\"Golang\"},\"156\":{\"h\":\"Interview\"}},\"dirtCount\":0,\"index\":[[\"被删除后\",{\"1\":{\"141\":2}}],[\"手动加读写锁\",{\"1\":{\"140\":1}}],[\"元素排列是有序的\",{\"1\":{\"139\":1}}],[\"官方为了避免用户认为\",{\"1\":{\"139\":1}}],[\"原因是\",{\"1\":{\"138\":1}}],[\"场景\",{\"1\":{\"137\":1}}],[\"现在的版本对于未初始化的\",{\"1\":{\"135\":1}}],[\"现在通用的证书一般采用utc时间格式\",{\"1\":{\"102\":1}}],[\"早期如果对未初始化的\",{\"1\":{\"135\":1}}],[\"异常错误\",{\"1\":{\"134\":1}}],[\"赋值会怎么样\",{\"0\":{\"134\":1}}],[\"赋值运算符\",{\"0\":{\"53\":1}}],[\"吗\",{\"0\":{\"133\":1,\"137\":1}}],[\"避免重复拷贝\",{\"1\":{\"131\":1}}],[\"避免内存泄漏\",{\"1\":{\"111\":1}}],[\"传递数据\",{\"1\":{\"137\":1}}],[\"传入切片实际上就是传递切片的指针\",{\"1\":{\"131\":1}}],[\"传输控制协议\",{\"1\":{\"104\":1}}],[\"传输有地址的顿以及错误检测功能\",{\"1\":{\"94\":1}}],[\"传输层需要关注的协议有tcp协议和udp协议\",{\"1\":{\"93\":1}}],[\"传输层\",{\"1\":{\"93\":1,\"94\":3}}],[\"缺点是并发操作时数据修改会影响到原始的数据\",{\"1\":{\"131\":1}}],[\"缺点是值传递会复制一份对应变量的副本\",{\"1\":{\"131\":1}}],[\"正数优先使用\",{\"1\":{\"130\":1}}],[\"溢出后会变为负数\",{\"1\":{\"130\":1}}],[\"溢出后会从\",{\"1\":{\"130\":1}}],[\"先进后出\",{\"1\":{\"129\":1}}],[\"先说我们比较熟悉的值类型\",{\"1\":{\"125\":1}}],[\"参数\",{\"1\":{\"127\":1}}],[\"且不可改变\",{\"1\":{\"127\":1}}],[\"且初始化值为零值\",{\"1\":{\"126\":1}}],[\"改变slice2\",{\"1\":{\"125\":2}}],[\"浅拷贝改变了它的地址\",{\"1\":{\"125\":1}}],[\"浅拷贝改变了slice2的指向\",{\"1\":{\"125\":1}}],[\"浅拷贝仅改变指针的指向\",{\"1\":{\"125\":1}}],[\"浅拷贝\",{\"1\":{\"125\":1}}],[\"深拷贝会改变地址的内存内的数组值\",{\"1\":{\"125\":1}}],[\"深度拷贝\",{\"1\":{\"125\":1}}],[\"深浅拷贝也和类型有关\",{\"1\":{\"125\":1}}],[\"两种类型拷贝效果不同\",{\"1\":{\"125\":1}}],[\"引用类型\",{\"1\":{\"125\":1,\"141\":1}}],[\"引用运算符\",{\"1\":{\"110\":1}}],[\"那什么是深拷贝和浅拷贝\",{\"1\":{\"125\":1}}],[\"那么即使其账户或者密码等个人信息被盗取\",{\"1\":{\"101\":1}}],[\"拷贝后的两个值类型独立不影响\",{\"1\":{\"125\":1}}],[\"拷贝给\",{\"1\":{\"125\":1}}],[\"拷贝最简单的一种形式如下\",{\"1\":{\"125\":1}}],[\"把a\",{\"1\":{\"125\":1}}],[\"个\",{\"1\":{\"124\":1}}],[\"个字节数\",{\"1\":{\"123\":4}}],[\"个保留的关键字\",{\"1\":{\"14\":1}}],[\"占用\",{\"1\":{\"123\":4}}],[\"占用4个字节\",{\"0\":{\"123\":1}}],[\"占用1个字节\",{\"0\":{\"123\":1}}],[\"占用的字节大小不同\",{\"0\":{\"123\":1}}],[\"酥\",{\"1\":{\"122\":1,\"123\":1}}],[\"码字符\",{\"1\":{\"122\":2}}],[\"存储的字符不同\",{\"0\":{\"122\":1}}],[\"存在\",{\"1\":{\"100\":2}}],[\"都会返回当前类型的空值\",{\"1\":{\"133\":1}}],[\"都是用于表示字符的类型\",{\"1\":{\"120\":1}}],[\"都带有\",{\"1\":{\"29\":1}}],[\"语言中\",{\"1\":{\"120\":1}}],[\"属性赋值\",{\"1\":{\"118\":1}}],[\"属于服务器端的错误码\",{\"1\":{\"97\":1}}],[\"进阶\",{\"0\":{\"136\":1}}],[\"进行\",{\"1\":{\"135\":2}}],[\"进行删除\",{\"0\":{\"135\":1}}],[\"进行压缩\",{\"1\":{\"100\":1}}],[\"进一步说\",{\"1\":{\"118\":1}}],[\"组合字面量是为结构体\",{\"1\":{\"118\":1}}],[\"组合字面量就是把对象的定义和初始化放在了一起\",{\"1\":{\"118\":1}}],[\"组合成一个数组\",{\"1\":{\"59\":1}}],[\"须用变量名承接\",{\"1\":{\"117\":1}}],[\"寻址\",{\"1\":{\"117\":1}}],[\"举例如下\",{\"1\":{\"117\":1}}],[\"跟常量一样\",{\"1\":{\"117\":1}}],[\"出错\",{\"1\":{\"115\":1}}],[\"什么是数据溢出\",{\"0\":{\"130\":1}}],[\"什么是拷贝\",{\"1\":{\"125\":1}}],[\"什么是组合字面量\",{\"0\":{\"118\":1}}],[\"什么是有类型常量和无类型常量\",{\"0\":{\"115\":1}}],[\"什么是指针和指针变量\",{\"0\":{\"110\":1}}],[\"没有与之关联的变量名\",{\"1\":{\"114\":1}}],[\"没被改变\",{\"1\":{\"74\":1}}],[\"浮点类型\",{\"1\":{\"114\":1}}],[\"浮点数就是包含小数点的数字\",{\"1\":{\"38\":1}}],[\"浮点数\",{\"0\":{\"38\":1}}],[\"非指针元素\",{\"1\":{\"112\":1}}],[\"非授权信息\",{\"1\":{\"97\":1}}],[\"字节\",{\"1\":{\"121\":1}}],[\"字面量和变量的区别是什么\",{\"0\":{\"117\":1}}],[\"字面量是什么意思\",{\"0\":{\"114\":1}}],[\"字面量\",{\"0\":{\"113\":1},\"1\":{\"112\":1,\"117\":1}}],[\"字符串类\",{\"1\":{\"114\":1}}],[\"字符串一旦创建\",{\"1\":{\"40\":1}}],[\"字符串由一连串的字符组成\",{\"1\":{\"40\":1}}],[\"字符串\",{\"0\":{\"40\":1}}],[\"字符\",{\"1\":{\"37\":2,\"121\":1,\"122\":3}}],[\"哪些不行\",{\"0\":{\"112\":1}}],[\"哪些对象可以获取地址\",{\"0\":{\"112\":1}}],[\"节省内存\",{\"1\":{\"111\":1}}],[\"意义二\",{\"1\":{\"111\":1}}],[\"意义一\",{\"1\":{\"111\":1}}],[\"函数参数使用值还是指针\",{\"0\":{\"131\":1}}],[\"函数返回的一个字符串的文本值\",{\"1\":{\"117\":1}}],[\"函数\",{\"1\":{\"112\":1}}],[\"函数可以直接修改原始数据\",{\"1\":{\"111\":1}}],[\"函数追加数据\",{\"1\":{\"73\":1}}],[\"树和图\",{\"1\":{\"111\":1}}],[\"容易编码\",{\"1\":{\"111\":1}}],[\"容量为\",{\"1\":{\"72\":1}}],[\"输出结果如下\",{\"1\":{\"125\":1}}],[\"输出\",{\"1\":{\"110\":3,\"115\":2,\"123\":1}}],[\"输出值\",{\"1\":{\"44\":1,\"63\":1}}],[\"从而提高程序的灵活性和效率\",{\"1\":{\"111\":1}}],[\"从而实现高效的数据存储和检索\",{\"1\":{\"111\":1}}],[\"从变量中取地址\",{\"1\":{\"110\":1}}],[\"从高到低为\",{\"1\":{\"55\":1}}],[\"地址运算符\",{\"1\":{\"110\":1}}],[\"学习指针\",{\"1\":{\"110\":1}}],[\"普通变量存储数据\",{\"1\":{\"110\":1}}],[\"普通导入需要使用包名\",{\"1\":{\"18\":1}}],[\"答案\",{\"1\":{\"110\":1,\"111\":1,\"112\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"120\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"133\":1,\"134\":1,\"135\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1}}],[\"基本类型\",{\"1\":{\"114\":1}}],[\"基础\",{\"0\":{\"108\":1}}],[\"基于字节流的传输层通信协议\",{\"1\":{\"104\":1}}],[\"基于系统架构\",{\"1\":{\"37\":1}}],[\"才会断开连接\",{\"1\":{\"107\":1}}],[\"开始\",{\"1\":{\"130\":1}}],[\"开始翻倍增长\",{\"1\":{\"107\":1}}],[\"开头为无符号数\",{\"1\":{\"37\":1}}],[\"开头为有符号数\",{\"1\":{\"37\":1}}],[\"间隔时间从\",{\"1\":{\"107\":1}}],[\"次\",{\"1\":{\"107\":1}}],[\"假如客户端发送\",{\"1\":{\"107\":1}}],[\"假设\",{\"1\":{\"52\":1}}],[\"假设有两张表\",{\"1\":{\"3\":1}}],[\"因此元素的地址会不断变化\",{\"1\":{\"139\":1}}],[\"因此超时时间为\",{\"1\":{\"107\":1}}],[\"因此需要两端分别在传输完成后发送断开连接的指令\",{\"1\":{\"107\":1}}],[\"因此\",{\"1\":{\"107\":1}}],[\"因为没有加密和解密的过程\",{\"1\":{\"98\":1}}],[\"因为数据在传输过程中需要进行加密和解密\",{\"1\":{\"98\":1}}],[\"因为数据在传输过程中会被加密\",{\"1\":{\"98\":1}}],[\"因为数据在传输过程中没有加密\",{\"1\":{\"98\":1}}],[\"就是未命名的常量\",{\"1\":{\"117\":1}}],[\"就是\",{\"1\":{\"114\":1}}],[\"就是字面量\",{\"1\":{\"114\":2}}],[\"就是基本类型字面量\",{\"1\":{\"114\":1}}],[\"就是同步序列号\",{\"1\":{\"107\":1}}],[\"就可以确定之前传递的数据包已经被正确接收\",{\"1\":{\"105\":1}}],[\"建立连接的过程就是同步序列号的过程\",{\"1\":{\"107\":1}}],[\"详情\",{\"1\":{\"107\":3,\"125\":1}}],[\"向服务器发送\",{\"1\":{\"107\":1}}],[\"向主机进程提供通用的数据传输服务\",{\"1\":{\"93\":1}}],[\"四次挥手\",{\"1\":{\"107\":1}}],[\"四层模型\",{\"1\":{\"94\":1}}],[\"每个元素前面可以选择性的带一个相关key\",{\"1\":{\"118\":1}}],[\"每发送一个syn\",{\"1\":{\"107\":1}}],[\"每次请求都要建立连接\",{\"1\":{\"100\":1}}],[\"服务端发起自己的fin=1\",{\"1\":{\"107\":1}}],[\"服务端发送自己的syn段作为应答\",{\"1\":{\"107\":1}}],[\"服务端将x+2值加1作为ack序号值\",{\"1\":{\"107\":1}}],[\"服务器会尝试重发\",{\"1\":{\"107\":1}}],[\"服务器推送\",{\"1\":{\"100\":1}}],[\"服务器不可用表示服务器当前很忙\",{\"1\":{\"97\":1}}],[\"服务器返回此状态码时\",{\"1\":{\"97\":1}}],[\"服务器处理成功\",{\"1\":{\"97\":1}}],[\"服务器无法处理\",{\"1\":{\"97\":1}}],[\"三次握手的目的就是使客户端\",{\"1\":{\"107\":1}}],[\"三次握手过程\",{\"1\":{\"107\":1}}],[\"三次握手\",{\"0\":{\"107\":1}}],[\"状态机\",{\"0\":{\"106\":1}}],[\"状态码表示客户端请求报文正确\",{\"1\":{\"97\":1}}],[\"状态码表示客户端请求的资源发送了变动\",{\"1\":{\"97\":1}}],[\"状态码表示客户端发送的报文有误\",{\"1\":{\"97\":1}}],[\"状态码\",{\"0\":{\"97\":1},\"1\":{\"97\":1}}],[\"还可以存放时间戳数据\",{\"1\":{\"105\":1}}],[\"还可以使用\",{\"1\":{\"80\":1}}],[\"选项\",{\"1\":{\"105\":1}}],[\"选择\",{\"1\":{\"97\":1}}],[\"选择合适的路由和交换结点\",{\"1\":{\"93\":1}}],[\"紧急数据指针\",{\"1\":{\"105\":1}}],[\"紧急数据的最后一个字节由紧急数据指针指出\",{\"1\":{\"105\":1}}],[\"校验和覆盖了整个tcp报文段\",{\"1\":{\"105\":1}}],[\"校验和\",{\"1\":{\"105\":1}}],[\"代码实战解析\",{\"1\":{\"141\":1}}],[\"代码转换\",{\"1\":{\"94\":1}}],[\"代表该数据包为紧急数据包\",{\"1\":{\"105\":1}}],[\"单位32位\",{\"1\":{\"105\":1}}],[\"单个条件\",{\"1\":{\"30\":1}}],[\"单个导入\",{\"1\":{\"18\":1}}],[\"简称ack\",{\"1\":{\"105\":1}}],[\"简称为seq\",{\"1\":{\"105\":1}}],[\"当无类型的常量被赋值给一个变量的时\",{\"1\":{\"115\":1}}],[\"当urg=1时有效\",{\"1\":{\"105\":1}}],[\"当发送端收到这个确认码时\",{\"1\":{\"105\":1}}],[\"当根节点被\",{\"1\":{\"86\":1}}],[\"确认号\",{\"1\":{\"105\":1}}],[\"确保双方身份正确\",{\"1\":{\"102\":1}}],[\"使接收端可以重新组合tcp数据\",{\"1\":{\"105\":1}}],[\"使用以下方式\",{\"1\":{\"140\":1}}],[\"使用过\",{\"0\":{\"137\":1}}],[\"使用指针传递的好处是直接传递变量的地址\",{\"1\":{\"131\":1}}],[\"使用值传递就不太合适\",{\"1\":{\"131\":1}}],[\"使用组合字面量会简单一些\",{\"1\":{\"118\":1}}],[\"使用者可以信任并使用该证书中的信息\",{\"1\":{\"102\":1}}],[\"使用者使用获取到的颁发者的公钥解密数字签名\",{\"1\":{\"102\":1}}],[\"使用者使用数字证书中的指纹算法重新计算数字证书相关内容\",{\"1\":{\"102\":1}}],[\"使用者通过某种方式\",{\"1\":{\"102\":1}}],[\"使用对称密钥加密请求的明文内容b\",{\"1\":{\"99\":1}}],[\"使用get请求重定向\",{\"1\":{\"97\":1}}],[\"使用get和post请求查看\",{\"1\":{\"97\":1}}],[\"使用代理\",{\"1\":{\"97\":1}}],[\"使用括号\",{\"1\":{\"21\":1}}],[\"使用方法\",{\"1\":{\"18\":1}}],[\"使用其公开的标识符\",{\"1\":{\"18\":1}}],[\"使用\",{\"0\":{\"139\":1},\"1\":{\"12\":2,\"18\":1,\"29\":1,\"30\":1,\"44\":1,\"46\":1,\"58\":2,\"59\":3,\"60\":5,\"61\":3,\"63\":2,\"64\":4,\"67\":1,\"70\":1,\"72\":2,\"73\":1,\"78\":2,\"79\":1,\"82\":1,\"88\":1,\"91\":1,\"100\":1,\"140\":1}}],[\"大于ip数据包的允许程度\",{\"1\":{\"105\":1}}],[\"序列号就会加1\",{\"1\":{\"107\":1}}],[\"序列号字段的值是本报文段发送的数据的第一个字节的序列号\",{\"1\":{\"105\":1}}],[\"序列号\",{\"1\":{\"105\":1}}],[\"目标端口\",{\"1\":{\"105\":1}}],[\"目的是更方便应用从网络中接收的数据\",{\"1\":{\"93\":1}}],[\"源端口\",{\"1\":{\"105\":1}}],[\"头部长度\",{\"1\":{\"105\":1}}],[\"头部\",{\"1\":{\"105\":1}}],[\"头部结构\",{\"0\":{\"105\":1}}],[\"头部压缩\",{\"1\":{\"100\":1}}],[\"身份确定\",{\"1\":{\"102\":1}}],[\"身份证号\",{\"1\":{\"3\":1}}],[\"加密数据确保数据安全\",{\"1\":{\"102\":1}}],[\"作用是什么\",{\"1\":{\"107\":2}}],[\"作用\",{\"1\":{\"102\":1}}],[\"持有者的公钥\",{\"1\":{\"102\":1}}],[\"对内存占用会多一些\",{\"1\":{\"131\":1}}],[\"对于常见的类型都可以使用值传递\",{\"1\":{\"131\":1}}],[\"对比两个指纹α和β\",{\"1\":{\"102\":1}}],[\"对网站\",{\"1\":{\"101\":1}}],[\"生成一个新的指纹β\",{\"1\":{\"102\":1}}],[\"生成证书摘要\",{\"1\":{\"102\":1}}],[\"验签过程\",{\"1\":{\"102\":1}}],[\"颁发者将签名过的数字证书和公钥一起交给证书持有者\",{\"1\":{\"102\":1}}],[\"颁发者生成一对私钥和公钥\",{\"1\":{\"102\":1}}],[\"形成一个签名过的数字证书\",{\"1\":{\"102\":1}}],[\"α\",{\"1\":{\"102\":1}}],[\"证书发行者对证书的签名\",{\"1\":{\"102\":1}}],[\"证书所有人的公开密钥\",{\"1\":{\"102\":1}}],[\"证书所有人的名称\",{\"1\":{\"102\":1}}],[\"证书所使用的签名算法\",{\"1\":{\"102\":1}}],[\"证书的有效期\",{\"1\":{\"102\":1}}],[\"证书的发行机构名称\",{\"1\":{\"102\":1}}],[\"证书的序列号\",{\"1\":{\"102\":1}}],[\"证书的版本信息\",{\"1\":{\"102\":1}}],[\"证书的用途是不是匹配client请求的站点\",{\"1\":{\"99\":1}}],[\"证书包含的信息\",{\"1\":{\"102\":1}}],[\"证书持有者公钥等在内的信息\",{\"1\":{\"102\":1}}],[\"证书持有者信息\",{\"1\":{\"102\":1}}],[\"证书有效期\",{\"1\":{\"102\":1}}],[\"计算包括证书颁发者信息\",{\"1\":{\"102\":1}}],[\"计算机网络基础\",{\"0\":{\"92\":1}}],[\"利用签名哈希算法\",{\"1\":{\"102\":1}}],[\"签名过程\",{\"1\":{\"102\":1}}],[\"另外\",{\"1\":{\"101\":1}}],[\"另一种初始化方式\",{\"1\":{\"39\":1}}],[\"保护电子邮件在传输和接收过程中的安全²\",{\"1\":{\"101\":1}}],[\"保留关键字\",{\"0\":{\"13\":1,\"14\":1}}],[\"公钥用于签名验证和加密\",{\"1\":{\"101\":1}}],[\"公开变量\",{\"1\":{\"21\":1}}],[\"私钥主要用于签名和解密\",{\"1\":{\"101\":1}}],[\"私有变量\",{\"1\":{\"21\":1}}],[\"其他\",{\"0\":{\"119\":1}}],[\"其他符号\",{\"0\":{\"54\":1}}],[\"其账户中的信息与资金安全仍然能得到有效的保障\",{\"1\":{\"101\":1}}],[\"其中密钥包括私钥和公钥\",{\"1\":{\"101\":1}}],[\"它们由字面量的类型后紧跟大括号及元素列表\",{\"1\":{\"118\":1}}],[\"它们类似于网站和用户的安全徽章\",{\"1\":{\"101\":1}}],[\"它没有具体的名称\",{\"1\":{\"114\":1}}],[\"它告诉系统此报文段中有紧急数据\",{\"1\":{\"105\":1}}],[\"它提供了一种在互联网上验证身份的方式\",{\"1\":{\"101\":1}}],[\"它的计时范围为1950\",{\"1\":{\"102\":1}}],[\"它的上一级证书是否有效\",{\"1\":{\"99\":1}}],[\"它的所有派生节点也会被终止\",{\"1\":{\"86\":1}}],[\"算法对\",{\"1\":{\"100\":1}}],[\"算术运算符\",{\"0\":{\"49\":1}}],[\"队头阻塞\",{\"1\":{\"100\":1}}],[\"连接上可以并发多个\",{\"1\":{\"100\":1}}],[\"连接的重复建立和断开所造成的额外开销\",{\"1\":{\"100\":1}}],[\"连接方式\",{\"1\":{\"100\":1}}],[\"减少了\",{\"1\":{\"100\":1}}],[\"长连接\",{\"1\":{\"100\":1}}],[\"长度及容量\",{\"0\":{\"72\":1}}],[\"长度\",{\"0\":{\"67\":1}}],[\"区别\",{\"1\":{\"100\":1}}],[\"得到解密后的指纹α\",{\"1\":{\"102\":1}}],[\"得到的加密数据即为颁发者的数字签名γ\",{\"1\":{\"102\":1}}],[\"得到明文内容b\",{\"1\":{\"99\":1}}],[\"得到明文内容a\",{\"1\":{\"99\":1}}],[\"得到对称密钥\",{\"1\":{\"99\":1}}],[\"至此\",{\"1\":{\"99\":1}}],[\"发给server\",{\"1\":{\"99\":1}}],[\"发送方的端口号\",{\"1\":{\"105\":1}}],[\"发送给client\",{\"1\":{\"99\":1}}],[\"发送消息\",{\"1\":{\"79\":1}}],[\"发送接收数据\",{\"0\":{\"78\":1}}],[\"然后使用私钥对指纹进行加密\",{\"1\":{\"102\":1}}],[\"然后server使用对称密钥解密密文\",{\"1\":{\"99\":1}}],[\"然后用证书的公钥加密这个对称密钥\",{\"1\":{\"99\":1}}],[\"然后将结果再\",{\"1\":{\"12\":1}}],[\"直到验证到根证书\",{\"1\":{\"99\":1}}],[\"直接采用随机顺序返回\",{\"1\":{\"139\":1}}],[\"直接初始化\",{\"1\":{\"70\":1}}],[\"直接声明\",{\"1\":{\"70\":1}}],[\"比如是否在有效期内\",{\"1\":{\"99\":1}}],[\"而深拷贝会改变地址的内存内的数组值\",{\"1\":{\"125\":1}}],[\"而结构体\",{\"1\":{\"118\":1}}],[\"而下面这样就没错\",{\"1\":{\"117\":1}}],[\"而这种字面量是不可寻址的\",{\"1\":{\"117\":1}}],[\"而有类型常量在赋值的时\",{\"1\":{\"115\":1}}],[\"而不需要返回值\",{\"1\":{\"111\":1}}],[\"而不是复制整个数据\",{\"1\":{\"111\":1}}],[\"而不用按照顺序一一对应\",{\"1\":{\"100\":1}}],[\"而指针变量存储的是数据的地址\",{\"1\":{\"110\":1}}],[\"而加密过程是使用了非对称加密实现\",{\"1\":{\"99\":1}}],[\"而是一个副本\",{\"1\":{\"97\":1}}],[\"协议会对传输的数据进行加密\",{\"1\":{\"99\":1}}],[\"协程可以很方便地终止\",{\"1\":{\"84\":1,\"137\":1}}],[\"工作原理\",{\"0\":{\"99\":1}}],[\"速度\",{\"1\":{\"98\":1}}],[\"防止被第三方获取\",{\"1\":{\"98\":1}}],[\"本身不是安全的\",{\"1\":{\"98\":1}}],[\"本栏目主要提供\",{\"1\":{\"1\":1}}],[\"安全性\",{\"1\":{\"98\":1}}],[\"端口是\",{\"1\":{\"98\":2}}],[\"端口\",{\"1\":{\"98\":1}}],[\"特性\",{\"1\":{\"98\":1,\"100\":1}}],[\"由于\",{\"1\":{\"124\":1}}],[\"由运行结果得出他们相等\",{\"1\":{\"116\":1}}],[\"由用户自定义\",{\"1\":{\"101\":1}}],[\"由作为代理或网关的服务器使用\",{\"1\":{\"97\":1}}],[\"由无序的键值对组成\",{\"1\":{\"25\":1}}],[\"暂时无法响应服务器\",{\"1\":{\"97\":1}}],[\"访问后端服务器发生了错误\",{\"1\":{\"97\":1}}],[\"禁止访问表示服务器禁止访问资源\",{\"1\":{\"97\":1}}],[\"未执行\",{\"1\":{\"133\":1}}],[\"未初始化的\",{\"0\":{\"133\":1}}],[\"未命名常量\",{\"1\":{\"114\":1}}],[\"未命名常量是一种特殊的常量\",{\"1\":{\"114\":1}}],[\"未找到表示请求的资源在服务器上不存在或未找到\",{\"1\":{\"97\":1}}],[\"未授权缺失或错误的认证\",{\"1\":{\"97\":1}}],[\"未修改\",{\"1\":{\"97\":1}}],[\"错误\",{\"1\":{\"135\":1}}],[\"错误请求表示客户端请求的报文有错误\",{\"1\":{\"97\":1}}],[\"错误处理\",{\"0\":{\"56\":1}}],[\"临时重定向与302类似\",{\"1\":{\"97\":1}}],[\"临时移动与301类似\",{\"1\":{\"97\":1}}],[\"客户端确认\",{\"1\":{\"107\":1}}],[\"客户端发送fin=1\",{\"1\":{\"107\":1}}],[\"客户端发送syn=1\",{\"1\":{\"107\":1}}],[\"客户端将y+1作为返回的ack数值\",{\"1\":{\"107\":1}}],[\"客户端通常会缓存访问过的资源\",{\"1\":{\"97\":1}}],[\"客户端应继续使用原有uri\",{\"1\":{\"97\":1}}],[\"查看其它地址与301类似\",{\"1\":{\"97\":1}}],[\"查询条件\",{\"1\":{\"12\":1}}],[\"今后任何新的请求都应使用新的uri代替\",{\"1\":{\"97\":1}}],[\"返回信息会包括新的uri\",{\"1\":{\"97\":1}}],[\"返回特定服务器地址所支持的\",{\"1\":{\"96\":1}}],[\"永久移动请求的资源已被永久的移动到新uri\",{\"1\":{\"97\":1}}],[\"多个\",{\"0\":{\"129\":1}}],[\"多个导入\",{\"1\":{\"18\":1}}],[\"多路复用\",{\"1\":{\"100\":1}}],[\"多种选择请求的资源可包括多个位置\",{\"1\":{\"97\":1}}],[\"部分内容服务器成功处理了部分get请求\",{\"1\":{\"97\":1}}],[\"应尽快传送\",{\"1\":{\"105\":1}}],[\"应重置文档视图\",{\"1\":{\"97\":1}}],[\"应用层\",{\"1\":{\"93\":1,\"94\":7}}],[\"浏览器访问\",{\"1\":{\"102\":1}}],[\"浏览器和web服务器之间传输的数据进行加密和保护\",{\"1\":{\"101\":1}}],[\"浏览器会自动定向到新uri\",{\"1\":{\"97\":1}}],[\"浏览器\",{\"1\":{\"97\":2}}],[\"用户终端\",{\"1\":{\"97\":1}}],[\"用于给任意的类型分配内存地址\",{\"1\":{\"126\":1}}],[\"用于表示\",{\"1\":{\"122\":2}}],[\"用于流量控制\",{\"1\":{\"105\":1}}],[\"用于对线上数据进行加密\",{\"1\":{\"101\":1}}],[\"用于从万维网服务器传输超文本到本地浏览器的传送协议\",{\"1\":{\"98\":1}}],[\"用于替换原数据\",{\"1\":{\"96\":1}}],[\"用于数据提交和文件上传\",{\"1\":{\"96\":1}}],[\"用于提交信息到目标地址\",{\"1\":{\"96\":1}}],[\"用于获取数据\",{\"1\":{\"96\":1}}],[\"用于端到端数据的通信\",{\"1\":{\"76\":1}}],[\"用于存储\",{\"1\":{\"37\":2}}],[\"用于创建协程\",{\"1\":{\"35\":1}}],[\"用于函数\",{\"1\":{\"34\":1}}],[\"用于终止函数的执行并返回0个或多个返回值\",{\"1\":{\"34\":1}}],[\"用于跳过当前循环的剩余语句\",{\"1\":{\"30\":1}}],[\"用于循环执行动作\",{\"1\":{\"30\":1}}],[\"用于根据不同条件执行不同的动作\",{\"1\":{\"29\":1}}],[\"用于条件判断\",{\"1\":{\"28\":1}}],[\"用于接收\",{\"1\":{\"23\":1}}],[\"用于发送方和接收方协商最大报文长度\",{\"1\":{\"105\":1}}],[\"用于发送\",{\"1\":{\"23\":1}}],[\"用于发送和接收\",{\"1\":{\"23\":1}}],[\"用于定义\",{\"1\":{\"84\":1}}],[\"用于定义变量类型\",{\"1\":{\"20\":1}}],[\"用于定义包名\",{\"1\":{\"19\":1}}],[\"用于导入包\",{\"1\":{\"18\":1}}],[\"用于声明结构体\",{\"1\":{\"26\":1}}],[\"用于声明集合\",{\"1\":{\"25\":1}}],[\"用于声明接口\",{\"1\":{\"24\":1}}],[\"用于声明信道\",{\"1\":{\"23\":1}}],[\"用于声明公开或者私有变量\",{\"1\":{\"21\":1}}],[\"用于声明函数\",{\"1\":{\"17\":1}}],[\"用于声明常量\",{\"1\":{\"16\":1}}],[\"用于修饰特殊的\",{\"1\":{\"14\":1}}],[\"用于只返回匹配的行\",{\"1\":{\"8\":1}}],[\"但它们之间有一些区别\",{\"1\":{\"120\":1}}],[\"但服务器必须按照接收请求的顺序发送响应\",{\"1\":{\"100\":1}}],[\"但资源只是临时被移动\",{\"1\":{\"97\":1}}],[\"但返回的meta信息不在原始的服务器\",{\"1\":{\"97\":1}}],[\"但是服务器处理时内部发生了错误\",{\"1\":{\"97\":1}}],[\"但是只返回响应头\",{\"1\":{\"96\":1}}],[\"但是建议在初始化的时候就配置容量\",{\"1\":{\"25\":1}}],[\"已接受\",{\"1\":{\"97\":1}}],[\"已创建\",{\"1\":{\"97\":1}}],[\"只有\",{\"1\":{\"124\":1}}],[\"只有用户自己知道\",{\"1\":{\"101\":1}}],[\"只能存储\",{\"1\":{\"122\":1}}],[\"只能从低版本切换到高版本\",{\"1\":{\"97\":1}}],[\"只存在于syn报文\",{\"1\":{\"105\":1}}],[\"只要结构体实现了\",{\"1\":{\"57\":1}}],[\"切换为\",{\"1\":{\"97\":1}}],[\"切换传输协议\",{\"1\":{\"97\":1}}],[\"切换协议\",{\"1\":{\"97\":1}}],[\"切片有容量\",{\"1\":{\"127\":1}}],[\"切片是引用传递\",{\"1\":{\"127\":1}}],[\"切片是动态的数组\",{\"1\":{\"43\":1}}],[\"切片的长度是动态的\",{\"1\":{\"127\":1}}],[\"切片的组合字面量方式如下\",{\"1\":{\"118\":1}}],[\"切片初始化\",{\"1\":{\"125\":2}}],[\"切片和map的组合字面量方式如下\",{\"1\":{\"118\":1}}],[\"切片和map构造值\",{\"1\":{\"118\":1}}],[\"切片及其内部数据\",{\"1\":{\"112\":1}}],[\"切片截取\",{\"0\":{\"71\":1}}],[\"切片\",{\"0\":{\"43\":1,\"69\":1}}],[\"名称\",{\"1\":{\"97\":1}}],[\"也不会出现并发问题\",{\"1\":{\"131\":1}}],[\"也改变\",{\"1\":{\"125\":1}}],[\"也就是字符串字面量\",{\"1\":{\"117\":1}}],[\"也就是错误码的含义\",{\"1\":{\"97\":1}}],[\"也就是重定向\",{\"1\":{\"97\":1}}],[\"也可用于测试服务器支持的功能\",{\"1\":{\"96\":1}}],[\"也可以这样初始化\",{\"1\":{\"64\":1,\"65\":1}}],[\"需要保留的值放置到一个新的\",{\"1\":{\"141\":1}}],[\"需要分别发送\",{\"1\":{\"107\":1}}],[\"需要客户端用新的\",{\"1\":{\"97\":1}}],[\"需搭配\",{\"1\":{\"29\":1}}],[\"理解\",{\"1\":{\"97\":1}}],[\"成功\",{\"1\":{\"97\":1}}],[\"继续\",{\"1\":{\"97\":1}}],[\"继续处理\",{\"1\":{\"97\":1}}],[\"继续执行下一轮循环\",{\"1\":{\"30\":1}}],[\"含义\",{\"1\":{\"97\":1}}],[\"回显服务器收到的请求\",{\"1\":{\"96\":1}}],[\"与服务器建立隧道\",{\"1\":{\"96\":1}}],[\"删除后\",{\"0\":{\"141\":1}}],[\"删除指定的资源\",{\"1\":{\"96\":1}}],[\"删除键值\",{\"0\":{\"65\":1},\"1\":{\"65\":1}}],[\"提交更新的信息\",{\"1\":{\"96\":1}}],[\"提供加密处理\",{\"1\":{\"98\":1}}],[\"提供端对端的接口\",{\"1\":{\"94\":1}}],[\"提供了多种创建\",{\"1\":{\"58\":1}}],[\"提供了\",{\"1\":{\"57\":1,\"59\":1}}],[\"类似\",{\"1\":{\"96\":1}}],[\"类型能表示的值是有限的\",{\"1\":{\"124\":1}}],[\"类型不同\",{\"0\":{\"121\":1}}],[\"类型不同会报错\",{\"1\":{\"115\":1}}],[\"类型的接口\",{\"1\":{\"57\":1}}],[\"类型的数据的信道\",{\"1\":{\"23\":3}}],[\"类型名称为\",{\"1\":{\"40\":1,\"41\":1}}],[\"类型\",{\"1\":{\"14\":1,\"37\":2,\"38\":1,\"39\":1,\"47\":1,\"57\":1,\"124\":1,\"125\":2}}],[\"请求\",{\"1\":{\"100\":1}}],[\"请求将会被处理\",{\"1\":{\"97\":1}}],[\"请求成功\",{\"1\":{\"97\":1}}],[\"请求一个指定资源\",{\"1\":{\"96\":1}}],[\"请求方法\",{\"0\":{\"96\":1},\"1\":{\"96\":1}}],[\"种请求方式\",{\"1\":{\"96\":1}}],[\"额外支持\",{\"1\":{\"96\":1}}],[\"虚拟终端等\",{\"1\":{\"94\":1}}],[\"虚数\",{\"1\":{\"39\":2}}],[\"文件服务\",{\"1\":{\"94\":1}}],[\"文件传输\",{\"1\":{\"94\":1}}],[\"电子邮件\",{\"1\":{\"94\":1}}],[\"五层模型\",{\"1\":{\"94\":1}}],[\"重置内容\",{\"1\":{\"97\":1}}],[\"重新发送请求获取资源\",{\"1\":{\"97\":1}}],[\"重点关注http协议\",{\"1\":{\"93\":1}}],[\"重要\",{\"1\":{\"12\":1}}],[\"维持和终止通信\",{\"1\":{\"93\":1}}],[\"负责在网络中的两节点之间建立\",{\"1\":{\"93\":1}}],[\"要保证并发安全\",{\"1\":{\"140\":1}}],[\"要用\",{\"1\":{\"117\":1}}],[\"要关注的是ip协议\",{\"1\":{\"93\":1}}],[\"要学习表连接\",{\"1\":{\"4\":1}}],[\"此层的数据称为数据包\",{\"1\":{\"93\":1}}],[\"能让数据及时传送\",{\"1\":{\"93\":1}}],[\"网关超时网关超时\",{\"1\":{\"97\":1}}],[\"网关错误通常是服务器作为网关或代理时返回的错误码\",{\"1\":{\"97\":1}}],[\"网络接口层\",{\"1\":{\"94\":2}}],[\"网络层\",{\"1\":{\"93\":1,\"94\":3}}],[\"网卡也会在这层工作\",{\"1\":{\"93\":1}}],[\"主要有两个运算符号\",{\"1\":{\"110\":1}}],[\"主要用户加密电子邮件的传输\",{\"1\":{\"101\":1}}],[\"主要用于\",{\"1\":{\"126\":1}}],[\"主要用于部分更新\",{\"1\":{\"96\":1}}],[\"主要用于测试或诊断\",{\"1\":{\"96\":1}}],[\"主要负责数据格式的转换\",{\"1\":{\"93\":1}}],[\"主要实现相邻节点间比特流的透明传输\",{\"1\":{\"93\":1}}],[\"主键不能为空\",{\"1\":{\"3\":1}}],[\"主键和唯一键的区别\",{\"1\":{\"3\":1}}],[\"主键是数据列中用来唯一标识的字段\",{\"1\":{\"3\":1}}],[\"主键\",{\"1\":{\"3\":2}}],[\"物理层定义了物理设备的标准\",{\"1\":{\"93\":1}}],[\"物理层\",{\"1\":{\"93\":1,\"94\":2}}],[\"功能未实现表示客户端请求的功能还不支持\",{\"1\":{\"97\":1}}],[\"功能\",{\"1\":{\"93\":1,\"94\":1}}],[\"功能修饰\",{\"0\":{\"33\":1},\"1\":{\"14\":1}}],[\"层级\",{\"1\":{\"93\":1}}],[\"即客户端和服务端都可以主动发送消息\",{\"1\":{\"107\":1}}],[\"即\",{\"1\":{\"107\":2}}],[\"即x\",{\"1\":{\"107\":1}}],[\"即tcp头部和tcp数据\",{\"1\":{\"105\":1}}],[\"即值为5\",{\"1\":{\"105\":1}}],[\"即利用一对密钥实施加密和解密\",{\"1\":{\"101\":1}}],[\"即可手动终止\",{\"1\":{\"91\":1}}],[\"即若任意单个或多个字段如果也能唯一标识数据列\",{\"1\":{\"3\":1}}],[\"执行的顺序类似堆栈\",{\"1\":{\"129\":1}}],[\"执行\",{\"1\":{\"91\":1}}],[\"执行完一个\",{\"1\":{\"29\":1}}],[\"所颁发\",{\"1\":{\"101\":1}}],[\"所以遍历是无序的\",{\"1\":{\"139\":1}}],[\"所以改变遍历的变量是不会有影响的\",{\"1\":{\"128\":1}}],[\"所以对于切片来说\",{\"1\":{\"125\":1}}],[\"所以想表示中文只能使用\",{\"1\":{\"124\":1}}],[\"所以无法提供给客户端\",{\"1\":{\"97\":1}}],[\"所以为\",{\"1\":{\"60\":1}}],[\"所请求的资源必须通过代理访问\",{\"1\":{\"97\":1}}],[\"所请求的资源未修改\",{\"1\":{\"97\":1}}],[\"所有的数据\",{\"1\":{\"89\":1}}],[\"同样的\",{\"1\":{\"118\":1}}],[\"同样指明自己的isn\",{\"1\":{\"107\":1}}],[\"同样是空白\",{\"1\":{\"87\":1}}],[\"同时添加数据\",{\"0\":{\"128\":1}}],[\"同时还包含一个ack=y+1表示确认对方最近一次发过来的数据\",{\"1\":{\"107\":1}}],[\"同时还有两个等价类型\",{\"1\":{\"37\":1}}],[\"同时\",{\"1\":{\"102\":1}}],[\"同时保留父级\",{\"1\":{\"89\":1}}],[\"同时发送过来数据\",{\"1\":{\"80\":1}}],[\"同时未匹配的其他数据也会返回\",{\"1\":{\"12\":1}}],[\"同时被驱动表未匹配的其他数据也会返回\",{\"1\":{\"11\":1}}],[\"同时驱动表未匹配的其他数据也会返回\",{\"1\":{\"10\":1}}],[\"根节点的数据也会被所有派生节点共享\",{\"1\":{\"86\":1}}],[\"根节点和派生节点\",{\"0\":{\"86\":1}}],[\"根据\",{\"1\":{\"21\":1}}],[\"终止协程\",{\"1\":{\"84\":1,\"137\":1}}],[\"超时处理\",{\"1\":{\"137\":1}}],[\"超时会发生什么\",{\"1\":{\"107\":1}}],[\"超时管理\",{\"1\":{\"84\":1}}],[\"超键是能唯一标识数据列的所有属性集\",{\"1\":{\"3\":1}}],[\"超键\",{\"1\":{\"3\":2}}],[\"定时器就是通过\",{\"1\":{\"81\":1}}],[\"定义\",{\"1\":{\"98\":1}}],[\"定义为指针\",{\"1\":{\"46\":1}}],[\"定义一个新的类型\",{\"1\":{\"20\":1}}],[\"定义等价类型\",{\"1\":{\"20\":1}}],[\"定义结构\",{\"1\":{\"20\":1}}],[\"定义接口\",{\"1\":{\"20\":1}}],[\"完成操作\",{\"1\":{\"80\":1}}],[\"设置为\",{\"1\":{\"141\":1}}],[\"设置值\",{\"1\":{\"44\":1,\"63\":1}}],[\"设定默认执行的动作\",{\"1\":{\"80\":1}}],[\"通常这将引起应用程序发起自己的关闭操作\",{\"1\":{\"107\":1}}],[\"通常发生了某些错误\",{\"1\":{\"105\":1}}],[\"通常我们会使用\",{\"1\":{\"80\":1}}],[\"通过动态内存分配\",{\"1\":{\"111\":1}}],[\"通过传递指针\",{\"1\":{\"111\":1}}],[\"通过指针\",{\"1\":{\"111\":2}}],[\"通过指针可以在函数中修改函数外的数据\",{\"1\":{\"46\":1}}],[\"通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源\",{\"1\":{\"97\":1}}],[\"通过使用\",{\"1\":{\"84\":1,\"137\":2}}],[\"通过配置超时时间\",{\"1\":{\"84\":1}}],[\"通过\",{\"1\":{\"44\":1,\"63\":1,\"98\":1,\"107\":1}}],[\"后会终止循环\",{\"1\":{\"79\":1}}],[\"后直接执行下一个\",{\"1\":{\"29\":1}}],[\"读取任何\",{\"1\":{\"133\":1}}],[\"读取\",{\"1\":{\"79\":1}}],[\"读取已关闭的\",{\"1\":{\"79\":1}}],[\"带缓冲\",{\"1\":{\"77\":1}}],[\"带缓冲信道\",{\"1\":{\"23\":1}}],[\"之所以需要四次挥手\",{\"1\":{\"107\":1}}],[\"之间数据共享\",{\"1\":{\"76\":1}}],[\"之前变量的最终结果\",{\"1\":{\"34\":1}}],[\"之前执行意味着可以使用\",{\"1\":{\"34\":1}}],[\"之前或执行完之后执行动作\",{\"1\":{\"34\":1}}],[\"常量分为有类型常量和无类型常量\",{\"1\":{\"115\":1}}],[\"常量\",{\"1\":{\"112\":1}}],[\"常量一经声明就不能被更改\",{\"1\":{\"16\":1}}],[\"常见状态码\",{\"1\":{\"97\":1}}],[\"常见的协议有\",{\"1\":{\"93\":1}}],[\"常用于以下几种情况\",{\"1\":{\"84\":1}}],[\"常用于\",{\"1\":{\"76\":1}}],[\"信道\",{\"0\":{\"75\":1}}],[\"添加判断代码判断是否溢出\",{\"1\":{\"130\":1}}],[\"添加数据\",{\"1\":{\"74\":1}}],[\"添加键值\",{\"1\":{\"64\":1}}],[\"给\",{\"1\":{\"74\":1}}],[\"实现了定时结果的返回\",{\"1\":{\"81\":1}}],[\"实际上共用一个内存地址的数据\",{\"1\":{\"74\":1}}],[\"实数为浮点数\",{\"1\":{\"39\":1}}],[\"克隆切片\",{\"0\":{\"74\":1}}],[\"追加多条数据\",{\"1\":{\"73\":1}}],[\"追加一条数据\",{\"1\":{\"73\":1}}],[\"追加数据\",{\"0\":{\"73\":1}}],[\"下面这些基本类型赋值的文本\",{\"1\":{\"114\":1}}],[\"下面的例子中的\",{\"1\":{\"14\":1}}],[\"下默认重试\",{\"1\":{\"107\":1}}],[\"下一个请求必须在前一个请求响应到达之前才能发送\",{\"1\":{\"100\":1}}],[\"下标的数据\",{\"1\":{\"71\":1}}],[\"第三种方式\",{\"1\":{\"70\":1}}],[\"第二种方式\",{\"1\":{\"70\":1}}],[\"第二个表为被驱动表\",{\"1\":{\"7\":1}}],[\"第一种方式\",{\"1\":{\"70\":1}}],[\"解除或建立与别的接点的联系\",{\"1\":{\"94\":1}}],[\"解决不同系统之间通信语法问题\",{\"1\":{\"93\":1}}],[\"解决\",{\"1\":{\"68\":1,\"100\":1}}],[\"解析后可以得到数字签名γ和数字证书\",{\"1\":{\"102\":1}}],[\"解析\",{\"1\":{\"18\":1}}],[\"判断是否发送成功\",{\"1\":{\"107\":1}}],[\"判断\",{\"0\":{\"66\":1},\"1\":{\"66\":1}}],[\"判断错误是否是目标错误\",{\"1\":{\"60\":1}}],[\"并赋值给当前的\",{\"1\":{\"141\":1}}],[\"并不是很常用\",{\"1\":{\"126\":1}}],[\"并不是客户端的请求出错\",{\"1\":{\"97\":1}}],[\"并返回该类型的指针\",{\"1\":{\"126\":1}}],[\"并且每次都会创建新值\",{\"1\":{\"118\":1}}],[\"并在不需要时释放内存\",{\"1\":{\"111\":1}}],[\"并在相邻节点的链路上传送帧\",{\"1\":{\"93\":1}}],[\"并提高程序的执行效率\",{\"1\":{\"111\":1}}],[\"并包含一个自己当前的序列号x+2\",{\"1\":{\"107\":1}}],[\"并指明客户端的初始序列号isn\",{\"1\":{\"107\":1}}],[\"并由接收端进行验证\",{\"1\":{\"105\":1}}],[\"并要求释放运输连接\",{\"1\":{\"105\":1}}],[\"并有助于确保互联网的安全性\",{\"1\":{\"101\":1}}],[\"并能让网络用户和接收者知道其所输入的数据将前往受信任的来源\",{\"1\":{\"101\":1}}],[\"并发安全吗\",{\"0\":{\"140\":1}}],[\"并发\",{\"0\":{\"68\":1}}],[\"并设置容量\",{\"1\":{\"63\":1}}],[\"并初始化\",{\"1\":{\"21\":1}}],[\"集合\",{\"0\":{\"62\":1},\"1\":{\"114\":1}}],[\"创建派生\",{\"1\":{\"88\":1}}],[\"创建派生节点\",{\"0\":{\"88\":1}}],[\"创建空白\",{\"1\":{\"87\":1}}],[\"创建根节点\",{\"0\":{\"87\":1}}],[\"创建根节点和派生节点\",{\"1\":{\"86\":1}}],[\"创建一个长度相同的切片\",{\"1\":{\"74\":1}}],[\"创建长度为\",{\"1\":{\"72\":1}}],[\"创建切片\",{\"0\":{\"70\":1}}],[\"创建\",{\"0\":{\"63\":1,\"77\":1},\"1\":{\"61\":1}}],[\"创建错误\",{\"0\":{\"58\":1},\"1\":{\"58\":2,\"59\":2,\"60\":2,\"61\":1}}],[\"包含\",{\"1\":{\"60\":1,\"71\":1}}],[\"是线程安全的\",{\"1\":{\"138\":1}}],[\"是线程安全的吗\",{\"0\":{\"138\":1}}],[\"是不会报错的\",{\"1\":{\"135\":1}}],[\"是不可寻址的\",{\"1\":{\"117\":1}}],[\"是不是在crl吊销列表里面\",{\"1\":{\"99\":1}}],[\"是全双工协议\",{\"1\":{\"107\":1}}],[\"是因为\",{\"1\":{\"107\":1}}],[\"是安全的\",{\"1\":{\"98\":1}}],[\"是带有安全性的\",{\"1\":{\"98\":1}}],[\"是超文本传输协议\",{\"1\":{\"98\":1}}],[\"是\",{\"1\":{\"84\":1,\"121\":2}}],[\"是一个正的偏移量\",{\"1\":{\"105\":1}}],[\"是一个信道\",{\"1\":{\"76\":1}}],[\"是一种面向连接的\",{\"1\":{\"104\":1}}],[\"是一种键值映射表\",{\"1\":{\"44\":1,\"63\":1}}],[\"是否存在\",{\"0\":{\"66\":1},\"1\":{\"66\":1}}],[\"是否包含目标类型的\",{\"1\":{\"60\":1}}],[\"合并\",{\"1\":{\"59\":1,\"60\":1,\"61\":1}}],[\"将\",{\"1\":{\"141\":2}}],[\"将x+1作为ack数值\",{\"1\":{\"107\":1}}],[\"将数字签名γ附加到数字证书上\",{\"1\":{\"102\":1}}],[\"将网络层传下来的比特数据包组装成帧\",{\"1\":{\"93\":1}}],[\"将多个\",{\"1\":{\"59\":1,\"60\":1,\"61\":1}}],[\"将右边的结果赋值到左边\",{\"1\":{\"53\":1}}],[\"方法\",{\"1\":{\"65\":1,\"74\":1,\"84\":1,\"96\":1,\"137\":1}}],[\"方法可以将\",{\"1\":{\"61\":1}}],[\"方法可以判断当前\",{\"1\":{\"60\":1}}],[\"方法将多个\",{\"1\":{\"59\":1}}],[\"方法就属于\",{\"1\":{\"57\":1}}],[\"来接收\",{\"1\":{\"80\":1}}],[\"来判断是否是零值\",{\"1\":{\"79\":1}}],[\"来创建\",{\"1\":{\"77\":1}}],[\"来创建错误\",{\"1\":{\"58\":1}}],[\"来修饰导入的包\",{\"1\":{\"18\":1}}],[\"优先级\",{\"1\":{\"55\":1}}],[\"符号优先级\",{\"0\":{\"55\":1}}],[\"取地址中数据\",{\"1\":{\"110\":1}}],[\"取地址\",{\"1\":{\"54\":1}}],[\"取余\",{\"1\":{\"49\":1}}],[\"我们可以将数据写入\",{\"1\":{\"137\":1}}],[\"我们可以根据需要分配和释放内存\",{\"1\":{\"111\":1}}],[\"我们可以在运行时动态地分配内存\",{\"1\":{\"111\":1}}],[\"我们可以创建复杂的数据结构\",{\"1\":{\"111\":1}}],[\"我们可以为\",{\"1\":{\"86\":1}}],[\"我们可以使用\",{\"1\":{\"53\":1,\"58\":1,\"79\":1}}],[\"我们使用\",{\"1\":{\"77\":1}}],[\"我们知道切片属于引用类型\",{\"1\":{\"74\":1}}],[\"我们还可以使用\",{\"1\":{\"18\":2}}],[\"高位补\",{\"1\":{\"52\":1}}],[\"右移\",{\"1\":{\"52\":1}}],[\"右连接\",{\"0\":{\"11\":1}}],[\"低位补\",{\"1\":{\"52\":1}}],[\"左侧表示接收数据\",{\"1\":{\"78\":1}}],[\"左移\",{\"1\":{\"52\":1}}],[\"左连接\",{\"0\":{\"10\":1}}],[\"按位进行异或运算\",{\"1\":{\"52\":1}}],[\"按位进行或运算\",{\"1\":{\"52\":1}}],[\"按位进行与运算\",{\"1\":{\"52\":1}}],[\"值传递的优点是函数内对值的修改不会影响原始的变量\",{\"1\":{\"131\":1}}],[\"值传递\",{\"1\":{\"131\":1}}],[\"值类型\",{\"1\":{\"125\":1,\"141\":1}}],[\"值\",{\"1\":{\"52\":1}}],[\"变量\",{\"1\":{\"52\":1,\"112\":1}}],[\"^=\",{\"1\":{\"53\":2}}],[\"^\",{\"1\":{\"52\":3,\"53\":1,\"55\":2}}],[\"||\",{\"1\":{\"55\":1}}],[\"|=\",{\"1\":{\"53\":2}}],[\"|\",{\"1\":{\"52\":3,\"53\":1,\"55\":1}}],[\"q\",{\"1\":{\"52\":4}}],[\"quit\",{\"1\":{\"32\":6}}],[\"真值表\",{\"1\":{\"52\":1}}],[\"反之若条件为\",{\"1\":{\"51\":1}}],[\"逻辑运算符\",{\"0\":{\"51\":1}}],[\"检查左边是否小于等于右边\",{\"1\":{\"50\":1}}],[\"检查左边是否小于右边\",{\"1\":{\"50\":1}}],[\"检查左边是否大于等于右边\",{\"1\":{\"50\":1}}],[\"检查左边是否大于右边\",{\"1\":{\"50\":1}}],[\"检查两数是否不相等\",{\"1\":{\"50\":1}}],[\"检查两数是否相等\",{\"1\":{\"50\":1}}],[\"否则为\",{\"1\":{\"50\":6,\"51\":1}}],[\"若传入数组则是值传递\",{\"1\":{\"131\":1}}],[\"若是值类型的话\",{\"1\":{\"125\":1}}],[\"若不用变量名承接\",{\"1\":{\"117\":1}}],[\"若不相等则为\",{\"1\":{\"50\":1}}],[\"若多个\",{\"1\":{\"80\":1}}],[\"若\",{\"1\":{\"79\":1,\"141\":1}}],[\"若使用\",{\"1\":{\"79\":1}}],[\"若条件为\",{\"1\":{\"51\":1}}],[\"若两边有一边为\",{\"1\":{\"51\":1}}],[\"若两边都为\",{\"1\":{\"51\":2}}],[\"若成立则为\",{\"1\":{\"50\":4}}],[\"若相等则为\",{\"1\":{\"50\":1}}],[\"若希望继续执行下面的语句\",{\"1\":{\"29\":1}}],[\"自减\",{\"1\":{\"49\":1}}],[\"自增\",{\"1\":{\"49\":1}}],[\"自动推断类型并初始化\",{\"1\":{\"21\":1}}],[\"相当于高优先级的数据\",{\"1\":{\"105\":1}}],[\"相对较慢\",{\"1\":{\"98\":1}}],[\"相对较快\",{\"1\":{\"98\":1}}],[\"相应可返回一个资源特征与地址的列表用于用户终端\",{\"1\":{\"97\":1}}],[\"相似\",{\"1\":{\"96\":1}}],[\"相除\",{\"1\":{\"49\":1}}],[\"相乘\",{\"1\":{\"49\":1}}],[\"相减\",{\"1\":{\"49\":1}}],[\"相加\",{\"1\":{\"49\":1}}],[\"相关信息\",{\"1\":{\"10\":1,\"11\":1,\"12\":1,\"96\":1}}],[\"描述\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"54\":1,\"96\":1,\"97\":1,\"105\":1}}],[\"操作会报\",{\"1\":{\"135\":1}}],[\"操作系统内置的root证书或者client内置的root证书\",{\"1\":{\"99\":1}}],[\"操作\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1}}],[\"操作符\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1}}],[\"运算符\",{\"0\":{\"48\":1},\"1\":{\"53\":1,\"54\":1,\"55\":1}}],[\"内部实现了锁的机制\",{\"1\":{\"138\":1}}],[\"内部属性全部是其对应0值\",{\"1\":{\"47\":1}}],[\"内连接\",{\"0\":{\"8\":1},\"1\":{\"8\":1}}],[\"零值\",{\"1\":{\"47\":1}}],[\"零值表\",{\"0\":{\"47\":1}}],[\"结构\",{\"1\":{\"86\":1}}],[\"结构体用繁琐的常规方式如下\",{\"1\":{\"118\":1}}],[\"结构体用组合字面量方式来定义和初始化\",{\"1\":{\"118\":1}}],[\"结构体指针\",{\"1\":{\"112\":1}}],[\"结构体由一系列自定义的字段组成\",{\"1\":{\"45\":1}}],[\"结构体\",{\"0\":{\"45\":1},\"1\":{\"112\":1}}],[\"结果\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"29\":2,\"31\":1,\"34\":2,\"35\":1,\"43\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"59\":2,\"60\":4,\"61\":1,\"64\":1,\"65\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"88\":1,\"90\":1,\"91\":1,\"128\":1,\"129\":1,\"133\":1,\"134\":1,\"135\":1}}],[\"数字签名工作原理\",{\"0\":{\"102\":1}}],[\"数字证书也可以用于终端的保护\",{\"1\":{\"101\":1}}],[\"数字证书也称为公钥证书或身份证书\",{\"1\":{\"101\":1}}],[\"数字证书的应用非常广泛\",{\"1\":{\"101\":1}}],[\"数字证书的基本架构是公开密钥pki\",{\"1\":{\"101\":1}}],[\"数字证书由证书颁发机构\",{\"1\":{\"101\":1}}],[\"数字证书对个人或组织的线上凭据与身份进行验证\",{\"1\":{\"101\":1}}],[\"数字证书是一种权威性的电子文档\",{\"1\":{\"101\":1}}],[\"数字证书\",{\"0\":{\"101\":1}}],[\"数字\",{\"1\":{\"97\":1}}],[\"数组没有\",{\"1\":{\"127\":1}}],[\"数组的长度是固定的\",{\"1\":{\"127\":1}}],[\"数组的容量一经创建就无法修改\",{\"1\":{\"42\":1}}],[\"数组和切片有什么区别\",{\"0\":{\"127\":1}}],[\"数组用组合字面量方式的定义和初始化可以如下\",{\"1\":{\"118\":1}}],[\"数组字面量\",{\"1\":{\"112\":1}}],[\"数组由一系列数据组成\",{\"1\":{\"42\":1}}],[\"数组\",{\"0\":{\"42\":1},\"1\":{\"112\":1,\"118\":2}}],[\"数据完整性校验及身份认证\",{\"1\":{\"98\":1}}],[\"数据加密\",{\"1\":{\"94\":1,\"102\":1}}],[\"数据格式化\",{\"1\":{\"94\":1}}],[\"数据链路层会将0\",{\"1\":{\"93\":1}}],[\"数据链路层\",{\"1\":{\"93\":1,\"94\":2}}],[\"数据传递\",{\"1\":{\"84\":1}}],[\"数据类型\",{\"0\":{\"36\":1}}],[\"数据库基础\",{\"0\":{\"2\":1}}],[\"布尔类型的值为\",{\"1\":{\"41\":1}}],[\"布尔类型\",{\"0\":{\"41\":1},\"1\":{\"114\":1}}],[\"复制\",{\"1\":{\"74\":1}}],[\"复数类型\",{\"1\":{\"114\":1}}],[\"复数包含虚数和实数\",{\"1\":{\"39\":1}}],[\"复数\",{\"0\":{\"39\":1}}],[\"复合类型\",{\"0\":{\"22\":1},\"1\":{\"14\":1}}],[\"或者进行显式的转换\",{\"1\":{\"115\":1}}],[\"或在高速网络环境下用作窗口调节因子时使用\",{\"1\":{\"105\":1}}],[\"或超时终止时\",{\"1\":{\"86\":1}}],[\"或\",{\"1\":{\"37\":1,\"41\":1}}],[\"位运算符\",{\"0\":{\"52\":1}}],[\"位浮点数\",{\"1\":{\"39\":2}}],[\"位\",{\"1\":{\"37\":1,\"38\":1,\"39\":1,\"52\":2}}],[\"位置执行\",{\"1\":{\"31\":1}}],[\"urg=1表示紧急指针字段有效\",{\"1\":{\"105\":1}}],[\"urg=1表示存在紧急数据\",{\"1\":{\"105\":1}}],[\"urg\",{\"1\":{\"105\":1}}],[\"url\",{\"1\":{\"97\":1}}],[\"use\",{\"1\":{\"97\":1,\"115\":1}}],[\"udp\",{\"0\":{\"103\":1},\"1\":{\"94\":1}}],[\"uintptr\",{\"1\":{\"47\":1}}],[\"uint64\",{\"1\":{\"47\":1}}],[\"uint32\",{\"1\":{\"47\":1}}],[\"uint16\",{\"1\":{\"47\":1}}],[\"uint8\",{\"1\":{\"37\":1,\"47\":1,\"121\":1,\"130\":1}}],[\"uint\",{\"1\":{\"37\":1,\"47\":1,\"130\":2}}],[\"unsafe\",{\"1\":{\"123\":3}}],[\"unsigned\",{\"1\":{\"37\":1}}],[\"unavailable\",{\"1\":{\"97\":1}}],[\"unauthorized\",{\"1\":{\"97\":1}}],[\"unicode\",{\"1\":{\"37\":1,\"122\":3}}],[\"unique\",{\"1\":{\"3\":1}}],[\"无序的\",{\"1\":{\"139\":1}}],[\"无类型的常量会转化成对应的类型\",{\"1\":{\"115\":1}}],[\"无类型常量\",{\"1\":{\"115\":1}}],[\"无连接\",{\"1\":{\"100\":1}}],[\"无内容\",{\"1\":{\"97\":1}}],[\"无\",{\"1\":{\"94\":2}}],[\"无缓冲区的信道会被阻塞直到数据被接收\",{\"1\":{\"77\":1}}],[\"无缓冲\",{\"1\":{\"77\":1}}],[\"无缓冲信道\",{\"1\":{\"23\":1}}],[\"无法修改已签名的文件\",{\"1\":{\"102\":1}}],[\"无法修改\",{\"1\":{\"40\":1}}],[\"无符号数包含\",{\"1\":{\"37\":1}}],[\"无符号数\",{\"1\":{\"37\":1}}],[\"~\",{\"1\":{\"37\":2}}],[\"∞\",{\"1\":{\"37\":1}}],[\"范围更大\",{\"1\":{\"130\":1}}],[\"范围内的字符\",{\"1\":{\"122\":1}}],[\"范围0~65535字节\",{\"1\":{\"105\":1}}],[\"范围\",{\"1\":{\"37\":1,\"105\":3}}],[\"整数类型\",{\"1\":{\"114\":1}}],[\"整数有两种类型\",{\"1\":{\"37\":1}}],[\"整数\",{\"0\":{\"37\":1}}],[\"获取内存地址的对象\",{\"1\":{\"112\":1}}],[\"获取到对方的序列号\",{\"1\":{\"107\":1}}],[\"获取签名过的数字证书\",{\"1\":{\"102\":1}}],[\"获取切片容量\",{\"1\":{\"72\":1}}],[\"获取切片长度\",{\"1\":{\"72\":1}}],[\"获取变量地址\",{\"1\":{\"46\":1}}],[\"获取字段内容\",{\"1\":{\"45\":1}}],[\"获取对应的\",{\"1\":{\"44\":1,\"63\":1}}],[\"获取\",{\"0\":{\"67\":1},\"1\":{\"34\":1,\"67\":1}}],[\"接受\",{\"1\":{\"97\":1}}],[\"接收窗口\",{\"1\":{\"105\":1}}],[\"接收方的端口号\",{\"1\":{\"105\":1}}],[\"接收\",{\"1\":{\"80\":3}}],[\"接收到信息\",{\"1\":{\"32\":1}}],[\"接口\",{\"0\":{\"57\":1,\"85\":1}}],[\"接下来的查询都是围绕该示例表\",{\"1\":{\"5\":1}}],[\"会员专属\",{\"1\":{\"141\":1}}],[\"会被内存回收\",{\"1\":{\"141\":1}}],[\"会触发\",{\"1\":{\"134\":1}}],[\"会拷贝一份\",{\"1\":{\"131\":1}}],[\"会无限执行吗\",{\"0\":{\"128\":1}}],[\"会根据添加的数据自动扩容\",{\"1\":{\"127\":1}}],[\"会出现错误\",{\"1\":{\"117\":1}}],[\"会话层\",{\"1\":{\"93\":1,\"94\":1}}],[\"会产生\",{\"1\":{\"79\":1}}],[\"会发现\",{\"1\":{\"74\":1}}],[\"会阻塞直到一个\",{\"1\":{\"32\":1}}],[\"会自动补上切片的容量和长度\",{\"1\":{\"118\":1}}],[\"会自动跳出\",{\"1\":{\"29\":1}}],[\"会自动扩容\",{\"1\":{\"25\":1}}],[\"等\",{\"1\":{\"93\":1}}],[\"等于\",{\"1\":{\"39\":1}}],[\"等价于\",{\"1\":{\"37\":2}}],[\"等待多个通信操作\",{\"1\":{\"32\":1}}],[\"等同于\",{\"1\":{\"8\":1,\"53\":1,\"90\":1}}],[\"让\",{\"1\":{\"32\":1}}],[\"跳到\",{\"1\":{\"31\":1}}],[\"vs\",{\"0\":{\"98\":1,\"100\":2}}],[\"v\",{\"1\":{\"30\":6,\"128\":2}}],[\"val\",{\"1\":{\"64\":4,\"66\":4,\"79\":1,\"80\":1,\"88\":7}}],[\"val2\",{\"1\":{\"21\":4}}],[\"val1\",{\"1\":{\"21\":4}}],[\"values\",{\"1\":{\"85\":1}}],[\"valuetype\",{\"1\":{\"44\":2,\"63\":2}}],[\"value2\",{\"1\":{\"16\":1}}],[\"value1\",{\"1\":{\"16\":1}}],[\"value\",{\"1\":{\"16\":1,\"44\":2,\"63\":2,\"64\":23,\"65\":8,\"66\":3,\"85\":1,\"141\":3}}],[\"var\",{\"1\":{\"21\":7,\"29\":1,\"39\":1,\"40\":1,\"41\":1,\"43\":1,\"44\":1,\"46\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"70\":1,\"115\":3,\"118\":1,\"122\":2,\"123\":2,\"125\":4,\"130\":2,\"133\":1,\"134\":1,\"135\":1}}],[\"遍历时是有序还是无序的\",{\"0\":{\"139\":1}}],[\"遍历\",{\"0\":{\"64\":1},\"1\":{\"30\":1,\"64\":4}}],[\"初始化的\",{\"1\":{\"133\":1}}],[\"初始化\",{\"1\":{\"44\":1,\"63\":2,\"64\":1,\"65\":1,\"66\":1,\"126\":1}}],[\"初始化一个复数\",{\"1\":{\"39\":1}}],[\"初始化并判断\",{\"1\":{\"30\":1}}],[\"初始容量为\",{\"1\":{\"25\":1}}],[\"+∞\",{\"1\":{\"37\":2}}],[\"+=\",{\"1\":{\"34\":1,\"53\":2,\"130\":2}}],[\"++\",{\"1\":{\"31\":1,\"34\":1,\"43\":1,\"49\":1}}],[\"+\",{\"1\":{\"30\":1,\"39\":4,\"49\":2,\"53\":2,\"55\":1,\"107\":3}}],[\"循环\",{\"1\":{\"30\":1}}],[\"d\",{\"1\":{\"123\":2}}],[\"dns\",{\"1\":{\"94\":1}}],[\"done\",{\"1\":{\"85\":1,\"90\":1,\"91\":1}}],[\"deadline\",{\"1\":{\"85\":3}}],[\"delete\",{\"1\":{\"65\":2,\"96\":2,\"135\":3}}],[\"defer\",{\"0\":{\"129\":1},\"1\":{\"34\":6,\"129\":3}}],[\"defergo\",{\"1\":{\"14\":1}}],[\"default\",{\"1\":{\"29\":3,\"80\":3,\"90\":1,\"91\":1}}],[\"database\",{\"0\":{\"143\":1,\"147\":1}}],[\"data2\",{\"1\":{\"73\":2}}],[\"data1\",{\"1\":{\"73\":2,\"74\":7}}],[\"dataslice2\",{\"1\":{\"70\":2}}],[\"dataslice1\",{\"1\":{\"70\":3}}],[\"dataslice\",{\"1\":{\"70\":2}}],[\"datamap\",{\"1\":{\"64\":9,\"65\":9,\"66\":7,\"67\":1}}],[\"data\",{\"1\":{\"42\":1,\"43\":4,\"71\":2,\"72\":4,\"73\":4,\"74\":6}}],[\"day\",{\"1\":{\"29\":1}}],[\"dayofweek\",{\"1\":{\"29\":2}}],[\"默认的\",{\"1\":{\"98\":2}}],[\"默认操作\",{\"1\":{\"29\":1}}],[\"默认每个\",{\"1\":{\"29\":1}}],[\">>=\",{\"1\":{\"53\":2}}],[\">>\",{\"1\":{\"52\":2,\"53\":1,\"55\":1}}],[\">=\",{\"1\":{\"30\":1,\"50\":2,\"55\":1}}],[\">\",{\"1\":{\"28\":1,\"50\":2,\"55\":1}}],[\"可由三种字面量表示\",{\"1\":{\"116\":1}}],[\"可靠的\",{\"1\":{\"104\":1}}],[\"可被多个用户共享\",{\"1\":{\"101\":1}}],[\"可能会被第三方获取\",{\"1\":{\"98\":1}}],[\"可通过此返回码清除浏览器的表单域\",{\"1\":{\"97\":1}}],[\"可通过\",{\"1\":{\"45\":1}}],[\"可通过下标获取数据\",{\"1\":{\"42\":1}}],[\"可根据数据自动调整容量大小\",{\"1\":{\"43\":1}}],[\"可嵌套使用\",{\"1\":{\"28\":1}}],[\"可以方便地设置超时时间\",{\"1\":{\"137\":1}}],[\"可以方便地配置协程的终止时间\",{\"1\":{\"84\":1}}],[\"可以的\",{\"1\":{\"133\":1}}],[\"可以读取\",{\"0\":{\"133\":1}}],[\"可以存储任意\",{\"1\":{\"122\":1}}],[\"可以创建手动终止的\",{\"1\":{\"91\":1}}],[\"可以用来创建带有超时控制的\",{\"1\":{\"90\":1}}],[\"可以用于创建派生节点并添加键值数据\",{\"1\":{\"89\":1}}],[\"可以批量管理多个协程的终止\",{\"1\":{\"84\":1}}],[\"可以同时接收多个\",{\"1\":{\"80\":1}}],[\"可以获得零值\",{\"1\":{\"79\":1}}],[\"可以截取切片\",{\"1\":{\"71\":1}}],[\"可以使用\",{\"1\":{\"74\":1,\"112\":1}}],[\"可以使用官方的\",{\"1\":{\"68\":1}}],[\"可以使用括号提高优先级\",{\"1\":{\"55\":1}}],[\"可以跳到指定位置继续执行动作\",{\"1\":{\"31\":1}}],[\"可以在一个连接中并发多个请求或回应\",{\"1\":{\"100\":1}}],[\"可以在创建时直接将数据初始化\",{\"1\":{\"70\":1}}],[\"可以在执行完对应\",{\"1\":{\"29\":1}}],[\"可以在导入时设置别名\",{\"1\":{\"18\":1}}],[\"可以省略\",{\"1\":{\"16\":1}}],[\"可以看到不只有满足\",{\"1\":{\"10\":1,\"11\":1,\"12\":1}}],[\"可以看到只有满足\",{\"1\":{\"8\":1}}],[\"可以有多个唯一键\",{\"1\":{\"3\":1}}],[\"空的\",{\"1\":{\"25\":1}}],[\"虽然可以发起多个请求\",{\"1\":{\"100\":1}}],[\"虽然\",{\"1\":{\"25\":1}}],[\"hpack\",{\"1\":{\"100\":1}}],[\"height\",{\"1\":{\"118\":4}}],[\"header\",{\"1\":{\"100\":1}}],[\"head\",{\"1\":{\"96\":2}}],[\"hello\",{\"1\":{\"16\":1,\"28\":1,\"29\":1,\"34\":2,\"114\":3}}],[\"https\",{\"0\":{\"98\":1},\"1\":{\"98\":5,\"99\":2}}],[\"http1\",{\"1\":{\"97\":2}}],[\"http\",{\"0\":{\"95\":1,\"97\":1,\"98\":1,\"100\":1},\"1\":{\"94\":1,\"96\":3,\"97\":1,\"98\":6,\"100\":4}}],[\"hi\",{\"1\":{\"40\":1}}],[\"hash\",{\"1\":{\"25\":1}}],[\"底层为\",{\"1\":{\"25\":1}}],[\"white\",{\"1\":{\"118\":1}}],[\"where\",{\"1\":{\"12\":4}}],[\"withcancel\",{\"0\":{\"91\":1},\"1\":{\"91\":2}}],[\"withtimeout\",{\"0\":{\"90\":1},\"1\":{\"90\":3}}],[\"withdeadline\",{\"0\":{\"90\":1},\"1\":{\"90\":2}}],[\"withvalue\",{\"0\":{\"89\":1},\"1\":{\"88\":11,\"89\":1}}],[\"withxxx\",{\"1\":{\"88\":1}}],[\"wednesday\",{\"1\":{\"29\":1}}],[\"world\",{\"1\":{\"28\":1,\"29\":2,\"34\":2,\"114\":3}}],[\"write\",{\"1\":{\"24\":1}}],[\"<<=\",{\"1\":{\"53\":2}}],[\"<<\",{\"1\":{\"52\":2,\"53\":1,\"55\":1}}],[\"<=\",{\"1\":{\"30\":1,\"50\":2,\"55\":1}}],[\"<\",{\"1\":{\"23\":1,\"30\":1,\"31\":1,\"32\":5,\"34\":1,\"43\":1,\"50\":2,\"55\":1,\"78\":4,\"79\":1,\"80\":3,\"81\":1,\"85\":1,\"90\":1,\"91\":1}}],[\"仅定义别名\",{\"1\":{\"20\":1}}],[\"network\",{\"0\":{\"146\":1,\"150\":1}}],[\"newticker\",{\"1\":{\"81\":1}}],[\"new\",{\"1\":{\"58\":3,\"59\":2,\"60\":2,\"61\":2,\"126\":4}}],[\"nb\",{\"1\":{\"123\":1}}],[\"nationality\",{\"1\":{\"118\":4}}],[\"name2\",{\"1\":{\"21\":4}}],[\"name1\",{\"1\":{\"21\":4}}],[\"name\",{\"1\":{\"3\":4,\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"20\":1,\"21\":2,\"26\":1,\"45\":3}}],[\"nil\",{\"1\":{\"47\":6,\"134\":1,\"141\":1}}],[\"n\",{\"1\":{\"46\":2,\"64\":3,\"114\":1,\"115\":1,\"126\":3,\"128\":5,\"130\":3}}],[\"non\",{\"1\":{\"97\":1}}],[\"now\",{\"1\":{\"90\":1}}],[\"not\",{\"1\":{\"66\":2,\"97\":3,\"142\":1}}],[\"normalerr\",{\"1\":{\"61\":4}}],[\"no\",{\"1\":{\"35\":4,\"97\":1}}],[\"numbers\",{\"1\":{\"107\":1}}],[\"num\",{\"1\":{\"20\":2,\"34\":3,\"46\":2,\"110\":3}}],[\"entry\",{\"1\":{\"134\":1}}],[\"endindex\",{\"1\":{\"71\":2}}],[\"end\",{\"1\":{\"31\":5}}],[\"exists\",{\"1\":{\"66\":2}}],[\"e\",{\"1\":{\"61\":2}}],[\"err\",{\"1\":{\"85\":1}}],[\"err4\",{\"1\":{\"61\":3}}],[\"err3\",{\"1\":{\"59\":2,\"60\":4,\"61\":2}}],[\"err2\",{\"1\":{\"58\":2,\"59\":3,\"60\":4,\"61\":2}}],[\"err1\",{\"1\":{\"58\":2,\"59\":3,\"60\":6,\"61\":2}}],[\"errorf\",{\"1\":{\"58\":2,\"59\":1,\"60\":1}}],[\"errors\",{\"0\":{\"59\":1,\"60\":1,\"61\":1},\"1\":{\"58\":3,\"59\":4,\"60\":7,\"61\":5}}],[\"error\",{\"1\":{\"57\":5,\"58\":3,\"59\":8,\"60\":9,\"61\":6,\"85\":1}}],[\"else\",{\"1\":{\"28\":1,\"66\":2}}],[\"elaine\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"eat\",{\"1\":{\"20\":1}}],[\"导入本地可以直接使用函数\",{\"1\":{\"18\":1}}],[\"导入命令\",{\"1\":{\"18\":1}}],[\"支持\",{\"1\":{\"100\":2}}],[\"支持三种请求方式\",{\"1\":{\"96\":1}}],[\"支持单行和多行导入\",{\"1\":{\"18\":1}}],[\"支持多个返回值\",{\"1\":{\"17\":1}}],[\"len\",{\"1\":{\"67\":2,\"72\":2,\"74\":1}}],[\"left\",{\"0\":{\"10\":1},\"1\":{\"10\":1}}],[\"lucky\",{\"1\":{\"45\":1}}],[\"linux\",{\"1\":{\"107\":1}}],[\"lib\",{\"1\":{\"18\":3}}],[\"list\",{\"1\":{\"17\":1}}],[\"ptr\",{\"1\":{\"110\":3}}],[\"psh\",{\"1\":{\"105\":1}}],[\"permanently\",{\"1\":{\"97\":1}}],[\"person\",{\"1\":{\"26\":1}}],[\"put\",{\"1\":{\"96\":3}}],[\"post\",{\"1\":{\"96\":2}}],[\"pointer\",{\"0\":{\"46\":1},\"1\":{\"47\":1}}],[\"ppp\",{\"1\":{\"94\":1}}],[\"partial\",{\"1\":{\"97\":1}}],[\"patch\",{\"1\":{\"96\":2}}],[\"path\",{\"1\":{\"44\":2,\"63\":2}}],[\"panic\",{\"1\":{\"79\":1,\"134\":2,\"135\":1}}],[\"package\",{\"1\":{\"19\":1,\"29\":1,\"31\":1,\"32\":1,\"34\":2,\"35\":1,\"40\":1,\"43\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"64\":1,\"65\":1,\"66\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":1,\"81\":1,\"88\":1,\"90\":1,\"91\":1,\"115\":3,\"125\":2,\"126\":2,\"128\":1,\"129\":1,\"130\":1,\"133\":1,\"134\":1,\"135\":1}}],[\"p1\",{\"1\":{\"17\":1}}],[\"p\",{\"1\":{\"17\":4,\"52\":4}}],[\"protocol\",{\"1\":{\"104\":1}}],[\"protocols\",{\"1\":{\"97\":1}}],[\"proxy\",{\"1\":{\"97\":1}}],[\"product\",{\"1\":{\"4\":1}}],[\"print\",{\"1\":{\"64\":6}}],[\"printf\",{\"1\":{\"40\":1,\"64\":3,\"115\":3,\"123\":1}}],[\"println\",{\"1\":{\"28\":2,\"29\":11,\"30\":5,\"31\":2,\"32\":2,\"34\":3,\"35\":3,\"43\":1,\"44\":1,\"45\":1,\"58\":1,\"59\":2,\"60\":4,\"61\":1,\"63\":1,\"64\":3,\"65\":2,\"66\":4,\"70\":1,\"71\":1,\"72\":1,\"73\":3,\"74\":2,\"80\":4,\"81\":2,\"88\":4,\"90\":2,\"91\":2,\"110\":3,\"116\":3,\"117\":2,\"125\":6,\"126\":5,\"128\":1,\"129\":3,\"130\":2,\"133\":1}}],[\"primary\",{\"1\":{\"3\":1}}],[\"不需要额外的空间\",{\"1\":{\"131\":1}}],[\"不需要包名\",{\"1\":{\"18\":1}}],[\"不会被内存回收\",{\"1\":{\"141\":1}}],[\"不会\",{\"1\":{\"128\":1}}],[\"不会返回任何资源\",{\"1\":{\"97\":1}}],[\"不变\",{\"1\":{\"125\":1}}],[\"不同字面量可能同值吗\",{\"0\":{\"116\":1}}],[\"不能寻址的对象\",{\"1\":{\"112\":1}}],[\"不能修改\",{\"1\":{\"40\":1}}],[\"不可否认\",{\"1\":{\"102\":1}}],[\"不可篡改\",{\"1\":{\"102\":1}}],[\"不支持\",{\"1\":{\"100\":4}}],[\"不支持默认参数\",{\"1\":{\"17\":1}}],[\"不通过则显示警告信息\",{\"1\":{\"99\":1}}],[\"不返回响应体\",{\"1\":{\"96\":1}}],[\"不包含\",{\"1\":{\"71\":1}}],[\"不是线程安全的\",{\"1\":{\"68\":1}}],[\"不定参数\",{\"1\":{\"17\":1}}],[\"不允许为空\",{\"1\":{\"3\":1}}],[\"枚举\",{\"1\":{\"16\":1}}],[\"0xc00000a0d8\",{\"1\":{\"126\":1}}],[\"0xc00008a030\",{\"1\":{\"126\":1}}],[\"0xc000086020\",{\"1\":{\"110\":1}}],[\"0x15\",{\"1\":{\"116\":2}}],[\"0101\",{\"1\":{\"116\":2}}],[\"0111\",{\"1\":{\"52\":2}}],[\"0110\",{\"1\":{\"52\":2}}],[\"0b0001\",{\"1\":{\"116\":2}}],[\"0o25\",{\"1\":{\"116\":2}}],[\"0~15\",{\"1\":{\"105\":1}}],[\"0~65535\",{\"1\":{\"105\":2}}],[\"0001\",{\"1\":{\"52\":2}}],[\"0000\",{\"1\":{\"52\":2}}],[\"0011\",{\"1\":{\"52\":1}}],[\"0+0i\",{\"1\":{\"47\":1}}],[\"0\",{\"0\":{\"100\":2},\"1\":{\"16\":1,\"28\":1,\"31\":2,\"32\":3,\"34\":1,\"37\":2,\"43\":2,\"47\":6,\"52\":12,\"71\":1,\"72\":5,\"73\":4,\"74\":3,\"96\":1,\"97\":1,\"100\":2,\"122\":1,\"125\":6,\"126\":1,\"130\":2,\"133\":1}}],[\"编译器会自己推断\",{\"1\":{\"16\":1}}],[\"==\",{\"1\":{\"30\":1,\"31\":1,\"50\":2,\"55\":1,\"116\":3}}],[\"=range\",{\"1\":{\"30\":3}}],[\"=0\",{\"1\":{\"30\":1}}],[\"=\",{\"1\":{\"16\":6,\"20\":1,\"21\":4,\"23\":2,\"25\":2,\"29\":2,\"30\":2,\"31\":1,\"32\":5,\"34\":2,\"39\":2,\"40\":2,\"41\":2,\"42\":1,\"43\":2,\"44\":2,\"45\":1,\"46\":2,\"50\":2,\"51\":2,\"53\":22,\"55\":1,\"58\":2,\"59\":3,\"60\":3,\"61\":3,\"63\":3,\"64\":8,\"65\":5,\"66\":6,\"70\":3,\"71\":1,\"72\":1,\"73\":3,\"74\":3,\"77\":2,\"79\":1,\"80\":1,\"81\":1,\"87\":2,\"88\":4,\"90\":1,\"91\":1,\"107\":1,\"110\":3,\"114\":2,\"115\":8,\"117\":1,\"118\":6,\"122\":2,\"123\":2,\"125\":10,\"126\":3,\"128\":3,\"130\":2,\"134\":1}}],[\"流程控制\",{\"0\":{\"27\":1},\"1\":{\"14\":1}}],[\"声明对象\",{\"1\":{\"118\":1}}],[\"声明和属性赋值\",{\"1\":{\"118\":1}}],[\"声明多个相同类型的变量\",{\"1\":{\"21\":2}}],[\"声明多个\",{\"1\":{\"16\":1}}],[\"声明常量必须指定初始值\",{\"1\":{\"16\":1}}],[\"声明类型关键字\",{\"0\":{\"15\":1}}],[\"声明\",{\"1\":{\"14\":1,\"44\":1,\"63\":1}}],[\"关闭\",{\"0\":{\"79\":1},\"1\":{\"79\":1}}],[\"关系运算符\",{\"0\":{\"50\":1}}],[\"关系键用于标识数据表中的每一行或者标识与其他表的关系\",{\"1\":{\"3\":1}}],[\"关系键\",{\"0\":{\"3\":1},\"1\":{\"3\":1}}],[\"关键字\",{\"1\":{\"14\":1}}],[\"这种常量只有值\",{\"1\":{\"114\":1}}],[\"这时上层的应用程序会被告知另一端发起了关闭操作\",{\"1\":{\"107\":1}}],[\"这时候\",{\"1\":{\"3\":1}}],[\"这样可以节省内存空间\",{\"1\":{\"111\":1}}],[\"这样\",{\"1\":{\"107\":1}}],[\"这样只会执行导入包的初始化函数\",{\"1\":{\"18\":1}}],[\"这是一个强制性的字段\",{\"1\":{\"105\":1}}],[\"这是一个递归的过程\",{\"1\":{\"99\":1}}],[\"这个确认号是期望收到对方下一个报文段的数据的第一个字节的序列号\",{\"1\":{\"105\":1}}],[\"这个序列号记录每个数据包的序列号\",{\"1\":{\"105\":1}}],[\"这个状态代码必须和www\",{\"1\":{\"97\":1}}],[\"这些关键字用于控制程序运行流程\",{\"1\":{\"14\":1}}],[\"这些关键字用于声明一些特殊的复合类型\",{\"1\":{\"14\":1}}],[\"这些关键字用于声明代码中的各种元素\",{\"1\":{\"14\":1}}],[\"这些关键字不能用作程序标识符\",{\"1\":{\"14\":1}}],[\"有哪些使用场景\",{\"0\":{\"137\":1}}],[\"有什么区别\",{\"0\":{\"120\":1,\"126\":1}}],[\"有类型常量\",{\"1\":{\"115\":1}}],[\"有缓冲区的信道在发送的数据达到缓冲区大小后才会被阻塞\",{\"1\":{\"77\":1}}],[\"有三种方式可以创建切片\",{\"1\":{\"70\":1}}],[\"有符号数包含正数和负数\",{\"1\":{\"37\":1}}],[\"有符号数\",{\"1\":{\"37\":1}}],[\"有\",{\"1\":{\"14\":1}}],[\"首先会执行\",{\"1\":{\"12\":1}}],[\"首先要了解笛卡尔积\",{\"1\":{\"4\":1}}],[\"时要注意必须有接收数据端\",{\"1\":{\"82\":1}}],[\"时\",{\"1\":{\"12\":1,\"105\":1}}],[\"条件的列\",{\"1\":{\"12\":1}}],[\"子句只会返回满足\",{\"1\":{\"12\":1}}],[\"在自动扩容时又会重新计算哈希值\",{\"1\":{\"139\":1}}],[\"在内部使用哈希算法放置元素\",{\"1\":{\"139\":1}}],[\"在内连接的查询中\",{\"1\":{\"12\":1}}],[\"在不同协程间传递数据\",{\"1\":{\"137\":1}}],[\"在超时后自动终止协程\",{\"1\":{\"137\":1}}],[\"在超时之后\",{\"1\":{\"107\":1}}],[\"在使用数字类型时如果数据达到最大值\",{\"1\":{\"130\":1}}],[\"在使用连接后支持两种过滤条件\",{\"1\":{\"12\":1}}],[\"在执行\",{\"1\":{\"128\":1}}],[\"在函数参数传递时数据是值传递\",{\"1\":{\"127\":1}}],[\"在创建的时候就已经确定\",{\"1\":{\"127\":1}}],[\"在每一次拷贝后都会新申请一块空间存储值\",{\"1\":{\"125\":1}}],[\"在服务器返回\",{\"1\":{\"107\":1}}],[\"在多个\",{\"1\":{\"84\":1}}],[\"在并发操作下\",{\"1\":{\"68\":1}}],[\"在字典中删除键值需要使用\",{\"1\":{\"65\":1}}],[\"在变量前使用\",{\"1\":{\"46\":1}}],[\"在程序后台执行动作\",{\"1\":{\"35\":1}}],[\"在\",{\"1\":{\"12\":1,\"34\":1,\"59\":1,\"78\":1,\"120\":1}}],[\"在外连接中如左连接会返回驱动表不匹配的数据\",{\"1\":{\"12\":1}}],[\"在例子中\",{\"1\":{\"7\":1}}],[\"全外连接\",{\"0\":{\"12\":1}}],[\"of\",{\"1\":{\"117\":1}}],[\"options\",{\"1\":{\"96\":2}}],[\"ospf\",{\"1\":{\"94\":1}}],[\"osi\",{\"1\":{\"93\":1}}],[\"osi七层模型\",{\"0\":{\"93\":1},\"1\":{\"94\":1}}],[\"out\",{\"1\":{\"90\":2}}],[\"outer\",{\"0\":{\"9\":1,\"12\":1},\"1\":{\"12\":1}}],[\"other\",{\"1\":{\"85\":1,\"97\":1}}],[\"ok\",{\"1\":{\"66\":4,\"79\":2,\"85\":1,\"97\":1}}],[\"on\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":4}}],[\"外连接\",{\"0\":{\"9\":1}}],[\"外键用于建立表之间的关系\",{\"1\":{\"3\":1}}],[\"外键\",{\"1\":{\"3\":2}}],[\"implemented\",{\"1\":{\"97\":1}}],[\"import\",{\"1\":{\"18\":7,\"29\":1,\"31\":1,\"32\":1,\"34\":2,\"35\":1,\"40\":1,\"43\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"64\":1,\"65\":1,\"66\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":1,\"81\":1,\"88\":1,\"90\":1,\"91\":1,\"115\":3,\"116\":1,\"123\":1,\"125\":2,\"126\":2,\"128\":1,\"129\":1,\"130\":1,\"133\":1}}],[\"ieee802\",{\"1\":{\"94\":2}}],[\"icmf\",{\"1\":{\"94\":1}}],[\"ichp\",{\"1\":{\"94\":1}}],[\"ip协议族\",{\"1\":{\"94\":1}}],[\"ip\",{\"1\":{\"94\":3}}],[\"is02110\",{\"1\":{\"94\":1}}],[\"is\",{\"0\":{\"60\":1},\"1\":{\"60\":4}}],[\"isnumber\",{\"1\":{\"41\":3}}],[\"i++\",{\"1\":{\"30\":1,\"32\":1}}],[\"i\",{\"1\":{\"30\":15,\"31\":5,\"32\":2,\"34\":4,\"43\":4}}],[\"if\",{\"1\":{\"28\":1,\"30\":2,\"31\":1,\"66\":2}}],[\"ifelse\",{\"1\":{\"28\":1}}],[\"in\",{\"1\":{\"115\":1,\"134\":1}}],[\"information\",{\"1\":{\"97\":1}}],[\"invalid\",{\"1\":{\"29\":1}}],[\"int64\",{\"1\":{\"47\":1}}],[\"int64uint64\",{\"1\":{\"37\":1}}],[\"int16\",{\"1\":{\"47\":1,\"115\":7}}],[\"int16uint16\",{\"1\":{\"37\":1}}],[\"int8\",{\"1\":{\"47\":1,\"115\":3,\"130\":1}}],[\"int8uint8int16uint16int32uint32int64uint64intuintuintptr\",{\"1\":{\"114\":1}}],[\"int8uint8\",{\"1\":{\"37\":1}}],[\"intuintfloat32stringstruct\",{\"1\":{\"141\":1}}],[\"intuint\",{\"1\":{\"37\":1}}],[\"interview\",{\"0\":{\"153\":1,\"156\":1}}],[\"interface\",{\"1\":{\"20\":1,\"24\":2,\"47\":1,\"57\":1,\"85\":3}}],[\"integers\",{\"1\":{\"37\":2}}],[\"int\",{\"0\":{\"37\":1},\"1\":{\"29\":1,\"30\":1,\"32\":3,\"37\":1,\"42\":1,\"43\":1,\"44\":2,\"46\":1,\"47\":1,\"63\":3,\"71\":1,\"72\":1,\"73\":1,\"74\":2,\"118\":3,\"125\":4,\"126\":2,\"128\":1,\"130\":1,\"133\":2,\"134\":2,\"135\":2}}],[\"int32uint32\",{\"1\":{\"37\":1}}],[\"int32\",{\"1\":{\"20\":2,\"37\":1,\"47\":1,\"121\":1}}],[\"init\",{\"1\":{\"18\":1}}],[\"inner\",{\"0\":{\"8\":1},\"1\":{\"8\":3,\"12\":4}}],[\"iota\",{\"1\":{\"16\":2}}],[\"identifier2\",{\"1\":{\"16\":1}}],[\"identifier1\",{\"1\":{\"16\":1}}],[\"identifier\",{\"1\":{\"16\":1}}],[\"identify\",{\"1\":{\"3\":2}}],[\"id=c\",{\"1\":{\"8\":2,\"10\":2,\"11\":2,\"12\":2}}],[\"idstudent\",{\"1\":{\"3\":1}}],[\"idteacher\",{\"1\":{\"3\":1}}],[\"id\",{\"1\":{\"3\":7,\"6\":1,\"7\":2,\"8\":5,\"10\":5,\"11\":5,\"12\":5}}],[\"为例来讲讲深拷贝和浅拷贝\",{\"1\":{\"125\":1}}],[\"为什么使用指针\",{\"0\":{\"111\":1}}],[\"为什么要四次挥手\",{\"1\":{\"107\":1}}],[\"为什么要三次握手\",{\"1\":{\"107\":1}}],[\"为了确认服务器端的syn\",{\"1\":{\"107\":1}}],[\"为了确认客户端的syn\",{\"1\":{\"107\":1}}],[\"为了确认接收端确实收到了发送端发送的数据包数据\",{\"1\":{\"105\":1}}],[\"为0表示无效\",{\"1\":{\"105\":1}}],[\"为数据包选择路由\",{\"1\":{\"94\":1}}],[\"为数据类型\",{\"1\":{\"16\":1,\"77\":1}}],[\"为应用程序提供交互服务\",{\"1\":{\"93\":1}}],[\"为树形结构\",{\"1\":{\"86\":1}}],[\"为\",{\"1\":{\"44\":2,\"63\":2,\"79\":1,\"141\":1}}],[\"为类型\",{\"1\":{\"17\":1}}],[\"为参数\",{\"1\":{\"17\":1}}],[\"为被驱动表\",{\"1\":{\"7\":1}}],[\"为驱动表\",{\"1\":{\"7\":1}}],[\"8进制\",{\"1\":{\"116\":1}}],[\"8s+\",{\"1\":{\"107\":1}}],[\"8s\",{\"1\":{\"107\":1}}],[\"80\",{\"1\":{\"98\":1}}],[\"8\",{\"1\":{\"7\":3,\"8\":1,\"10\":3,\"11\":1,\"12\":3,\"37\":1,\"43\":1,\"115\":4,\"125\":8}}],[\"90\",{\"1\":{\"118\":1}}],[\"96\",{\"1\":{\"118\":1}}],[\"99\",{\"1\":{\"110\":3}}],[\"9\",{\"1\":{\"7\":2,\"10\":2,\"12\":2,\"43\":1,\"72\":3,\"125\":8}}],[\"70\",{\"1\":{\"49\":1}}],[\"7\",{\"1\":{\"7\":1,\"10\":1,\"12\":1,\"29\":1,\"34\":1,\"43\":1,\"125\":5}}],[\"fast\",{\"1\":{\"117\":2}}],[\"false\",{\"1\":{\"41\":2,\"47\":1,\"50\":9,\"51\":8,\"60\":1,\"79\":1}}],[\"fallthrough\",{\"1\":{\"29\":7}}],[\"ftp\",{\"1\":{\"94\":1}}],[\"found\",{\"1\":{\"97\":2,\"142\":1}}],[\"fourth\",{\"1\":{\"66\":1}}],[\"forbidden\",{\"1\":{\"97\":1}}],[\"for\",{\"1\":{\"30\":8,\"31\":1,\"32\":2,\"34\":1,\"43\":1,\"64\":3,\"90\":1,\"91\":1,\"128\":2}}],[\"foreign\",{\"1\":{\"3\":1}}],[\"float64\",{\"1\":{\"38\":1,\"47\":1}}],[\"float32float64\",{\"1\":{\"114\":1}}],[\"float32\",{\"1\":{\"38\":1,\"47\":1}}],[\"float\",{\"0\":{\"38\":1}}],[\"flag\",{\"1\":{\"18\":2}}],[\"fin=1\",{\"1\":{\"107\":1}}],[\"fin=1表示此报文段的发送端的数据已发送完毕\",{\"1\":{\"105\":1}}],[\"fin\",{\"1\":{\"105\":1}}],[\"finish\",{\"1\":{\"81\":1}}],[\"first\",{\"1\":{\"58\":1,\"59\":3,\"60\":3,\"61\":1,\"64\":6,\"65\":5,\"66\":3}}],[\"fibonacci\",{\"1\":{\"32\":2}}],[\"file\",{\"1\":{\"24\":1}}],[\"fmt\",{\"1\":{\"18\":1,\"28\":2,\"29\":12,\"30\":5,\"31\":3,\"32\":3,\"34\":5,\"35\":4,\"40\":2,\"43\":2,\"44\":1,\"45\":1,\"58\":5,\"59\":5,\"60\":7,\"61\":2,\"63\":1,\"64\":7,\"65\":3,\"66\":5,\"70\":2,\"71\":1,\"72\":2,\"73\":4,\"74\":3,\"80\":4,\"81\":3,\"88\":5,\"90\":3,\"91\":3,\"110\":3,\"115\":6,\"116\":4,\"117\":2,\"123\":1,\"125\":8,\"126\":7,\"128\":2,\"129\":4,\"130\":3,\"133\":2}}],[\"female\",{\"1\":{\"16\":1}}],[\"func\",{\"1\":{\"17\":4,\"29\":1,\"31\":1,\"32\":3,\"34\":3,\"35\":3,\"40\":1,\"43\":1,\"47\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":2,\"64\":1,\"65\":1,\"66\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":1,\"81\":1,\"88\":1,\"90\":2,\"91\":2,\"115\":3,\"116\":1,\"117\":4,\"118\":2,\"125\":2,\"126\":2,\"128\":1,\"129\":4,\"130\":1,\"133\":1,\"134\":1,\"135\":1}}],[\"function\",{\"1\":{\"14\":1}}],[\"full\",{\"0\":{\"12\":1},\"1\":{\"12\":1}}],[\"friday\",{\"1\":{\"29\":2}}],[\"from\",{\"1\":{\"8\":4,\"10\":1,\"11\":1,\"12\":1}}],[\"francisco\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"63s\",{\"1\":{\"107\":1}}],[\"66\",{\"1\":{\"44\":1,\"63\":1}}],[\"648\",{\"1\":{\"125\":6}}],[\"64\",{\"1\":{\"37\":2,\"38\":1,\"39\":1}}],[\"6\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"29\":1,\"43\":1,\"73\":2,\"96\":1}}],[\"rsp=1表示重建连接\",{\"1\":{\"105\":1}}],[\"rst\",{\"1\":{\"105\":1}}],[\"rarp\",{\"1\":{\"94\":1}}],[\"range\",{\"0\":{\"139\":1},\"1\":{\"30\":1,\"64\":7,\"79\":1,\"128\":2}}],[\"rip\",{\"1\":{\"94\":1}}],[\"right\",{\"0\":{\"11\":1},\"1\":{\"11\":1}}],[\"rpc\",{\"1\":{\"93\":1}}],[\"run\",{\"1\":{\"117\":5}}],[\"running\",{\"1\":{\"90\":4,\"91\":4}}],[\"rune\",{\"0\":{\"123\":1},\"1\":{\"37\":1,\"47\":1,\"120\":1,\"121\":1,\"122\":2,\"123\":1,\"124\":1}}],[\"red\",{\"1\":{\"115\":1,\"118\":2}}],[\"redirect\",{\"1\":{\"97\":1}}],[\"request\",{\"1\":{\"97\":1}}],[\"reset\",{\"1\":{\"97\":1}}],[\"return\",{\"1\":{\"32\":1,\"34\":4,\"61\":1,\"90\":1,\"91\":1,\"117\":2}}],[\"read\",{\"1\":{\"24\":1}}],[\"reyes\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"rogers\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"romero\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"5xx\",{\"1\":{\"97\":1}}],[\"51\",{\"1\":{\"49\":1}}],[\"509\",{\"1\":{\"102\":2}}],[\"504\",{\"1\":{\"97\":1}}],[\"503\",{\"1\":{\"97\":1}}],[\"502\",{\"1\":{\"97\":1}}],[\"501\",{\"1\":{\"97\":1}}],[\"50\",{\"1\":{\"49\":1,\"50\":1}}],[\"5\",{\"1\":{\"7\":3,\"8\":1,\"10\":3,\"11\":1,\"12\":3,\"29\":1,\"30\":1,\"31\":1,\"35\":1,\"39\":3,\"42\":2,\"43\":1,\"55\":1,\"71\":1,\"72\":3,\"73\":2,\"74\":2,\"90\":1,\"91\":1,\"107\":1}}],[\"jack\",{\"1\":{\"40\":1,\"70\":1}}],[\"jamie\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"justin\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"join\",{\"0\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"59\":1},\"1\":{\"5\":1,\"8\":5,\"10\":1,\"11\":1,\"12\":6,\"59\":3,\"60\":2,\"61\":2}}],[\"gateway\",{\"1\":{\"97\":2}}],[\"garcia\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"get\",{\"1\":{\"96\":3}}],[\"geography\",{\"1\":{\"6\":1,\"8\":2,\"10\":2,\"11\":2,\"12\":2}}],[\"go\",{\"0\":{\"120\":1},\"1\":{\"32\":1,\"35\":3,\"59\":1,\"90\":1,\"91\":1,\"117\":1,\"120\":1}}],[\"goroutines\",{\"1\":{\"85\":1}}],[\"goroutine\",{\"1\":{\"32\":1,\"35\":3,\"76\":1,\"84\":2}}],[\"goto\",{\"1\":{\"31\":2}}],[\"golang中的深拷贝和浅拷贝是什么\",{\"0\":{\"125\":1}}],[\"golang\",{\"0\":{\"145\":1,\"149\":1,\"152\":1,\"155\":1},\"1\":{\"1\":1,\"14\":1,\"37\":2,\"57\":1,\"58\":1,\"84\":1,\"115\":1}}],[\"griffin\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"glenn\",{\"1\":{\"7\":2,\"8\":1,\"10\":2,\"11\":1,\"12\":2}}],[\"4s+\",{\"1\":{\"107\":1}}],[\"4s\",{\"1\":{\"107\":1}}],[\"443\",{\"1\":{\"98\":1}}],[\"404\",{\"1\":{\"97\":1,\"142\":1}}],[\"403\",{\"1\":{\"97\":1}}],[\"401\",{\"1\":{\"97\":1}}],[\"400\",{\"1\":{\"97\":1}}],[\"4xx\",{\"1\":{\"97\":1}}],[\"49\",{\"1\":{\"49\":1}}],[\"4\",{\"1\":{\"6\":1,\"7\":3,\"8\":4,\"10\":5,\"11\":4,\"12\":5,\"29\":2,\"30\":1,\"31\":1,\"34\":1,\"42\":1,\"43\":1,\"55\":1,\"71\":2,\"73\":2,\"74\":2,\"123\":1}}],[\"mss\",{\"1\":{\"105\":1}}],[\"mtu\",{\"1\":{\"94\":1}}],[\"methods\",{\"1\":{\"85\":1}}],[\"mike\",{\"1\":{\"70\":1}}],[\"modified\",{\"1\":{\"97\":1}}],[\"moved\",{\"1\":{\"97\":1}}],[\"monday\",{\"1\":{\"29\":1}}],[\"morris\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"m\",{\"1\":{\"18\":2,\"25\":2,\"44\":4,\"63\":5,\"118\":1,\"126\":2,\"130\":3,\"133\":2,\"134\":2,\"135\":2}}],[\"maxuint8\",{\"1\":{\"130\":1}}],[\"maxint8\",{\"1\":{\"130\":1}}],[\"man\",{\"1\":{\"118\":4}}],[\"may\",{\"1\":{\"85\":1}}],[\"main\",{\"1\":{\"29\":2,\"31\":2,\"32\":2,\"34\":4,\"35\":2,\"40\":2,\"43\":2,\"58\":2,\"59\":2,\"60\":2,\"61\":2,\"64\":2,\"65\":2,\"66\":2,\"70\":2,\"72\":2,\"73\":2,\"74\":2,\"81\":2,\"88\":2,\"90\":2,\"91\":2,\"115\":6,\"116\":1,\"117\":3,\"118\":2,\"125\":4,\"126\":4,\"128\":2,\"129\":2,\"130\":2,\"133\":2,\"134\":2,\"135\":2}}],[\"mapsliceschan\",{\"1\":{\"141\":1}}],[\"map不能保证并发安全\",{\"1\":{\"140\":1}}],[\"map用组合字面量方式的定义和初始化如下\",{\"1\":{\"118\":1}}],[\"map\",{\"0\":{\"44\":2,\"62\":1,\"63\":1,\"64\":1,\"67\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"139\":1,\"140\":1,\"141\":1},\"1\":{\"25\":7,\"44\":7,\"47\":1,\"63\":9,\"64\":5,\"65\":6,\"66\":3,\"67\":1,\"68\":2,\"112\":2,\"118\":1,\"126\":2,\"133\":2,\"134\":2,\"135\":3,\"139\":2,\"140\":1,\"141\":5}}],[\"make\",{\"1\":{\"23\":2,\"25\":2,\"32\":2,\"44\":2,\"63\":4,\"64\":1,\"65\":1,\"66\":1,\"70\":2,\"72\":1,\"74\":1,\"77\":3,\"125\":2,\"126\":2,\"133\":1}}],[\"male\",{\"1\":{\"16\":1}}],[\"math\",{\"1\":{\"6\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"18\":4,\"118\":1,\"130\":3}}],[\"multiple\",{\"1\":{\"85\":1,\"97\":1}}],[\"murphy\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"music\",{\"1\":{\"6\":1,\"8\":2,\"10\":2,\"11\":2,\"12\":2}}],[\"3xx\",{\"1\":{\"97\":1}}],[\"307\",{\"1\":{\"97\":1}}],[\"305\",{\"1\":{\"97\":1}}],[\"304\",{\"1\":{\"97\":1}}],[\"303\",{\"1\":{\"97\":1}}],[\"302\",{\"1\":{\"97\":1}}],[\"301\",{\"1\":{\"97\":1}}],[\"300\",{\"1\":{\"97\":1}}],[\"30\",{\"1\":{\"49\":1}}],[\"3i\",{\"1\":{\"39\":2}}],[\"32s\",{\"1\":{\"107\":1}}],[\"32\",{\"1\":{\"37\":2,\"38\":1,\"39\":1}}],[\"3\",{\"1\":{\"6\":1,\"7\":3,\"8\":5,\"10\":5,\"11\":5,\"12\":5,\"29\":1,\"30\":2,\"31\":1,\"39\":1,\"42\":1,\"43\":1,\"55\":1,\"71\":2,\"73\":2,\"74\":2,\"81\":1,\"90\":1,\"91\":1,\"118\":1,\"125\":2,\"128\":3,\"129\":2}}],[\"take\",{\"1\":{\"117\":1}}],[\"tamp\",{\"1\":{\"110\":2}}],[\"tls\",{\"1\":{\"98\":1,\"101\":1}}],[\"transmission\",{\"1\":{\"104\":1}}],[\"trace\",{\"1\":{\"96\":2}}],[\"true\",{\"1\":{\"16\":1,\"41\":2,\"50\":9,\"51\":8,\"60\":2}}],[\"tftp\",{\"1\":{\"94\":1}}],[\"tcp头部字段\",{\"1\":{\"105\":1}}],[\"tcp\",{\"0\":{\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1},\"1\":{\"94\":4,\"100\":2,\"104\":1,\"105\":1,\"106\":1,\"107\":5}}],[\"tcp和ip模型\",{\"0\":{\"94\":1}}],[\"to\",{\"1\":{\"134\":1}}],[\"todo\",{\"1\":{\"87\":2}}],[\"tony\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"the\",{\"1\":{\"117\":1}}],[\"third\",{\"1\":{\"64\":6,\"65\":6,\"66\":2}}],[\"thursday\",{\"1\":{\"29\":2}}],[\"tuesday\",{\"1\":{\"29\":1}}],[\"turner\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"timeout\",{\"1\":{\"97\":1}}],[\"time\",{\"1\":{\"35\":3,\"81\":3,\"85\":2,\"90\":11,\"91\":7}}],[\"tiger\",{\"1\":{\"20\":1}}],[\"title\",{\"1\":{\"6\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"type\",{\"1\":{\"20\":5,\"24\":1,\"26\":1,\"45\":1,\"57\":1,\"61\":1,\"85\":1,\"88\":7,\"115\":3,\"118\":2}}],[\"t5\",{\"1\":{\"17\":1}}],[\"t4\",{\"1\":{\"17\":1}}],[\"t3\",{\"1\":{\"17\":1}}],[\"t2\",{\"1\":{\"17\":1}}],[\"t1\",{\"1\":{\"17\":2}}],[\"temporary\",{\"1\":{\"97\":1}}],[\"telnet\",{\"1\":{\"94\":1}}],[\"test\",{\"1\":{\"17\":3}}],[\"teacher\",{\"1\":{\"3\":3}}],[\"t\",{\"1\":{\"14\":1,\"16\":2,\"17\":4,\"21\":4,\"23\":8,\"61\":3,\"77\":3,\"81\":2,\"115\":9,\"117\":2}}],[\"created\",{\"1\":{\"97\":1}}],[\"cslip\",{\"1\":{\"94\":1}}],[\"ctx3val\",{\"1\":{\"88\":2}}],[\"ctx3\",{\"1\":{\"88\":3}}],[\"ctx1val\",{\"1\":{\"88\":2}}],[\"ctx1\",{\"1\":{\"88\":3,\"90\":2,\"91\":2}}],[\"ctx2val\",{\"1\":{\"88\":2}}],[\"ctx2\",{\"1\":{\"87\":1,\"88\":3}}],[\"ctx\",{\"1\":{\"87\":1,\"88\":5,\"90\":2,\"91\":2}}],[\"client\",{\"1\":{\"107\":1}}],[\"client再次发起https的请求\",{\"1\":{\"99\":1}}],[\"client使用对称密钥解密响应的密文\",{\"1\":{\"99\":1}}],[\"client使用伪随机数生成器生成加密所使用的对称密钥\",{\"1\":{\"99\":1}}],[\"client和server双方都持有了相同的对称密钥\",{\"1\":{\"99\":1}}],[\"client验证公钥证书\",{\"1\":{\"99\":1}}],[\"client发起一个https的请求\",{\"1\":{\"99\":1}}],[\"clifford\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"close\",{\"1\":{\"24\":1,\"79\":5}}],[\"chinese\",{\"1\":{\"118\":1}}],[\"china\",{\"1\":{\"118\":2}}],[\"choices\",{\"1\":{\"97\":1}}],[\"ch3\",{\"1\":{\"80\":3}}],[\"ch2\",{\"1\":{\"77\":1,\"80\":3}}],[\"ch1\",{\"1\":{\"77\":1,\"80\":3}}],[\"ch\",{\"1\":{\"23\":2,\"78\":2,\"79\":2}}],[\"chan<\",{\"1\":{\"23\":1}}],[\"channel\",{\"0\":{\"77\":1,\"79\":1,\"138\":1},\"1\":{\"23\":1,\"76\":1,\"77\":1,\"78\":3,\"79\":4,\"80\":4,\"81\":1,\"82\":1,\"138\":2}}],[\"chan\",{\"1\":{\"23\":5,\"32\":3,\"47\":1,\"77\":2,\"85\":1}}],[\"chaninterfacemapstruct\",{\"1\":{\"14\":1}}],[\"c\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":3,\"16\":2,\"32\":5,\"40\":1,\"53\":1,\"81\":1}}],[\"colours\",{\"1\":{\"118\":1}}],[\"colour\",{\"1\":{\"115\":1}}],[\"copy\",{\"1\":{\"74\":2,\"125\":2}}],[\"complexdata2\",{\"1\":{\"39\":1}}],[\"complexdata\",{\"1\":{\"39\":1}}],[\"complex128\",{\"1\":{\"39\":1,\"47\":1}}],[\"complex64complex128\",{\"1\":{\"114\":1}}],[\"complex64\",{\"1\":{\"39\":2,\"47\":1}}],[\"complex\",{\"0\":{\"39\":1},\"1\":{\"39\":1}}],[\"concepts\",{\"0\":{\"144\":1,\"148\":1}}],[\"connection\",{\"1\":{\"107\":1}}],[\"connect\",{\"1\":{\"96\":2}}],[\"connie\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"control\",{\"1\":{\"104\":1}}],[\"content\",{\"1\":{\"97\":3}}],[\"context\",{\"0\":{\"83\":1,\"85\":1},\"1\":{\"84\":2,\"85\":3,\"86\":2,\"87\":4,\"88\":12,\"89\":2,\"90\":8,\"91\":6,\"137\":2}}],[\"continue\",{\"1\":{\"30\":3,\"97\":1}}],[\"const\",{\"1\":{\"16\":6,\"115\":5}}],[\"constfuncimportpackagetypevar\",{\"1\":{\"14\":1}}],[\"cook\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"course\",{\"0\":{\"6\":1},\"1\":{\"7\":2,\"8\":4,\"10\":4,\"11\":4,\"12\":4}}],[\"ca\",{\"1\":{\"101\":1,\"102\":1}}],[\"called\",{\"1\":{\"85\":1}}],[\"cannot\",{\"1\":{\"115\":1,\"117\":1}}],[\"canceled\",{\"1\":{\"91\":2}}],[\"cancelation\",{\"1\":{\"85\":1}}],[\"cancel\",{\"1\":{\"84\":1,\"86\":1,\"91\":3,\"137\":1}}],[\"candidate\",{\"1\":{\"3\":1}}],[\"capacity\",{\"1\":{\"127\":1}}],[\"cap\",{\"1\":{\"72\":2}}],[\"case\",{\"1\":{\"29\":13,\"32\":4,\"80\":3,\"90\":1,\"91\":1}}],[\"carries\",{\"1\":{\"85\":1}}],[\"cartesian\",{\"1\":{\"4\":1}}],[\"card\",{\"1\":{\"3\":2}}],[\"示例表\",{\"1\":{\"5\":2}}],[\"z=\",{\"1\":{\"4\":1}}],[\"的内存会被释放吗\",{\"0\":{\"141\":1}}],[\"的操作会发生什么\",{\"0\":{\"135\":1}}],[\"的执行顺序是什么\",{\"0\":{\"129\":1}}],[\"的执行顺序是后进先出\",{\"1\":{\"34\":1}}],[\"的时候实际遍历的是变量的副本\",{\"1\":{\"128\":1}}],[\"的时候利用索引可以减少回表次数\",{\"1\":{\"12\":1}}],[\"的别名类型\",{\"1\":{\"121\":2}}],[\"的监督下确保交易达成后不能否认未进行交易\",{\"1\":{\"102\":1}}],[\"的例子\",{\"1\":{\"102\":1}}],[\"的切片\",{\"1\":{\"72\":1}}],[\"的长度\",{\"1\":{\"67\":1}}],[\"的方法\",{\"1\":{\"58\":1}}],[\"的数据并打印\",{\"1\":{\"80\":1}}],[\"的数据\",{\"1\":{\"80\":3}}],[\"的数据到\",{\"1\":{\"74\":1}}],[\"的数据类型\",{\"1\":{\"44\":2,\"63\":2}}],[\"的数据列被返回了\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"的声明方式\",{\"1\":{\"44\":1,\"63\":1}}],[\"的动作\",{\"1\":{\"29\":1}}],[\"的\",{\"0\":{\"141\":1},\"1\":{\"25\":1,\"79\":1,\"141\":1}}],[\"的效果是一致的\",{\"1\":{\"12\":1}}],[\"的笛卡尔积为\",{\"1\":{\"4\":1}}],[\"的所有元素分别乘以\",{\"1\":{\"4\":1}}],[\"和服务端\",{\"1\":{\"107\":1}}],[\"和序列号中的值相加表示紧急数据最后一个字节的序列号\",{\"1\":{\"105\":1}}],[\"和所有正数\",{\"1\":{\"37\":1}}],[\"和别名修饰导入的包\",{\"1\":{\"18\":1}}],[\"和\",{\"0\":{\"120\":1,\"126\":1},\"1\":{\"4\":1,\"12\":1,\"90\":1,\"96\":2,\"110\":1,\"120\":1}}],[\"则接下来的数据将会溢出\",{\"1\":{\"130\":1}}],[\"则会重传\",{\"1\":{\"107\":1}}],[\"则会随机选择一个\",{\"1\":{\"80\":1}}],[\"则会随机执行一个\",{\"1\":{\"32\":1}}],[\"则tcp头部长度为20字节\",{\"1\":{\"105\":1}}],[\"则需要进行分段\",{\"1\":{\"105\":1}}],[\"则证明证书是合法的\",{\"1\":{\"102\":1}}],[\"则信道已经\",{\"1\":{\"79\":1}}],[\"则结果为\",{\"1\":{\"51\":5}}],[\"则\",{\"1\":{\"4\":1,\"79\":1,\"141\":2}}],[\"则都属于超键\",{\"1\":{\"3\":1}}],[\"2^8=256\",{\"1\":{\"124\":1}}],[\"2进制\",{\"1\":{\"116\":1}}],[\"21\",{\"1\":{\"116\":5}}],[\"2s\",{\"1\":{\"107\":2}}],[\"2xx\",{\"1\":{\"97\":1}}],[\"206\",{\"1\":{\"97\":1}}],[\"205\",{\"1\":{\"97\":1}}],[\"2049\",{\"1\":{\"102\":1}}],[\"204\",{\"1\":{\"97\":1}}],[\"203\",{\"1\":{\"97\":1}}],[\"202\",{\"1\":{\"97\":1}}],[\"201\",{\"1\":{\"97\":1}}],[\"200\",{\"1\":{\"97\":1}}],[\"20\",{\"1\":{\"23\":1,\"49\":1,\"50\":1,\"59\":1}}],[\"255\",{\"1\":{\"122\":1}}],[\"25\",{\"1\":{\"14\":1}}],[\"2\",{\"0\":{\"100\":1},\"1\":{\"4\":3,\"6\":1,\"7\":3,\"8\":5,\"10\":5,\"11\":5,\"12\":5,\"29\":3,\"30\":3,\"31\":1,\"35\":2,\"40\":1,\"42\":1,\"43\":1,\"49\":1,\"52\":4,\"53\":10,\"55\":1,\"71\":3,\"73\":4,\"74\":3,\"77\":1,\"94\":1,\"100\":1,\"128\":3,\"129\":2,\"130\":1}}],[\"180\",{\"1\":{\"118\":2}}],[\"14\",{\"1\":{\"117\":1}}],[\"1s\",{\"1\":{\"107\":3}}],[\"1xx\",{\"1\":{\"97\":1}}],[\"1序列划分为具有意义的数据帧传送给另一端\",{\"1\":{\"93\":1}}],[\"16进制\",{\"1\":{\"116\":1}}],[\"16s\",{\"1\":{\"107\":2}}],[\"160位\",{\"1\":{\"105\":1}}],[\"16\",{\"1\":{\"37\":1}}],[\"13\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"10进制\",{\"1\":{\"116\":1}}],[\"101\",{\"1\":{\"97\":1}}],[\"1010\",{\"1\":{\"52\":2}}],[\"1011\",{\"1\":{\"52\":2}}],[\"1000\",{\"1\":{\"49\":1,\"52\":1}}],[\"100\",{\"1\":{\"16\":1,\"97\":1}}],[\"10\",{\"1\":{\"7\":2,\"8\":1,\"10\":2,\"11\":1,\"12\":2,\"25\":2,\"30\":1,\"31\":1,\"32\":1,\"43\":1,\"46\":1,\"49\":1,\"63\":1,\"70\":1,\"78\":1,\"114\":2,\"117\":1,\"126\":1}}],[\"11\",{\"1\":{\"7\":5,\"8\":3,\"10\":5,\"11\":3,\"12\":5}}],[\"127\",{\"1\":{\"130\":1}}],[\"123\",{\"1\":{\"114\":1}}],[\"12\",{\"1\":{\"7\":7,\"8\":4,\"10\":7,\"11\":4,\"12\":7}}],[\"15\",{\"1\":{\"6\":1,\"11\":1,\"12\":1}}],[\"1\",{\"0\":{\"100\":3},\"1\":{\"4\":3,\"6\":1,\"7\":2,\"8\":4,\"10\":4,\"11\":4,\"12\":4,\"16\":1,\"29\":2,\"30\":2,\"31\":1,\"32\":1,\"34\":1,\"35\":2,\"42\":1,\"43\":1,\"52\":10,\"55\":1,\"59\":1,\"71\":1,\"73\":4,\"74\":3,\"90\":2,\"96\":3,\"97\":1,\"100\":3,\"123\":1,\"128\":3,\"129\":2,\"130\":1,\"133\":1,\"134\":2,\"135\":1}}],[\"例如值为5时\",{\"1\":{\"105\":1}}],[\"例如在电子商务的活动过程中安装了数字证书\",{\"1\":{\"101\":1}}],[\"例如在安全电子邮件中使用数字证书可以建构安全电子邮件证书\",{\"1\":{\"101\":1}}],[\"例如\",{\"1\":{\"4\":1,\"97\":2,\"101\":1,\"102\":3,\"110\":1}}],[\"例子\",{\"0\":{\"81\":1},\"1\":{\"3\":1,\"8\":1,\"16\":1,\"17\":1,\"18\":1,\"20\":1,\"21\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"34\":1,\"35\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"72\":1,\"73\":1,\"74\":1,\"102\":1,\"125\":1}}],[\"又称为直积\",{\"1\":{\"4\":1}}],[\"中传递数据\",{\"1\":{\"84\":1}}],[\"中的\",{\"0\":{\"120\":1}}],[\"中的上下文信息\",{\"1\":{\"84\":1}}],[\"中的整数类型\",{\"1\":{\"37\":1}}],[\"中十分重要的接口\",{\"1\":{\"84\":1}}],[\"中第一个符合目标类型的错误赋值到目标对象\",{\"1\":{\"61\":1}}],[\"中断当前\",{\"1\":{\"30\":1}}],[\"中所有元素的集合\",{\"1\":{\"4\":1}}],[\"中\",{\"1\":{\"4\":1,\"37\":1,\"115\":1}}],[\"y=\",{\"1\":{\"4\":1}}],[\"y\",{\"1\":{\"4\":3,\"32\":3,\"107\":1,\"122\":1,\"123\":1}}],[\"x+y\",{\"1\":{\"32\":1}}],[\"x=\",{\"1\":{\"4\":1}}],[\"x\",{\"1\":{\"4\":3,\"32\":3,\"102\":2}}],[\"指令之前掉线了\",{\"1\":{\"107\":1}}],[\"指令\",{\"1\":{\"107\":2}}],[\"指令断开\",{\"1\":{\"107\":1}}],[\"指示接收方愿意接收的字节数量\",{\"1\":{\"105\":1}}],[\"指示信息\",{\"1\":{\"97\":1}}],[\"指向\",{\"1\":{\"78\":1}}],[\"指针和引用传递\",{\"1\":{\"131\":1}}],[\"指针可直接访问和修改内存中的数据\",{\"1\":{\"111\":1}}],[\"指针可在程序运行时动态地分配内存\",{\"1\":{\"111\":1}}],[\"指针可在函数之间传递数据的引用\",{\"1\":{\"111\":1}}],[\"指针可在数据结构中轻松地访问和操作节点之间的关系\",{\"1\":{\"111\":1}}],[\"指针在数据结构中起着重要的作用\",{\"1\":{\"111\":1}}],[\"指针存储的是变量的内存地址\",{\"1\":{\"46\":1}}],[\"指针\",{\"0\":{\"46\":1,\"109\":1},\"1\":{\"54\":1,\"112\":1}}],[\"指的是两个集合\",{\"1\":{\"4\":1}}],[\"指南\",{\"0\":{\"0\":1}}],[\"笛卡尔积\",{\"1\":{\"4\":2}}],[\"任何和主键和身份证的组合都为超键\",{\"1\":{\"3\":1}}],[\"以引用类型的切片\",{\"1\":{\"125\":1}}],[\"以满足程序的需求\",{\"1\":{\"111\":1}}],[\"以及有助于识别并验证网站所有者\",{\"1\":{\"101\":1}}],[\"以二进制数据形式在物理媒介上传输数据\",{\"1\":{\"94\":1}}],[\"以下注释的代码会报错\",{\"1\":{\"40\":1}}],[\"以下三种写法相同\",{\"1\":{\"8\":1}}],[\"以\",{\"1\":{\"3\":2}}],[\"syn=1表示这是一个连接请求或连接接受报文\",{\"1\":{\"105\":1}}],[\"syn\",{\"1\":{\"105\":1,\"107\":5}}],[\"synchronize\",{\"1\":{\"107\":1}}],[\"sync\",{\"1\":{\"68\":1,\"140\":1}}],[\"sha256md5\",{\"1\":{\"102\":1}}],[\"ssl证书有两种用途\",{\"1\":{\"101\":1}}],[\"ssl\",{\"1\":{\"98\":1}}],[\"snhp\",{\"1\":{\"94\":1}}],[\"smtp\",{\"1\":{\"94\":1}}],[\"slip\",{\"1\":{\"94\":1}}],[\"slice2\",{\"1\":{\"125\":11}}],[\"slice1\",{\"1\":{\"125\":11}}],[\"slicemapchannelsinterfacesfunctions\",{\"1\":{\"125\":1}}],[\"slice\",{\"1\":{\"47\":1,\"125\":1}}],[\"slicesmapchannel\",{\"1\":{\"126\":1}}],[\"slices\",{\"0\":{\"43\":1}}],[\"sleep\",{\"1\":{\"35\":1,\"90\":2,\"91\":3}}],[\"sizeof\",{\"1\":{\"123\":2}}],[\"simultaneously\",{\"1\":{\"85\":1}}],[\"signature\",{\"1\":{\"102\":1}}],[\"signal\",{\"1\":{\"85\":1}}],[\"signed\",{\"1\":{\"37\":1}}],[\"sin\",{\"1\":{\"18\":3}}],[\"sequence\",{\"1\":{\"107\":1}}],[\"seq=y+1\",{\"1\":{\"107\":1}}],[\"server使用对称密钥加密明文内容a\",{\"1\":{\"99\":1}}],[\"server使用自己的私钥解密这个消息\",{\"1\":{\"99\":1}}],[\"server把事先配置好的公钥证书返回给客户端\",{\"1\":{\"99\":1}}],[\"service\",{\"1\":{\"97\":1,\"107\":1}}],[\"see\",{\"1\":{\"97\":1}}],[\"second\",{\"1\":{\"35\":1,\"58\":1,\"59\":3,\"60\":3,\"61\":2,\"64\":6,\"65\":6,\"66\":2,\"81\":1,\"90\":5,\"91\":3}}],[\"select\",{\"0\":{\"80\":1},\"1\":{\"8\":4,\"10\":1,\"11\":1,\"12\":1,\"32\":3,\"80\":3,\"90\":1,\"91\":1}}],[\"su\",{\"1\":{\"118\":4}}],[\"sunday\",{\"1\":{\"29\":1}}],[\"super\",{\"1\":{\"3\":1}}],[\"saturday\",{\"1\":{\"29\":2}}],[\"sanchez\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"switching\",{\"1\":{\"97\":1}}],[\"switch\",{\"1\":{\"29\":3}}],[\"stateful\",{\"1\":{\"106\":1}}],[\"start\",{\"1\":{\"35\":2,\"81\":1}}],[\"str\",{\"1\":{\"40\":3}}],[\"stringarrayintstructfloatbool\",{\"1\":{\"125\":1}}],[\"string\",{\"0\":{\"40\":1},\"1\":{\"20\":1,\"25\":4,\"26\":1,\"40\":2,\"44\":2,\"45\":1,\"47\":1,\"57\":1,\"61\":2,\"63\":3,\"64\":6,\"65\":6,\"66\":4,\"70\":4,\"88\":7,\"114\":1,\"115\":1,\"117\":2,\"118\":5,\"126\":2}}],[\"struct\",{\"0\":{\"45\":1},\"1\":{\"20\":1,\"26\":2,\"45\":1,\"47\":1,\"61\":1,\"85\":1,\"118\":2}}],[\"student\",{\"0\":{\"7\":1},\"1\":{\"3\":11,\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"s\",{\"1\":{\"8\":3,\"10\":3,\"11\":3,\"12\":3,\"40\":1,\"58\":1,\"59\":1,\"60\":1,\"64\":4,\"85\":1,\"114\":1,\"118\":1,\"126\":3}}],[\"sport\",{\"1\":{\"6\":1,\"11\":1,\"12\":1}}],[\"sql\",{\"1\":{\"5\":1}}],[\"唯一键可以为空\",{\"1\":{\"3\":1}}],[\"一定是由发送端计算和存储\",{\"1\":{\"105\":1}}],[\"一般来说\",{\"1\":{\"131\":1}}],[\"一般用于握手阶段\",{\"1\":{\"105\":1}}],[\"一般使用较少\",{\"1\":{\"105\":1}}],[\"一般我们称第一个表为驱动表\",{\"1\":{\"7\":1}}],[\"一个值可存在多种字面量表示\",{\"1\":{\"116\":1}}],[\"一个\",{\"1\":{\"100\":1}}],[\"一个表只能有一个主键\",{\"1\":{\"3\":1}}],[\"一张表只能有一个主键\",{\"1\":{\"3\":1}}],[\"注意避免死锁问题\",{\"1\":{\"82\":1}}],[\"注意事项\",{\"0\":{\"82\":1}}],[\"注意\",{\"1\":{\"3\":1,\"7\":1,\"12\":1,\"14\":2,\"34\":1,\"77\":1,\"79\":1,\"90\":1}}],[\"表明收到了上一个包\",{\"1\":{\"107\":1}}],[\"表示的字符范围不同\",{\"0\":{\"124\":1}}],[\"表示头部长度是20字节\",{\"1\":{\"105\":1}}],[\"表示tcp头部的长度\",{\"1\":{\"105\":1}}],[\"表示不能及时地从远程服务器获得应答\",{\"1\":{\"97\":1}}],[\"表示服务器自身工作正常\",{\"1\":{\"97\":1}}],[\"表示服务器已经接受了请求\",{\"1\":{\"97\":1}}],[\"表示服务器成功处理请求\",{\"1\":{\"97\":1}}],[\"表示服务器成功接收到请求并创建了对应的资源\",{\"1\":{\"97\":1}}],[\"表示服务器成功返回了数据\",{\"1\":{\"97\":1}}],[\"表示客户端可以继续提交请求\",{\"1\":{\"97\":1}}],[\"表示请求成功\",{\"1\":{\"97\":1}}],[\"表示请求已经被成功接收\",{\"1\":{\"97\":1}}],[\"表示请求以接收\",{\"1\":{\"97\":1}}],[\"表示层\",{\"1\":{\"93\":1,\"94\":1}}],[\"表示发送数据到该\",{\"1\":{\"78\":1}}],[\"表示任意类型\",{\"1\":{\"14\":1}}],[\"表连接示意图\",{\"0\":{\"5\":1}}],[\"表连接是通过条件对两表之间的笛卡尔积进行筛选后的结果\",{\"1\":{\"4\":1}}],[\"表连接\",{\"0\":{\"4\":1}}],[\"表为例\",{\"1\":{\"3\":2}}],[\"表中的\",{\"1\":{\"3\":1}}],[\"表的主键字段就是外键\",{\"1\":{\"3\":1}}],[\"表的主键是\",{\"1\":{\"3\":1}}],[\"表的字段\",{\"1\":{\"3\":1}}],[\"black\",{\"1\":{\"118\":2}}],[\"bcp\",{\"1\":{\"94\":1}}],[\"basic\",{\"0\":{\"151\":1,\"154\":1}}],[\"baseval\",{\"1\":{\"88\":5}}],[\"base\",{\"1\":{\"88\":1}}],[\"bad\",{\"1\":{\"97\":2}}],[\"background\",{\"1\":{\"87\":1,\"88\":5,\"90\":1,\"91\":1}}],[\"by\",{\"1\":{\"85\":1}}],[\"byte\",{\"0\":{\"123\":1},\"1\":{\"37\":1,\"47\":1,\"120\":1,\"121\":1,\"122\":2,\"123\":1,\"124\":1}}],[\"be\",{\"1\":{\"85\":1}}],[\"beginindex\",{\"1\":{\"71\":2}}],[\"beverly\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"break\",{\"1\":{\"29\":1,\"30\":3}}],[\"breakcasecontinuedefaultelsefallthroughforgotoifrangereturnselectswitch\",{\"1\":{\"14\":1}}],[\"boundaries\",{\"1\":{\"85\":1}}],[\"bool\",{\"0\":{\"41\":1},\"1\":{\"24\":2,\"41\":2,\"47\":1,\"85\":1,\"114\":1}}],[\"bobby\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"buffer\",{\"1\":{\"24\":2}}],[\"burns\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"b\",{\"1\":{\"3\":2,\"4\":3,\"8\":3,\"12\":2,\"16\":2,\"24\":2,\"49\":6,\"50\":7,\"51\":3,\"52\":4,\"53\":11,\"122\":1,\"123\":3,\"125\":2}}],[\"authenticate报头域一起使用\",{\"1\":{\"97\":1}}],[\"authoritative\",{\"1\":{\"97\":1}}],[\"ack=y+2\",{\"1\":{\"107\":1}}],[\"ack=1表示确认号字段中的值是有效的\",{\"1\":{\"105\":1}}],[\"ack\",{\"1\":{\"105\":1,\"107\":2}}],[\"accepted\",{\"1\":{\"97\":1}}],[\"across\",{\"1\":{\"85\":1}}],[\"adsp\",{\"1\":{\"93\":1}}],[\"address\",{\"1\":{\"117\":1}}],[\"add\",{\"1\":{\"90\":1}}],[\"adams\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"api\",{\"1\":{\"85\":1}}],[\"append\",{\"1\":{\"43\":1,\"73\":3,\"74\":1,\"128\":1}}],[\"and\",{\"1\":{\"64\":2,\"85\":1}}],[\"animal\",{\"1\":{\"20\":1,\"45\":2}}],[\"assignment\",{\"1\":{\"115\":1,\"134\":1}}],[\"as\",{\"0\":{\"61\":1},\"1\":{\"61\":2,\"115\":1}}],[\"ascii\",{\"1\":{\"37\":1,\"122\":2}}],[\"a++\",{\"1\":{\"49\":1}}],[\"arp\",{\"1\":{\"94\":1}}],[\"arr\",{\"1\":{\"71\":1}}],[\"array\",{\"0\":{\"42\":1},\"1\":{\"30\":4}}],[\"art\",{\"1\":{\"6\":1,\"8\":2,\"10\":2,\"11\":2,\"12\":2}}],[\"alan\",{\"1\":{\"7\":1,\"10\":1,\"12\":1}}],[\"age\",{\"1\":{\"3\":3,\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"a\",{\"1\":{\"3\":2,\"4\":3,\"8\":3,\"12\":2,\"16\":2,\"28\":1,\"29\":2,\"45\":2,\"49\":7,\"50\":7,\"51\":4,\"52\":6,\"53\":31,\"85\":3,\"115\":8,\"122\":1,\"123\":4,\"125\":2}}],[\"如何操作\",{\"1\":{\"141\":1}}],[\"如何避免\",{\"1\":{\"130\":1}}],[\"如什么是拷贝提问里易知\",{\"1\":{\"125\":1}}],[\"如下\",{\"1\":{\"125\":2}}],[\"如下十进制的数值\",{\"1\":{\"116\":1}}],[\"如下字符串都是字符串字面量\",{\"1\":{\"114\":1}}],[\"如链表\",{\"1\":{\"111\":1}}],[\"如网线的类型等\",{\"1\":{\"93\":1}}],[\"如果我们想强制回收\",{\"1\":{\"141\":1}}],[\"如果对未初始化的\",{\"0\":{\"134\":1,\"135\":1}}],[\"如果传入的结构体非常大\",{\"1\":{\"131\":1}}],[\"如果\",{\"0\":{\"128\":1}}],[\"如果连接时\",{\"1\":{\"107\":1}}],[\"如果有丢失的情况\",{\"1\":{\"107\":1}}],[\"如果有多个表连接如\",{\"1\":{\"12\":1}}],[\"如果接收到rst位时\",{\"1\":{\"105\":1}}],[\"如果选项字段为空\",{\"1\":{\"105\":1}}],[\"如果tcp数据过大\",{\"1\":{\"105\":1}}],[\"如果相同\",{\"1\":{\"102\":1}}],[\"如果验证通过则继续\",{\"1\":{\"99\":1}}],[\"如果往一个已经\",{\"1\":{\"79\":1}}],[\"如果想创建两个相同数据的切片\",{\"1\":{\"74\":1}}],[\"如果将一个切片赋值给另一个变量\",{\"1\":{\"74\":1}}],[\"如果同时多个通道收到数据\",{\"1\":{\"32\":1}}],[\"如\",{\"1\":{\"3\":1,\"16\":1,\"53\":1,\"78\":2,\"97\":1,\"102\":1,\"114\":1,\"130\":1}}],[\"候选键中删除任意字段都不属于超键\",{\"1\":{\"3\":1}}],[\"候选键是不包含多余字段的超键\",{\"1\":{\"3\":1}}],[\"候选键是超键的子集\",{\"1\":{\"3\":1}}],[\"候选键\",{\"1\":{\"3\":2}}],[\"keytype\",{\"1\":{\"44\":2,\"63\":2}}],[\"key\",{\"0\":{\"66\":1,\"133\":1,\"135\":1,\"141\":2},\"1\":{\"3\":5,\"44\":2,\"63\":2,\"64\":18,\"66\":3,\"85\":1,\"133\":1,\"141\":2}}],[\"面试常见问题\",{\"1\":{\"1\":1}}],[\"介绍\",{\"0\":{\"1\":1,\"76\":1,\"84\":1},\"1\":{\"3\":1,\"14\":1,\"37\":1,\"137\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,wt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,k[s],n)):e==="search"?self.postMessage(et(t,k[s],n)):self.postMessage({suggestions:st(t,k[s],n),results:et(t,k[s],n)})};
//# sourceMappingURL=index.js.map
